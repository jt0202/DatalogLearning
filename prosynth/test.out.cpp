
#include "souffle/CompiledSouffle.h"
#include <mutex>
#include "souffle/Explain.h"

extern "C" {
}

namespace souffle {
using namespace ram;
struct t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,3,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,0,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,3,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [1,0,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_3__0_1_2__1__7 {
using t_tuple = Tuple<RamDomain, 3>;
struct updater_t_btree_3__0_1_2__1__7 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[1] = new_t[1];
old_t[2] = new_t[2];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0>, updater_t_btree_3__0_1_2__1__7>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_3__0_1_2__1__7& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 3 direct b-tree index [0,1,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__31 {
using t_tuple = Tuple<RamDomain, 5>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_6__0_1_2_3_4_5__63 {
using t_tuple = Tuple<RamDomain, 6>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4,5>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_6__0_1_2_3_4_5__63& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t) const {
context h;
return equalRange_63(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 6 direct b-tree index [0,1,2,3,4,5]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};

class Sf_test : public SouffleProgram {
private:
static inline bool regex_wrapper(const std::string& pattern, const std::string& text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\").\n";
}
   return result;
}
private:
static inline std::string substr_wrapper(const std::string& str, size_t idx, size_t len) {
   std::string result; 
   try { result = str.substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
private:
static inline RamDomain wrapper_tonumber(const std::string& str) {
   RamDomain result=0; 
   try { result = stord(str); } catch(...) { 
     std::cerr << "error: wrong string provided by to_number(\"";
     std::cerr << str << "\") functor.\n";
     raise(SIGFPE);
   } return result;
}
public:
// -- initialize symbol table --
SymbolTable symTable
{
	R"_(v0,v1)_",
	R"_(Rule)_",
	R"_(years,v0,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(0),
   years(v0,v1).)_",
	R"_(years,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(1),
   years(v1,v0).)_",
	R"_(yearOfRelease,v0,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(2),
   yearOfRelease(v0,v1).)_",
	R"_(yearOfRelease,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(3),
   yearOfRelease(v1,v0).)_",
	R"_(year,v0,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(4),
   year(v0,v1).)_",
	R"_(year,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(5),
   year(v1,v0).)_",
	R"_(writer,v0,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(6),
   writer(v0,v1).)_",
	R"_(writer,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(7),
   writer(v1,v0).)_",
	R"_(wikisourcelangProperty,v0,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(8),
   wikisourcelangProperty(v0,v1).)_",
	R"_(wikisourcelangProperty,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(9),
   wikisourcelangProperty(v1,v0).)_",
	R"_(Igenre,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(11),
   Igenre(v1,v0).)_",
	R"_(genre,v1,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(13),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(14),
   years(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(15),
   years(v0,v1),
   years(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(16),
   years(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(17),
   years(v1,v0),
   years(v0,v1).)_",
	R"_(years,v2,v1)_",
	R"_(years,v0,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(18),
   years(v2,v1),
   years(v0,v2).)_",
	R"_(years,v1,v2)_",
	R"_(years,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(19),
   years(v1,v2),
   years(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(20),
   years(v2,v0),
   years(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(21),
   years(v2,v0),
   years(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(22),
   years(v0,v2),
   years(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(23),
   years(v0,v2),
   years(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(24),
   years(v2,v1),
   years(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(25),
   years(v1,v2),
   years(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(26),
   years(v0,v1),
   yearOfRelease(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(27),
   years(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(28),
   years(v1,v0),
   yearOfRelease(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(29),
   years(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(yearOfRelease,v0,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(30),
   years(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(yearOfRelease,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(31),
   years(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(yearOfRelease,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(32),
   years(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(yearOfRelease,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(33),
   years(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(34),
   years(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(35),
   years(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(36),
   years(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(37),
   years(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(38),
   years(v0,v1),
   year(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(39),
   years(v0,v1),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(40),
   years(v1,v0),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(41),
   years(v1,v0),
   year(v0,v1).)_",
	R"_(year,v0,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(42),
   years(v2,v1),
   year(v0,v2).)_",
	R"_(year,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(43),
   years(v1,v2),
   year(v2,v0).)_",
	R"_(year,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(44),
   years(v2,v0),
   year(v1,v2).)_",
	R"_(year,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(45),
   years(v2,v0),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(46),
   years(v0,v2),
   year(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(47),
   years(v0,v2),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(48),
   years(v2,v1),
   year(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(49),
   years(v1,v2),
   year(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(50),
   years(v0,v1),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(51),
   years(v0,v1),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(52),
   years(v1,v0),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(53),
   years(v1,v0),
   writer(v0,v1).)_",
	R"_(writer,v0,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(54),
   years(v2,v1),
   writer(v0,v2).)_",
	R"_(writer,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(55),
   years(v1,v2),
   writer(v2,v0).)_",
	R"_(writer,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(56),
   years(v2,v0),
   writer(v1,v2).)_",
	R"_(writer,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(57),
   years(v2,v0),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(58),
   years(v0,v2),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(59),
   years(v0,v2),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(60),
   years(v2,v1),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(61),
   years(v1,v2),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(62),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(63),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(64),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(65),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(wikisourcelangProperty,v0,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(66),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(wikisourcelangProperty,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(67),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(wikisourcelangProperty,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(68),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(wikisourcelangProperty,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(69),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(70),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(71),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(72),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(73),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(75),
   years(v0,v1),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(76),
   years(v1,v0),
   Igenre(v1,v0).)_",
	R"_(Igenre,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(79),
   years(v1,v2),
   Igenre(v2,v0).)_",
	R"_(Igenre,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(80),
   years(v2,v0),
   Igenre(v1,v2).)_",
	R"_(Igenre,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(81),
   years(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(82),
   years(v0,v2),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(83),
   years(v0,v2),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(84),
   years(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(87),
   years(v0,v1),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(88),
   years(v1,v0),
   genre(v1,v0).)_",
	R"_(genre,v2,v0)_",
	R"_(genre(v0,v1) :- 
   Rule(91),
   years(v1,v2),
   genre(v2,v0).)_",
	R"_(genre,v1,v2)_",
	R"_(genre(v0,v1) :- 
   Rule(92),
   years(v2,v0),
   genre(v1,v2).)_",
	R"_(genre,v2,v1)_",
	R"_(genre(v0,v1) :- 
   Rule(93),
   years(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(94),
   years(v0,v2),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(95),
   years(v0,v2),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(96),
   years(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(98),
   yearOfRelease(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(99),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(100),
   yearOfRelease(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(101),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(102),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(103),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(104),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(105),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(106),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(107),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(108),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(109),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(110),
   yearOfRelease(v0,v1),
   year(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(111),
   yearOfRelease(v0,v1),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(112),
   yearOfRelease(v1,v0),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(113),
   yearOfRelease(v1,v0),
   year(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(114),
   yearOfRelease(v2,v1),
   year(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(115),
   yearOfRelease(v1,v2),
   year(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(116),
   yearOfRelease(v2,v0),
   year(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(117),
   yearOfRelease(v2,v0),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(118),
   yearOfRelease(v0,v2),
   year(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(119),
   yearOfRelease(v0,v2),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(120),
   yearOfRelease(v2,v1),
   year(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(121),
   yearOfRelease(v1,v2),
   year(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(122),
   yearOfRelease(v0,v1),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(123),
   yearOfRelease(v0,v1),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(124),
   yearOfRelease(v1,v0),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(125),
   yearOfRelease(v1,v0),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(126),
   yearOfRelease(v2,v1),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(127),
   yearOfRelease(v1,v2),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(128),
   yearOfRelease(v2,v0),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(129),
   yearOfRelease(v2,v0),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(130),
   yearOfRelease(v0,v2),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(131),
   yearOfRelease(v0,v2),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(132),
   yearOfRelease(v2,v1),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(133),
   yearOfRelease(v1,v2),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(134),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(135),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(136),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(137),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(138),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(139),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(140),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(141),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(142),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(143),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(144),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(145),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(147),
   yearOfRelease(v0,v1),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(148),
   yearOfRelease(v1,v0),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(151),
   yearOfRelease(v1,v2),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(152),
   yearOfRelease(v2,v0),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(153),
   yearOfRelease(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(154),
   yearOfRelease(v0,v2),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(155),
   yearOfRelease(v0,v2),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(156),
   yearOfRelease(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(159),
   yearOfRelease(v0,v1),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(160),
   yearOfRelease(v1,v0),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(163),
   yearOfRelease(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(164),
   yearOfRelease(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(165),
   yearOfRelease(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(166),
   yearOfRelease(v0,v2),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(167),
   yearOfRelease(v0,v2),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(168),
   yearOfRelease(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(170),
   year(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(171),
   year(v0,v1),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(172),
   year(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(173),
   year(v1,v0),
   year(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(174),
   year(v2,v1),
   year(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(175),
   year(v1,v2),
   year(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(176),
   year(v2,v0),
   year(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(177),
   year(v2,v0),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(178),
   year(v0,v2),
   year(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(179),
   year(v0,v2),
   year(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(180),
   year(v2,v1),
   year(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(181),
   year(v1,v2),
   year(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(182),
   year(v0,v1),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(183),
   year(v0,v1),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(184),
   year(v1,v0),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(185),
   year(v1,v0),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(186),
   year(v2,v1),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(187),
   year(v1,v2),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(188),
   year(v2,v0),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(189),
   year(v2,v0),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(190),
   year(v0,v2),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(191),
   year(v0,v2),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(192),
   year(v2,v1),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(193),
   year(v1,v2),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(194),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(195),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(196),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(197),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(198),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(199),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(200),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(201),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(202),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(203),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(204),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(205),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(207),
   year(v0,v1),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(208),
   year(v1,v0),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(211),
   year(v1,v2),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(212),
   year(v2,v0),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(213),
   year(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(214),
   year(v0,v2),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(215),
   year(v0,v2),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(216),
   year(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(219),
   year(v0,v1),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(220),
   year(v1,v0),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(223),
   year(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(224),
   year(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(225),
   year(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(226),
   year(v0,v2),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(227),
   year(v0,v2),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(228),
   year(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(230),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(231),
   writer(v0,v1),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(232),
   writer(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(233),
   writer(v1,v0),
   writer(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(234),
   writer(v2,v1),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(235),
   writer(v1,v2),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(236),
   writer(v2,v0),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(237),
   writer(v2,v0),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(238),
   writer(v0,v2),
   writer(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(239),
   writer(v0,v2),
   writer(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(240),
   writer(v2,v1),
   writer(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(241),
   writer(v1,v2),
   writer(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(242),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(243),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(244),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(245),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(246),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(247),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(248),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(249),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(250),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(251),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(252),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(253),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(255),
   writer(v0,v1),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(256),
   writer(v1,v0),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(259),
   writer(v1,v2),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(260),
   writer(v2,v0),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(261),
   writer(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(262),
   writer(v0,v2),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(263),
   writer(v0,v2),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(264),
   writer(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(267),
   writer(v0,v1),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(268),
   writer(v1,v0),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(271),
   writer(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(272),
   writer(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(273),
   writer(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(274),
   writer(v0,v2),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(275),
   writer(v0,v2),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(276),
   writer(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(278),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(279),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(280),
   wikisourcelangProperty(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(281),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(282),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(283),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(284),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(285),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(286),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(287),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(288),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(289),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(291),
   wikisourcelangProperty(v0,v1),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(292),
   wikisourcelangProperty(v1,v0),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(295),
   wikisourcelangProperty(v1,v2),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(296),
   wikisourcelangProperty(v2,v0),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(297),
   wikisourcelangProperty(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(298),
   wikisourcelangProperty(v0,v2),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(299),
   wikisourcelangProperty(v0,v2),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(300),
   wikisourcelangProperty(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(303),
   wikisourcelangProperty(v0,v1),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(304),
   wikisourcelangProperty(v1,v0),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(307),
   wikisourcelangProperty(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(308),
   wikisourcelangProperty(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(309),
   wikisourcelangProperty(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(310),
   wikisourcelangProperty(v0,v2),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(311),
   wikisourcelangProperty(v0,v2),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(312),
   wikisourcelangProperty(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(316),
   Igenre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(319),
   Igenre(v1,v2),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(320),
   Igenre(v2,v0),
   Igenre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(321),
   Igenre(v2,v0),
   Igenre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(324),
   Igenre(v2,v1),
   Igenre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(328),
   Igenre(v1,v0),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(331),
   Igenre(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(332),
   Igenre(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(333),
   Igenre(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(336),
   Igenre(v2,v1),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(340),
   genre(v1,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(343),
   genre(v1,v2),
   genre(v2,v0).)_",
	R"_(genre(v0,v1) :- 
   Rule(344),
   genre(v2,v0),
   genre(v1,v2).)_",
	R"_(genre(v0,v1) :- 
   Rule(345),
   genre(v2,v0),
   genre(v2,v1).)_",
	R"_(genre(v0,v1) :- 
   Rule(348),
   genre(v2,v1),
   genre(v2,v0).)_",
};// -- Table: Igenre
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_1_Igenre = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<0,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_1_Igenre;
// -- Table: Rule
std::unique_ptr<t_btree_3__0_1_2__1__7> rel_2_Rule = std::make_unique<t_btree_3__0_1_2__1__7>();
souffle::RelationWrapper<1,t_btree_3__0_1_2__1__7,Tuple<RamDomain,3>,3> wrapper_rel_2_Rule;
// -- Table: wikisourcelangProperty
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_3_wikisourcelangProperty = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<2,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_3_wikisourcelangProperty;
// -- Table: writer
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_4_writer = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<3,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_4_writer;
// -- Table: year
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_5_year = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<4,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_5_year;
// -- Table: yearOfRelease
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_6_yearOfRelease = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<5,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_6_yearOfRelease;
// -- Table: years
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_7_years = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<6,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_7_years;
// -- Table: genre
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_8_genre = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<7,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_8_genre;
// -- Table: @delta_genre
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_9_delta_genre = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: @new_genre
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_10_new_genre = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: genre.@info.1
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_11_genre_info_1 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<8,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_11_genre_info_1;
// -- Table: genre.@info.10
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_12_genre_info_10 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<9,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_12_genre_info_10;
// -- Table: genre.@info.100
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_13_genre_info_100 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<10,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_13_genre_info_100;
// -- Table: genre.@info.101
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_14_genre_info_101 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<11,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_14_genre_info_101;
// -- Table: genre.@info.102
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_15_genre_info_102 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<12,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_15_genre_info_102;
// -- Table: genre.@info.103
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_16_genre_info_103 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<13,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_16_genre_info_103;
// -- Table: genre.@info.104
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_17_genre_info_104 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<14,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_17_genre_info_104;
// -- Table: genre.@info.105
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_18_genre_info_105 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<15,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_18_genre_info_105;
// -- Table: genre.@info.106
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_19_genre_info_106 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<16,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_19_genre_info_106;
// -- Table: genre.@info.107
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_20_genre_info_107 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<17,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_20_genre_info_107;
// -- Table: genre.@info.108
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_21_genre_info_108 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<18,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_21_genre_info_108;
// -- Table: genre.@info.109
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_22_genre_info_109 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<19,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_22_genre_info_109;
// -- Table: genre.@info.11
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_23_genre_info_11 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<20,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_23_genre_info_11;
// -- Table: genre.@info.110
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_24_genre_info_110 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<21,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_24_genre_info_110;
// -- Table: genre.@info.111
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_25_genre_info_111 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<22,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_25_genre_info_111;
// -- Table: genre.@info.112
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_26_genre_info_112 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<23,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_26_genre_info_112;
// -- Table: genre.@info.113
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_27_genre_info_113 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<24,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_27_genre_info_113;
// -- Table: genre.@info.114
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_28_genre_info_114 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<25,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_28_genre_info_114;
// -- Table: genre.@info.115
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_29_genre_info_115 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<26,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_29_genre_info_115;
// -- Table: genre.@info.116
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_30_genre_info_116 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<27,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_30_genre_info_116;
// -- Table: genre.@info.117
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_31_genre_info_117 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<28,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_31_genre_info_117;
// -- Table: genre.@info.118
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_32_genre_info_118 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<29,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_32_genre_info_118;
// -- Table: genre.@info.119
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_33_genre_info_119 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<30,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_33_genre_info_119;
// -- Table: genre.@info.12
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_34_genre_info_12 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<31,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_34_genre_info_12;
// -- Table: genre.@info.120
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_35_genre_info_120 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<32,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_35_genre_info_120;
// -- Table: genre.@info.121
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_36_genre_info_121 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<33,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_36_genre_info_121;
// -- Table: genre.@info.122
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_37_genre_info_122 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<34,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_37_genre_info_122;
// -- Table: genre.@info.123
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_38_genre_info_123 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<35,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_38_genre_info_123;
// -- Table: genre.@info.124
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_39_genre_info_124 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<36,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_39_genre_info_124;
// -- Table: genre.@info.125
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_40_genre_info_125 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<37,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_40_genre_info_125;
// -- Table: genre.@info.126
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_41_genre_info_126 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<38,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_41_genre_info_126;
// -- Table: genre.@info.127
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_42_genre_info_127 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<39,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_42_genre_info_127;
// -- Table: genre.@info.128
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_43_genre_info_128 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<40,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_43_genre_info_128;
// -- Table: genre.@info.129
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_44_genre_info_129 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<41,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_44_genre_info_129;
// -- Table: genre.@info.13
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_45_genre_info_13 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<42,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_45_genre_info_13;
// -- Table: genre.@info.130
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_46_genre_info_130 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<43,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_46_genre_info_130;
// -- Table: genre.@info.131
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_47_genre_info_131 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<44,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_47_genre_info_131;
// -- Table: genre.@info.132
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_48_genre_info_132 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<45,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_48_genre_info_132;
// -- Table: genre.@info.133
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_49_genre_info_133 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<46,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_49_genre_info_133;
// -- Table: genre.@info.134
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_50_genre_info_134 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<47,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_50_genre_info_134;
// -- Table: genre.@info.135
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_51_genre_info_135 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<48,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_51_genre_info_135;
// -- Table: genre.@info.136
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_52_genre_info_136 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<49,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_52_genre_info_136;
// -- Table: genre.@info.137
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_53_genre_info_137 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<50,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_53_genre_info_137;
// -- Table: genre.@info.138
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_54_genre_info_138 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<51,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_54_genre_info_138;
// -- Table: genre.@info.139
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_55_genre_info_139 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<52,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_55_genre_info_139;
// -- Table: genre.@info.14
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_56_genre_info_14 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<53,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_56_genre_info_14;
// -- Table: genre.@info.140
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_57_genre_info_140 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<54,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_57_genre_info_140;
// -- Table: genre.@info.141
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_58_genre_info_141 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<55,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_58_genre_info_141;
// -- Table: genre.@info.142
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_59_genre_info_142 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<56,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_59_genre_info_142;
// -- Table: genre.@info.143
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_60_genre_info_143 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<57,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_60_genre_info_143;
// -- Table: genre.@info.144
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_61_genre_info_144 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<58,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_61_genre_info_144;
// -- Table: genre.@info.145
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_62_genre_info_145 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<59,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_62_genre_info_145;
// -- Table: genre.@info.146
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_63_genre_info_146 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<60,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_63_genre_info_146;
// -- Table: genre.@info.147
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_64_genre_info_147 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<61,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_64_genre_info_147;
// -- Table: genre.@info.148
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_65_genre_info_148 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<62,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_65_genre_info_148;
// -- Table: genre.@info.149
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_66_genre_info_149 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<63,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_66_genre_info_149;
// -- Table: genre.@info.15
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_67_genre_info_15 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<64,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_67_genre_info_15;
// -- Table: genre.@info.150
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_68_genre_info_150 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<65,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_68_genre_info_150;
// -- Table: genre.@info.151
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_69_genre_info_151 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<66,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_69_genre_info_151;
// -- Table: genre.@info.152
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_70_genre_info_152 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<67,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_70_genre_info_152;
// -- Table: genre.@info.153
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_71_genre_info_153 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<68,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_71_genre_info_153;
// -- Table: genre.@info.154
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_72_genre_info_154 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<69,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_72_genre_info_154;
// -- Table: genre.@info.155
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_73_genre_info_155 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<70,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_73_genre_info_155;
// -- Table: genre.@info.156
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_74_genre_info_156 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<71,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_74_genre_info_156;
// -- Table: genre.@info.157
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_75_genre_info_157 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<72,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_75_genre_info_157;
// -- Table: genre.@info.158
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_76_genre_info_158 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<73,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_76_genre_info_158;
// -- Table: genre.@info.159
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_77_genre_info_159 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<74,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_77_genre_info_159;
// -- Table: genre.@info.16
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_78_genre_info_16 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<75,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_78_genre_info_16;
// -- Table: genre.@info.160
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_79_genre_info_160 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<76,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_79_genre_info_160;
// -- Table: genre.@info.161
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_80_genre_info_161 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<77,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_80_genre_info_161;
// -- Table: genre.@info.162
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_81_genre_info_162 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<78,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_81_genre_info_162;
// -- Table: genre.@info.163
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_82_genre_info_163 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<79,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_82_genre_info_163;
// -- Table: genre.@info.164
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_83_genre_info_164 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<80,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_83_genre_info_164;
// -- Table: genre.@info.165
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_84_genre_info_165 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<81,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_84_genre_info_165;
// -- Table: genre.@info.166
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_85_genre_info_166 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<82,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_85_genre_info_166;
// -- Table: genre.@info.167
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_86_genre_info_167 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<83,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_86_genre_info_167;
// -- Table: genre.@info.168
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_87_genre_info_168 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<84,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_87_genre_info_168;
// -- Table: genre.@info.169
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_88_genre_info_169 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<85,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_88_genre_info_169;
// -- Table: genre.@info.17
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_89_genre_info_17 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<86,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_89_genre_info_17;
// -- Table: genre.@info.170
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_90_genre_info_170 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<87,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_90_genre_info_170;
// -- Table: genre.@info.171
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_91_genre_info_171 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<88,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_91_genre_info_171;
// -- Table: genre.@info.172
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_92_genre_info_172 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<89,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_92_genre_info_172;
// -- Table: genre.@info.173
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_93_genre_info_173 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<90,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_93_genre_info_173;
// -- Table: genre.@info.174
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_94_genre_info_174 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<91,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_94_genre_info_174;
// -- Table: genre.@info.175
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_95_genre_info_175 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<92,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_95_genre_info_175;
// -- Table: genre.@info.176
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_96_genre_info_176 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<93,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_96_genre_info_176;
// -- Table: genre.@info.177
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_97_genre_info_177 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<94,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_97_genre_info_177;
// -- Table: genre.@info.178
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_98_genre_info_178 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<95,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_98_genre_info_178;
// -- Table: genre.@info.179
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_99_genre_info_179 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<96,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_99_genre_info_179;
// -- Table: genre.@info.18
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_100_genre_info_18 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<97,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_100_genre_info_18;
// -- Table: genre.@info.180
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_101_genre_info_180 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<98,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_101_genre_info_180;
// -- Table: genre.@info.181
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_102_genre_info_181 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<99,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_102_genre_info_181;
// -- Table: genre.@info.182
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_103_genre_info_182 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<100,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_103_genre_info_182;
// -- Table: genre.@info.183
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_104_genre_info_183 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<101,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_104_genre_info_183;
// -- Table: genre.@info.184
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_105_genre_info_184 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<102,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_105_genre_info_184;
// -- Table: genre.@info.185
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_106_genre_info_185 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<103,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_106_genre_info_185;
// -- Table: genre.@info.186
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_107_genre_info_186 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<104,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_107_genre_info_186;
// -- Table: genre.@info.187
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_108_genre_info_187 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<105,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_108_genre_info_187;
// -- Table: genre.@info.188
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_109_genre_info_188 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<106,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_109_genre_info_188;
// -- Table: genre.@info.189
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_110_genre_info_189 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<107,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_110_genre_info_189;
// -- Table: genre.@info.19
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_111_genre_info_19 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<108,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_111_genre_info_19;
// -- Table: genre.@info.190
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_112_genre_info_190 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<109,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_112_genre_info_190;
// -- Table: genre.@info.191
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_113_genre_info_191 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<110,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_113_genre_info_191;
// -- Table: genre.@info.192
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_114_genre_info_192 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<111,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_114_genre_info_192;
// -- Table: genre.@info.193
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_115_genre_info_193 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<112,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_115_genre_info_193;
// -- Table: genre.@info.194
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_116_genre_info_194 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<113,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_116_genre_info_194;
// -- Table: genre.@info.195
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_117_genre_info_195 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<114,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_117_genre_info_195;
// -- Table: genre.@info.196
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_118_genre_info_196 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<115,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_118_genre_info_196;
// -- Table: genre.@info.197
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_119_genre_info_197 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<116,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_119_genre_info_197;
// -- Table: genre.@info.198
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_120_genre_info_198 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<117,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_120_genre_info_198;
// -- Table: genre.@info.199
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_121_genre_info_199 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<118,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_121_genre_info_199;
// -- Table: genre.@info.2
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_122_genre_info_2 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<119,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_122_genre_info_2;
// -- Table: genre.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_123_genre_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<120,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_123_genre_info_20;
// -- Table: genre.@info.200
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_124_genre_info_200 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<121,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_124_genre_info_200;
// -- Table: genre.@info.201
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_125_genre_info_201 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<122,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_125_genre_info_201;
// -- Table: genre.@info.202
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_126_genre_info_202 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<123,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_126_genre_info_202;
// -- Table: genre.@info.203
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_127_genre_info_203 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<124,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_127_genre_info_203;
// -- Table: genre.@info.204
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_128_genre_info_204 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<125,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_128_genre_info_204;
// -- Table: genre.@info.205
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_129_genre_info_205 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<126,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_129_genre_info_205;
// -- Table: genre.@info.206
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_130_genre_info_206 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<127,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_130_genre_info_206;
// -- Table: genre.@info.207
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_131_genre_info_207 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<128,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_131_genre_info_207;
// -- Table: genre.@info.208
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_132_genre_info_208 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<129,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_132_genre_info_208;
// -- Table: genre.@info.209
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_133_genre_info_209 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<130,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_133_genre_info_209;
// -- Table: genre.@info.21
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_134_genre_info_21 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<131,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_134_genre_info_21;
// -- Table: genre.@info.210
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_135_genre_info_210 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<132,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_135_genre_info_210;
// -- Table: genre.@info.211
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_136_genre_info_211 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<133,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_136_genre_info_211;
// -- Table: genre.@info.212
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_137_genre_info_212 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<134,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_137_genre_info_212;
// -- Table: genre.@info.213
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_138_genre_info_213 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<135,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_138_genre_info_213;
// -- Table: genre.@info.214
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_139_genre_info_214 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<136,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_139_genre_info_214;
// -- Table: genre.@info.215
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_140_genre_info_215 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<137,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_140_genre_info_215;
// -- Table: genre.@info.216
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_141_genre_info_216 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<138,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_141_genre_info_216;
// -- Table: genre.@info.217
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_142_genre_info_217 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<139,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_142_genre_info_217;
// -- Table: genre.@info.218
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_143_genre_info_218 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<140,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_143_genre_info_218;
// -- Table: genre.@info.219
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_144_genre_info_219 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<141,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_144_genre_info_219;
// -- Table: genre.@info.22
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_145_genre_info_22 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<142,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_145_genre_info_22;
// -- Table: genre.@info.220
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_146_genre_info_220 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<143,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_146_genre_info_220;
// -- Table: genre.@info.221
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_147_genre_info_221 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<144,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_147_genre_info_221;
// -- Table: genre.@info.222
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_148_genre_info_222 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<145,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_148_genre_info_222;
// -- Table: genre.@info.223
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_149_genre_info_223 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<146,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_149_genre_info_223;
// -- Table: genre.@info.224
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_150_genre_info_224 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<147,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_150_genre_info_224;
// -- Table: genre.@info.225
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_151_genre_info_225 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<148,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_151_genre_info_225;
// -- Table: genre.@info.226
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_152_genre_info_226 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<149,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_152_genre_info_226;
// -- Table: genre.@info.227
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_153_genre_info_227 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<150,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_153_genre_info_227;
// -- Table: genre.@info.228
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_154_genre_info_228 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<151,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_154_genre_info_228;
// -- Table: genre.@info.229
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_155_genre_info_229 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<152,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_155_genre_info_229;
// -- Table: genre.@info.23
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_156_genre_info_23 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<153,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_156_genre_info_23;
// -- Table: genre.@info.230
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_157_genre_info_230 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<154,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_157_genre_info_230;
// -- Table: genre.@info.231
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_158_genre_info_231 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<155,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_158_genre_info_231;
// -- Table: genre.@info.232
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_159_genre_info_232 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<156,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_159_genre_info_232;
// -- Table: genre.@info.233
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_160_genre_info_233 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<157,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_160_genre_info_233;
// -- Table: genre.@info.234
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_161_genre_info_234 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<158,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_161_genre_info_234;
// -- Table: genre.@info.235
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_162_genre_info_235 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<159,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_162_genre_info_235;
// -- Table: genre.@info.236
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_163_genre_info_236 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<160,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_163_genre_info_236;
// -- Table: genre.@info.237
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_164_genre_info_237 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<161,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_164_genre_info_237;
// -- Table: genre.@info.238
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_165_genre_info_238 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<162,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_165_genre_info_238;
// -- Table: genre.@info.239
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_166_genre_info_239 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<163,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_166_genre_info_239;
// -- Table: genre.@info.24
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_167_genre_info_24 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<164,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_167_genre_info_24;
// -- Table: genre.@info.240
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_168_genre_info_240 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<165,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_168_genre_info_240;
// -- Table: genre.@info.241
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_169_genre_info_241 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<166,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_169_genre_info_241;
// -- Table: genre.@info.242
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_170_genre_info_242 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<167,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_170_genre_info_242;
// -- Table: genre.@info.243
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_171_genre_info_243 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<168,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_171_genre_info_243;
// -- Table: genre.@info.244
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_172_genre_info_244 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<169,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_172_genre_info_244;
// -- Table: genre.@info.245
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_173_genre_info_245 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<170,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_173_genre_info_245;
// -- Table: genre.@info.246
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_174_genre_info_246 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<171,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_174_genre_info_246;
// -- Table: genre.@info.247
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_175_genre_info_247 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<172,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_175_genre_info_247;
// -- Table: genre.@info.248
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_176_genre_info_248 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<173,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_176_genre_info_248;
// -- Table: genre.@info.249
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_177_genre_info_249 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<174,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_177_genre_info_249;
// -- Table: genre.@info.25
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_178_genre_info_25 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<175,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_178_genre_info_25;
// -- Table: genre.@info.250
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_179_genre_info_250 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<176,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_179_genre_info_250;
// -- Table: genre.@info.251
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_180_genre_info_251 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<177,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_180_genre_info_251;
// -- Table: genre.@info.252
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_181_genre_info_252 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<178,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_181_genre_info_252;
// -- Table: genre.@info.253
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_182_genre_info_253 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<179,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_182_genre_info_253;
// -- Table: genre.@info.254
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_183_genre_info_254 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<180,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_183_genre_info_254;
// -- Table: genre.@info.255
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_184_genre_info_255 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<181,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_184_genre_info_255;
// -- Table: genre.@info.256
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_185_genre_info_256 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<182,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_185_genre_info_256;
// -- Table: genre.@info.257
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_186_genre_info_257 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<183,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_186_genre_info_257;
// -- Table: genre.@info.258
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_187_genre_info_258 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<184,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_187_genre_info_258;
// -- Table: genre.@info.259
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_188_genre_info_259 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<185,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_188_genre_info_259;
// -- Table: genre.@info.26
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_189_genre_info_26 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<186,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_189_genre_info_26;
// -- Table: genre.@info.260
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_190_genre_info_260 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<187,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_190_genre_info_260;
// -- Table: genre.@info.261
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_191_genre_info_261 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<188,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_191_genre_info_261;
// -- Table: genre.@info.262
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_192_genre_info_262 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<189,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_192_genre_info_262;
// -- Table: genre.@info.263
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_193_genre_info_263 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<190,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_193_genre_info_263;
// -- Table: genre.@info.264
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_194_genre_info_264 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<191,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_194_genre_info_264;
// -- Table: genre.@info.265
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_195_genre_info_265 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<192,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_195_genre_info_265;
// -- Table: genre.@info.266
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_196_genre_info_266 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<193,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_196_genre_info_266;
// -- Table: genre.@info.267
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_197_genre_info_267 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<194,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_197_genre_info_267;
// -- Table: genre.@info.268
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_198_genre_info_268 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<195,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_198_genre_info_268;
// -- Table: genre.@info.269
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_199_genre_info_269 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<196,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_199_genre_info_269;
// -- Table: genre.@info.27
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_200_genre_info_27 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<197,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_200_genre_info_27;
// -- Table: genre.@info.270
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_201_genre_info_270 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<198,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_201_genre_info_270;
// -- Table: genre.@info.271
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_202_genre_info_271 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<199,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_202_genre_info_271;
// -- Table: genre.@info.272
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_203_genre_info_272 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<200,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_203_genre_info_272;
// -- Table: genre.@info.273
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_204_genre_info_273 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<201,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_204_genre_info_273;
// -- Table: genre.@info.274
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_205_genre_info_274 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<202,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_205_genre_info_274;
// -- Table: genre.@info.275
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_206_genre_info_275 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<203,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_206_genre_info_275;
// -- Table: genre.@info.276
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_207_genre_info_276 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<204,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_207_genre_info_276;
// -- Table: genre.@info.277
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_208_genre_info_277 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<205,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_208_genre_info_277;
// -- Table: genre.@info.278
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_209_genre_info_278 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<206,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_209_genre_info_278;
// -- Table: genre.@info.279
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_210_genre_info_279 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<207,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_210_genre_info_279;
// -- Table: genre.@info.28
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_211_genre_info_28 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<208,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_211_genre_info_28;
// -- Table: genre.@info.280
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_212_genre_info_280 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<209,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_212_genre_info_280;
// -- Table: genre.@info.281
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_213_genre_info_281 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<210,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_213_genre_info_281;
// -- Table: genre.@info.282
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_214_genre_info_282 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<211,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_214_genre_info_282;
// -- Table: genre.@info.283
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_215_genre_info_283 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<212,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_215_genre_info_283;
// -- Table: genre.@info.284
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_216_genre_info_284 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<213,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_216_genre_info_284;
// -- Table: genre.@info.285
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_217_genre_info_285 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<214,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_217_genre_info_285;
// -- Table: genre.@info.286
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_218_genre_info_286 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<215,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_218_genre_info_286;
// -- Table: genre.@info.287
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_219_genre_info_287 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<216,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_219_genre_info_287;
// -- Table: genre.@info.29
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_220_genre_info_29 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<217,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_220_genre_info_29;
// -- Table: genre.@info.3
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_221_genre_info_3 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<218,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_221_genre_info_3;
// -- Table: genre.@info.30
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_222_genre_info_30 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<219,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_222_genre_info_30;
// -- Table: genre.@info.31
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_223_genre_info_31 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<220,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_223_genre_info_31;
// -- Table: genre.@info.32
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_224_genre_info_32 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<221,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_224_genre_info_32;
// -- Table: genre.@info.33
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_225_genre_info_33 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<222,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_225_genre_info_33;
// -- Table: genre.@info.34
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_226_genre_info_34 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<223,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_226_genre_info_34;
// -- Table: genre.@info.35
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_227_genre_info_35 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<224,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_227_genre_info_35;
// -- Table: genre.@info.36
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_228_genre_info_36 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<225,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_228_genre_info_36;
// -- Table: genre.@info.37
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_229_genre_info_37 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<226,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_229_genre_info_37;
// -- Table: genre.@info.38
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_230_genre_info_38 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<227,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_230_genre_info_38;
// -- Table: genre.@info.39
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_231_genre_info_39 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<228,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_231_genre_info_39;
// -- Table: genre.@info.4
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_232_genre_info_4 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<229,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_232_genre_info_4;
// -- Table: genre.@info.40
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_233_genre_info_40 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<230,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_233_genre_info_40;
// -- Table: genre.@info.41
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_234_genre_info_41 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<231,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_234_genre_info_41;
// -- Table: genre.@info.42
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_235_genre_info_42 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<232,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_235_genre_info_42;
// -- Table: genre.@info.43
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_236_genre_info_43 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<233,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_236_genre_info_43;
// -- Table: genre.@info.44
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_237_genre_info_44 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<234,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_237_genre_info_44;
// -- Table: genre.@info.45
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_238_genre_info_45 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<235,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_238_genre_info_45;
// -- Table: genre.@info.46
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_239_genre_info_46 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<236,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_239_genre_info_46;
// -- Table: genre.@info.47
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_240_genre_info_47 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<237,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_240_genre_info_47;
// -- Table: genre.@info.48
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_241_genre_info_48 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<238,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_241_genre_info_48;
// -- Table: genre.@info.49
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_242_genre_info_49 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<239,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_242_genre_info_49;
// -- Table: genre.@info.5
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_243_genre_info_5 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<240,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_243_genre_info_5;
// -- Table: genre.@info.50
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_244_genre_info_50 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<241,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_244_genre_info_50;
// -- Table: genre.@info.51
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_245_genre_info_51 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<242,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_245_genre_info_51;
// -- Table: genre.@info.52
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_246_genre_info_52 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<243,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_246_genre_info_52;
// -- Table: genre.@info.53
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_247_genre_info_53 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<244,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_247_genre_info_53;
// -- Table: genre.@info.54
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_248_genre_info_54 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<245,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_248_genre_info_54;
// -- Table: genre.@info.55
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_249_genre_info_55 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<246,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_249_genre_info_55;
// -- Table: genre.@info.56
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_250_genre_info_56 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<247,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_250_genre_info_56;
// -- Table: genre.@info.57
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_251_genre_info_57 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<248,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_251_genre_info_57;
// -- Table: genre.@info.58
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_252_genre_info_58 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<249,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_252_genre_info_58;
// -- Table: genre.@info.59
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_253_genre_info_59 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<250,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_253_genre_info_59;
// -- Table: genre.@info.6
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_254_genre_info_6 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<251,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_254_genre_info_6;
// -- Table: genre.@info.60
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_255_genre_info_60 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<252,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_255_genre_info_60;
// -- Table: genre.@info.61
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_256_genre_info_61 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<253,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_256_genre_info_61;
// -- Table: genre.@info.62
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_257_genre_info_62 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<254,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_257_genre_info_62;
// -- Table: genre.@info.63
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_258_genre_info_63 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<255,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_258_genre_info_63;
// -- Table: genre.@info.64
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_259_genre_info_64 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<256,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_259_genre_info_64;
// -- Table: genre.@info.65
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_260_genre_info_65 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<257,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_260_genre_info_65;
// -- Table: genre.@info.66
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_261_genre_info_66 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<258,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_261_genre_info_66;
// -- Table: genre.@info.67
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_262_genre_info_67 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<259,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_262_genre_info_67;
// -- Table: genre.@info.68
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_263_genre_info_68 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<260,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_263_genre_info_68;
// -- Table: genre.@info.69
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_264_genre_info_69 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<261,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_264_genre_info_69;
// -- Table: genre.@info.7
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_265_genre_info_7 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<262,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_265_genre_info_7;
// -- Table: genre.@info.70
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_266_genre_info_70 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<263,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_266_genre_info_70;
// -- Table: genre.@info.71
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_267_genre_info_71 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<264,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_267_genre_info_71;
// -- Table: genre.@info.72
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_268_genre_info_72 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<265,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_268_genre_info_72;
// -- Table: genre.@info.73
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_269_genre_info_73 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<266,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_269_genre_info_73;
// -- Table: genre.@info.74
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_270_genre_info_74 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<267,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_270_genre_info_74;
// -- Table: genre.@info.75
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_271_genre_info_75 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<268,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_271_genre_info_75;
// -- Table: genre.@info.76
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_272_genre_info_76 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<269,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_272_genre_info_76;
// -- Table: genre.@info.77
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_273_genre_info_77 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<270,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_273_genre_info_77;
// -- Table: genre.@info.78
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_274_genre_info_78 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<271,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_274_genre_info_78;
// -- Table: genre.@info.79
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_275_genre_info_79 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<272,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_275_genre_info_79;
// -- Table: genre.@info.8
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_276_genre_info_8 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<273,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_276_genre_info_8;
// -- Table: genre.@info.80
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_277_genre_info_80 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<274,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_277_genre_info_80;
// -- Table: genre.@info.81
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_278_genre_info_81 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<275,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_278_genre_info_81;
// -- Table: genre.@info.82
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_279_genre_info_82 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<276,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_279_genre_info_82;
// -- Table: genre.@info.83
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_280_genre_info_83 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<277,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_280_genre_info_83;
// -- Table: genre.@info.84
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_281_genre_info_84 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<278,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_281_genre_info_84;
// -- Table: genre.@info.85
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_282_genre_info_85 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<279,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_282_genre_info_85;
// -- Table: genre.@info.86
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_283_genre_info_86 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<280,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_283_genre_info_86;
// -- Table: genre.@info.87
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_284_genre_info_87 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<281,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_284_genre_info_87;
// -- Table: genre.@info.88
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_285_genre_info_88 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<282,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_285_genre_info_88;
// -- Table: genre.@info.89
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_286_genre_info_89 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<283,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_286_genre_info_89;
// -- Table: genre.@info.9
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_287_genre_info_9 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<284,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_287_genre_info_9;
// -- Table: genre.@info.90
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_288_genre_info_90 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<285,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_288_genre_info_90;
// -- Table: genre.@info.91
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_289_genre_info_91 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<286,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_289_genre_info_91;
// -- Table: genre.@info.92
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_290_genre_info_92 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<287,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_290_genre_info_92;
// -- Table: genre.@info.93
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_291_genre_info_93 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<288,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_291_genre_info_93;
// -- Table: genre.@info.94
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_292_genre_info_94 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<289,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_292_genre_info_94;
// -- Table: genre.@info.95
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_293_genre_info_95 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<290,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_293_genre_info_95;
// -- Table: genre.@info.96
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_294_genre_info_96 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<291,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_294_genre_info_96;
// -- Table: genre.@info.97
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_295_genre_info_97 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<292,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_295_genre_info_97;
// -- Table: genre.@info.98
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_296_genre_info_98 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<293,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_296_genre_info_98;
// -- Table: genre.@info.99
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_297_genre_info_99 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<294,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_297_genre_info_99;
public:
Sf_test() : 
wrapper_rel_1_Igenre(*rel_1_Igenre,symTable,"Igenre",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_2_Rule(*rel_2_Rule,symTable,"Rule",std::array<const char *,3>{{"i:number","i:number","i:number"}},std::array<const char *,3>{{"n","@rule_number","@level_number"}}),

wrapper_rel_3_wikisourcelangProperty(*rel_3_wikisourcelangProperty,symTable,"wikisourcelangProperty",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_4_writer(*rel_4_writer,symTable,"writer",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_5_year(*rel_5_year,symTable,"year",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_6_yearOfRelease(*rel_6_yearOfRelease,symTable,"yearOfRelease",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_7_years(*rel_7_years,symTable,"years",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_8_genre(*rel_8_genre,symTable,"genre",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_11_genre_info_1(*rel_11_genre_info_1,symTable,"genre.@info.1",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_12_genre_info_10(*rel_12_genre_info_10,symTable,"genre.@info.10",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_13_genre_info_100(*rel_13_genre_info_100,symTable,"genre.@info.100",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_14_genre_info_101(*rel_14_genre_info_101,symTable,"genre.@info.101",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_15_genre_info_102(*rel_15_genre_info_102,symTable,"genre.@info.102",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_16_genre_info_103(*rel_16_genre_info_103,symTable,"genre.@info.103",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_17_genre_info_104(*rel_17_genre_info_104,symTable,"genre.@info.104",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_18_genre_info_105(*rel_18_genre_info_105,symTable,"genre.@info.105",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_19_genre_info_106(*rel_19_genre_info_106,symTable,"genre.@info.106",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_20_genre_info_107(*rel_20_genre_info_107,symTable,"genre.@info.107",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_21_genre_info_108(*rel_21_genre_info_108,symTable,"genre.@info.108",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_22_genre_info_109(*rel_22_genre_info_109,symTable,"genre.@info.109",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_23_genre_info_11(*rel_23_genre_info_11,symTable,"genre.@info.11",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_24_genre_info_110(*rel_24_genre_info_110,symTable,"genre.@info.110",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_25_genre_info_111(*rel_25_genre_info_111,symTable,"genre.@info.111",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_26_genre_info_112(*rel_26_genre_info_112,symTable,"genre.@info.112",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_27_genre_info_113(*rel_27_genre_info_113,symTable,"genre.@info.113",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_28_genre_info_114(*rel_28_genre_info_114,symTable,"genre.@info.114",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_29_genre_info_115(*rel_29_genre_info_115,symTable,"genre.@info.115",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_30_genre_info_116(*rel_30_genre_info_116,symTable,"genre.@info.116",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_31_genre_info_117(*rel_31_genre_info_117,symTable,"genre.@info.117",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_32_genre_info_118(*rel_32_genre_info_118,symTable,"genre.@info.118",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_33_genre_info_119(*rel_33_genre_info_119,symTable,"genre.@info.119",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_34_genre_info_12(*rel_34_genre_info_12,symTable,"genre.@info.12",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_35_genre_info_120(*rel_35_genre_info_120,symTable,"genre.@info.120",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_36_genre_info_121(*rel_36_genre_info_121,symTable,"genre.@info.121",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_37_genre_info_122(*rel_37_genre_info_122,symTable,"genre.@info.122",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_38_genre_info_123(*rel_38_genre_info_123,symTable,"genre.@info.123",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_39_genre_info_124(*rel_39_genre_info_124,symTable,"genre.@info.124",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_40_genre_info_125(*rel_40_genre_info_125,symTable,"genre.@info.125",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_41_genre_info_126(*rel_41_genre_info_126,symTable,"genre.@info.126",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_42_genre_info_127(*rel_42_genre_info_127,symTable,"genre.@info.127",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_43_genre_info_128(*rel_43_genre_info_128,symTable,"genre.@info.128",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_44_genre_info_129(*rel_44_genre_info_129,symTable,"genre.@info.129",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_45_genre_info_13(*rel_45_genre_info_13,symTable,"genre.@info.13",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_46_genre_info_130(*rel_46_genre_info_130,symTable,"genre.@info.130",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_47_genre_info_131(*rel_47_genre_info_131,symTable,"genre.@info.131",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_48_genre_info_132(*rel_48_genre_info_132,symTable,"genre.@info.132",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_49_genre_info_133(*rel_49_genre_info_133,symTable,"genre.@info.133",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_50_genre_info_134(*rel_50_genre_info_134,symTable,"genre.@info.134",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_51_genre_info_135(*rel_51_genre_info_135,symTable,"genre.@info.135",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_52_genre_info_136(*rel_52_genre_info_136,symTable,"genre.@info.136",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_53_genre_info_137(*rel_53_genre_info_137,symTable,"genre.@info.137",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_54_genre_info_138(*rel_54_genre_info_138,symTable,"genre.@info.138",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_55_genre_info_139(*rel_55_genre_info_139,symTable,"genre.@info.139",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_56_genre_info_14(*rel_56_genre_info_14,symTable,"genre.@info.14",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_57_genre_info_140(*rel_57_genre_info_140,symTable,"genre.@info.140",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_58_genre_info_141(*rel_58_genre_info_141,symTable,"genre.@info.141",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_59_genre_info_142(*rel_59_genre_info_142,symTable,"genre.@info.142",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_60_genre_info_143(*rel_60_genre_info_143,symTable,"genre.@info.143",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_61_genre_info_144(*rel_61_genre_info_144,symTable,"genre.@info.144",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_62_genre_info_145(*rel_62_genre_info_145,symTable,"genre.@info.145",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_63_genre_info_146(*rel_63_genre_info_146,symTable,"genre.@info.146",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_64_genre_info_147(*rel_64_genre_info_147,symTable,"genre.@info.147",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_65_genre_info_148(*rel_65_genre_info_148,symTable,"genre.@info.148",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_66_genre_info_149(*rel_66_genre_info_149,symTable,"genre.@info.149",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_67_genre_info_15(*rel_67_genre_info_15,symTable,"genre.@info.15",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_68_genre_info_150(*rel_68_genre_info_150,symTable,"genre.@info.150",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_69_genre_info_151(*rel_69_genre_info_151,symTable,"genre.@info.151",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_70_genre_info_152(*rel_70_genre_info_152,symTable,"genre.@info.152",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_71_genre_info_153(*rel_71_genre_info_153,symTable,"genre.@info.153",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_72_genre_info_154(*rel_72_genre_info_154,symTable,"genre.@info.154",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_73_genre_info_155(*rel_73_genre_info_155,symTable,"genre.@info.155",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_74_genre_info_156(*rel_74_genre_info_156,symTable,"genre.@info.156",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_75_genre_info_157(*rel_75_genre_info_157,symTable,"genre.@info.157",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_76_genre_info_158(*rel_76_genre_info_158,symTable,"genre.@info.158",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_77_genre_info_159(*rel_77_genre_info_159,symTable,"genre.@info.159",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_78_genre_info_16(*rel_78_genre_info_16,symTable,"genre.@info.16",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_79_genre_info_160(*rel_79_genre_info_160,symTable,"genre.@info.160",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_80_genre_info_161(*rel_80_genre_info_161,symTable,"genre.@info.161",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_81_genre_info_162(*rel_81_genre_info_162,symTable,"genre.@info.162",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_82_genre_info_163(*rel_82_genre_info_163,symTable,"genre.@info.163",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_83_genre_info_164(*rel_83_genre_info_164,symTable,"genre.@info.164",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_84_genre_info_165(*rel_84_genre_info_165,symTable,"genre.@info.165",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_85_genre_info_166(*rel_85_genre_info_166,symTable,"genre.@info.166",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_86_genre_info_167(*rel_86_genre_info_167,symTable,"genre.@info.167",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_87_genre_info_168(*rel_87_genre_info_168,symTable,"genre.@info.168",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_88_genre_info_169(*rel_88_genre_info_169,symTable,"genre.@info.169",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_89_genre_info_17(*rel_89_genre_info_17,symTable,"genre.@info.17",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_90_genre_info_170(*rel_90_genre_info_170,symTable,"genre.@info.170",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_91_genre_info_171(*rel_91_genre_info_171,symTable,"genre.@info.171",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_92_genre_info_172(*rel_92_genre_info_172,symTable,"genre.@info.172",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_93_genre_info_173(*rel_93_genre_info_173,symTable,"genre.@info.173",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_94_genre_info_174(*rel_94_genre_info_174,symTable,"genre.@info.174",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_95_genre_info_175(*rel_95_genre_info_175,symTable,"genre.@info.175",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_96_genre_info_176(*rel_96_genre_info_176,symTable,"genre.@info.176",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_97_genre_info_177(*rel_97_genre_info_177,symTable,"genre.@info.177",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_98_genre_info_178(*rel_98_genre_info_178,symTable,"genre.@info.178",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_99_genre_info_179(*rel_99_genre_info_179,symTable,"genre.@info.179",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_100_genre_info_18(*rel_100_genre_info_18,symTable,"genre.@info.18",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_101_genre_info_180(*rel_101_genre_info_180,symTable,"genre.@info.180",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_102_genre_info_181(*rel_102_genre_info_181,symTable,"genre.@info.181",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_103_genre_info_182(*rel_103_genre_info_182,symTable,"genre.@info.182",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_104_genre_info_183(*rel_104_genre_info_183,symTable,"genre.@info.183",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_105_genre_info_184(*rel_105_genre_info_184,symTable,"genre.@info.184",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_106_genre_info_185(*rel_106_genre_info_185,symTable,"genre.@info.185",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_107_genre_info_186(*rel_107_genre_info_186,symTable,"genre.@info.186",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_108_genre_info_187(*rel_108_genre_info_187,symTable,"genre.@info.187",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_109_genre_info_188(*rel_109_genre_info_188,symTable,"genre.@info.188",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_110_genre_info_189(*rel_110_genre_info_189,symTable,"genre.@info.189",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_111_genre_info_19(*rel_111_genre_info_19,symTable,"genre.@info.19",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_112_genre_info_190(*rel_112_genre_info_190,symTable,"genre.@info.190",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_113_genre_info_191(*rel_113_genre_info_191,symTable,"genre.@info.191",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_114_genre_info_192(*rel_114_genre_info_192,symTable,"genre.@info.192",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_115_genre_info_193(*rel_115_genre_info_193,symTable,"genre.@info.193",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_116_genre_info_194(*rel_116_genre_info_194,symTable,"genre.@info.194",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_117_genre_info_195(*rel_117_genre_info_195,symTable,"genre.@info.195",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_118_genre_info_196(*rel_118_genre_info_196,symTable,"genre.@info.196",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_119_genre_info_197(*rel_119_genre_info_197,symTable,"genre.@info.197",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_120_genre_info_198(*rel_120_genre_info_198,symTable,"genre.@info.198",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_121_genre_info_199(*rel_121_genre_info_199,symTable,"genre.@info.199",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_122_genre_info_2(*rel_122_genre_info_2,symTable,"genre.@info.2",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_123_genre_info_20(*rel_123_genre_info_20,symTable,"genre.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_124_genre_info_200(*rel_124_genre_info_200,symTable,"genre.@info.200",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_125_genre_info_201(*rel_125_genre_info_201,symTable,"genre.@info.201",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_126_genre_info_202(*rel_126_genre_info_202,symTable,"genre.@info.202",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_127_genre_info_203(*rel_127_genre_info_203,symTable,"genre.@info.203",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_128_genre_info_204(*rel_128_genre_info_204,symTable,"genre.@info.204",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_129_genre_info_205(*rel_129_genre_info_205,symTable,"genre.@info.205",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_130_genre_info_206(*rel_130_genre_info_206,symTable,"genre.@info.206",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_131_genre_info_207(*rel_131_genre_info_207,symTable,"genre.@info.207",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_132_genre_info_208(*rel_132_genre_info_208,symTable,"genre.@info.208",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_133_genre_info_209(*rel_133_genre_info_209,symTable,"genre.@info.209",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_134_genre_info_21(*rel_134_genre_info_21,symTable,"genre.@info.21",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_135_genre_info_210(*rel_135_genre_info_210,symTable,"genre.@info.210",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_136_genre_info_211(*rel_136_genre_info_211,symTable,"genre.@info.211",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_137_genre_info_212(*rel_137_genre_info_212,symTable,"genre.@info.212",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_138_genre_info_213(*rel_138_genre_info_213,symTable,"genre.@info.213",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_139_genre_info_214(*rel_139_genre_info_214,symTable,"genre.@info.214",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_140_genre_info_215(*rel_140_genre_info_215,symTable,"genre.@info.215",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_141_genre_info_216(*rel_141_genre_info_216,symTable,"genre.@info.216",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_142_genre_info_217(*rel_142_genre_info_217,symTable,"genre.@info.217",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_143_genre_info_218(*rel_143_genre_info_218,symTable,"genre.@info.218",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_144_genre_info_219(*rel_144_genre_info_219,symTable,"genre.@info.219",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_145_genre_info_22(*rel_145_genre_info_22,symTable,"genre.@info.22",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_146_genre_info_220(*rel_146_genre_info_220,symTable,"genre.@info.220",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_147_genre_info_221(*rel_147_genre_info_221,symTable,"genre.@info.221",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_148_genre_info_222(*rel_148_genre_info_222,symTable,"genre.@info.222",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_149_genre_info_223(*rel_149_genre_info_223,symTable,"genre.@info.223",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_150_genre_info_224(*rel_150_genre_info_224,symTable,"genre.@info.224",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_151_genre_info_225(*rel_151_genre_info_225,symTable,"genre.@info.225",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_152_genre_info_226(*rel_152_genre_info_226,symTable,"genre.@info.226",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_153_genre_info_227(*rel_153_genre_info_227,symTable,"genre.@info.227",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_154_genre_info_228(*rel_154_genre_info_228,symTable,"genre.@info.228",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_155_genre_info_229(*rel_155_genre_info_229,symTable,"genre.@info.229",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_156_genre_info_23(*rel_156_genre_info_23,symTable,"genre.@info.23",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_157_genre_info_230(*rel_157_genre_info_230,symTable,"genre.@info.230",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_158_genre_info_231(*rel_158_genre_info_231,symTable,"genre.@info.231",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_159_genre_info_232(*rel_159_genre_info_232,symTable,"genre.@info.232",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_160_genre_info_233(*rel_160_genre_info_233,symTable,"genre.@info.233",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_161_genre_info_234(*rel_161_genre_info_234,symTable,"genre.@info.234",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_162_genre_info_235(*rel_162_genre_info_235,symTable,"genre.@info.235",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_163_genre_info_236(*rel_163_genre_info_236,symTable,"genre.@info.236",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_164_genre_info_237(*rel_164_genre_info_237,symTable,"genre.@info.237",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_165_genre_info_238(*rel_165_genre_info_238,symTable,"genre.@info.238",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_166_genre_info_239(*rel_166_genre_info_239,symTable,"genre.@info.239",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_167_genre_info_24(*rel_167_genre_info_24,symTable,"genre.@info.24",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_168_genre_info_240(*rel_168_genre_info_240,symTable,"genre.@info.240",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_169_genre_info_241(*rel_169_genre_info_241,symTable,"genre.@info.241",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_170_genre_info_242(*rel_170_genre_info_242,symTable,"genre.@info.242",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_171_genre_info_243(*rel_171_genre_info_243,symTable,"genre.@info.243",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_172_genre_info_244(*rel_172_genre_info_244,symTable,"genre.@info.244",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_173_genre_info_245(*rel_173_genre_info_245,symTable,"genre.@info.245",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_174_genre_info_246(*rel_174_genre_info_246,symTable,"genre.@info.246",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_175_genre_info_247(*rel_175_genre_info_247,symTable,"genre.@info.247",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_176_genre_info_248(*rel_176_genre_info_248,symTable,"genre.@info.248",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_177_genre_info_249(*rel_177_genre_info_249,symTable,"genre.@info.249",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_178_genre_info_25(*rel_178_genre_info_25,symTable,"genre.@info.25",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_179_genre_info_250(*rel_179_genre_info_250,symTable,"genre.@info.250",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_180_genre_info_251(*rel_180_genre_info_251,symTable,"genre.@info.251",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_181_genre_info_252(*rel_181_genre_info_252,symTable,"genre.@info.252",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_182_genre_info_253(*rel_182_genre_info_253,symTable,"genre.@info.253",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_183_genre_info_254(*rel_183_genre_info_254,symTable,"genre.@info.254",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_184_genre_info_255(*rel_184_genre_info_255,symTable,"genre.@info.255",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_185_genre_info_256(*rel_185_genre_info_256,symTable,"genre.@info.256",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_186_genre_info_257(*rel_186_genre_info_257,symTable,"genre.@info.257",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_187_genre_info_258(*rel_187_genre_info_258,symTable,"genre.@info.258",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_188_genre_info_259(*rel_188_genre_info_259,symTable,"genre.@info.259",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_189_genre_info_26(*rel_189_genre_info_26,symTable,"genre.@info.26",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_190_genre_info_260(*rel_190_genre_info_260,symTable,"genre.@info.260",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_191_genre_info_261(*rel_191_genre_info_261,symTable,"genre.@info.261",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_192_genre_info_262(*rel_192_genre_info_262,symTable,"genre.@info.262",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_193_genre_info_263(*rel_193_genre_info_263,symTable,"genre.@info.263",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_194_genre_info_264(*rel_194_genre_info_264,symTable,"genre.@info.264",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_195_genre_info_265(*rel_195_genre_info_265,symTable,"genre.@info.265",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_196_genre_info_266(*rel_196_genre_info_266,symTable,"genre.@info.266",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_197_genre_info_267(*rel_197_genre_info_267,symTable,"genre.@info.267",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_198_genre_info_268(*rel_198_genre_info_268,symTable,"genre.@info.268",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_199_genre_info_269(*rel_199_genre_info_269,symTable,"genre.@info.269",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_200_genre_info_27(*rel_200_genre_info_27,symTable,"genre.@info.27",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_201_genre_info_270(*rel_201_genre_info_270,symTable,"genre.@info.270",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_202_genre_info_271(*rel_202_genre_info_271,symTable,"genre.@info.271",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_203_genre_info_272(*rel_203_genre_info_272,symTable,"genre.@info.272",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_204_genre_info_273(*rel_204_genre_info_273,symTable,"genre.@info.273",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_205_genre_info_274(*rel_205_genre_info_274,symTable,"genre.@info.274",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_206_genre_info_275(*rel_206_genre_info_275,symTable,"genre.@info.275",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_207_genre_info_276(*rel_207_genre_info_276,symTable,"genre.@info.276",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_208_genre_info_277(*rel_208_genre_info_277,symTable,"genre.@info.277",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_209_genre_info_278(*rel_209_genre_info_278,symTable,"genre.@info.278",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_210_genre_info_279(*rel_210_genre_info_279,symTable,"genre.@info.279",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_211_genre_info_28(*rel_211_genre_info_28,symTable,"genre.@info.28",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_212_genre_info_280(*rel_212_genre_info_280,symTable,"genre.@info.280",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_213_genre_info_281(*rel_213_genre_info_281,symTable,"genre.@info.281",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_214_genre_info_282(*rel_214_genre_info_282,symTable,"genre.@info.282",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_215_genre_info_283(*rel_215_genre_info_283,symTable,"genre.@info.283",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_216_genre_info_284(*rel_216_genre_info_284,symTable,"genre.@info.284",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_217_genre_info_285(*rel_217_genre_info_285,symTable,"genre.@info.285",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_218_genre_info_286(*rel_218_genre_info_286,symTable,"genre.@info.286",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_219_genre_info_287(*rel_219_genre_info_287,symTable,"genre.@info.287",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_220_genre_info_29(*rel_220_genre_info_29,symTable,"genre.@info.29",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_221_genre_info_3(*rel_221_genre_info_3,symTable,"genre.@info.3",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_222_genre_info_30(*rel_222_genre_info_30,symTable,"genre.@info.30",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_223_genre_info_31(*rel_223_genre_info_31,symTable,"genre.@info.31",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_224_genre_info_32(*rel_224_genre_info_32,symTable,"genre.@info.32",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_225_genre_info_33(*rel_225_genre_info_33,symTable,"genre.@info.33",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_226_genre_info_34(*rel_226_genre_info_34,symTable,"genre.@info.34",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_227_genre_info_35(*rel_227_genre_info_35,symTable,"genre.@info.35",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_228_genre_info_36(*rel_228_genre_info_36,symTable,"genre.@info.36",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_229_genre_info_37(*rel_229_genre_info_37,symTable,"genre.@info.37",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_230_genre_info_38(*rel_230_genre_info_38,symTable,"genre.@info.38",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_231_genre_info_39(*rel_231_genre_info_39,symTable,"genre.@info.39",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_232_genre_info_4(*rel_232_genre_info_4,symTable,"genre.@info.4",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_233_genre_info_40(*rel_233_genre_info_40,symTable,"genre.@info.40",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_234_genre_info_41(*rel_234_genre_info_41,symTable,"genre.@info.41",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_235_genre_info_42(*rel_235_genre_info_42,symTable,"genre.@info.42",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_236_genre_info_43(*rel_236_genre_info_43,symTable,"genre.@info.43",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_237_genre_info_44(*rel_237_genre_info_44,symTable,"genre.@info.44",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_238_genre_info_45(*rel_238_genre_info_45,symTable,"genre.@info.45",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_239_genre_info_46(*rel_239_genre_info_46,symTable,"genre.@info.46",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_240_genre_info_47(*rel_240_genre_info_47,symTable,"genre.@info.47",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_241_genre_info_48(*rel_241_genre_info_48,symTable,"genre.@info.48",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_242_genre_info_49(*rel_242_genre_info_49,symTable,"genre.@info.49",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_243_genre_info_5(*rel_243_genre_info_5,symTable,"genre.@info.5",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_244_genre_info_50(*rel_244_genre_info_50,symTable,"genre.@info.50",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_245_genre_info_51(*rel_245_genre_info_51,symTable,"genre.@info.51",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_246_genre_info_52(*rel_246_genre_info_52,symTable,"genre.@info.52",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_247_genre_info_53(*rel_247_genre_info_53,symTable,"genre.@info.53",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_248_genre_info_54(*rel_248_genre_info_54,symTable,"genre.@info.54",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_249_genre_info_55(*rel_249_genre_info_55,symTable,"genre.@info.55",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_250_genre_info_56(*rel_250_genre_info_56,symTable,"genre.@info.56",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_251_genre_info_57(*rel_251_genre_info_57,symTable,"genre.@info.57",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_252_genre_info_58(*rel_252_genre_info_58,symTable,"genre.@info.58",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_253_genre_info_59(*rel_253_genre_info_59,symTable,"genre.@info.59",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_254_genre_info_6(*rel_254_genre_info_6,symTable,"genre.@info.6",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_255_genre_info_60(*rel_255_genre_info_60,symTable,"genre.@info.60",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_256_genre_info_61(*rel_256_genre_info_61,symTable,"genre.@info.61",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_257_genre_info_62(*rel_257_genre_info_62,symTable,"genre.@info.62",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_258_genre_info_63(*rel_258_genre_info_63,symTable,"genre.@info.63",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_259_genre_info_64(*rel_259_genre_info_64,symTable,"genre.@info.64",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_260_genre_info_65(*rel_260_genre_info_65,symTable,"genre.@info.65",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_261_genre_info_66(*rel_261_genre_info_66,symTable,"genre.@info.66",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_262_genre_info_67(*rel_262_genre_info_67,symTable,"genre.@info.67",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_263_genre_info_68(*rel_263_genre_info_68,symTable,"genre.@info.68",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_264_genre_info_69(*rel_264_genre_info_69,symTable,"genre.@info.69",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_265_genre_info_7(*rel_265_genre_info_7,symTable,"genre.@info.7",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_266_genre_info_70(*rel_266_genre_info_70,symTable,"genre.@info.70",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_267_genre_info_71(*rel_267_genre_info_71,symTable,"genre.@info.71",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_268_genre_info_72(*rel_268_genre_info_72,symTable,"genre.@info.72",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_269_genre_info_73(*rel_269_genre_info_73,symTable,"genre.@info.73",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_270_genre_info_74(*rel_270_genre_info_74,symTable,"genre.@info.74",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_271_genre_info_75(*rel_271_genre_info_75,symTable,"genre.@info.75",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_272_genre_info_76(*rel_272_genre_info_76,symTable,"genre.@info.76",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_273_genre_info_77(*rel_273_genre_info_77,symTable,"genre.@info.77",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_274_genre_info_78(*rel_274_genre_info_78,symTable,"genre.@info.78",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_275_genre_info_79(*rel_275_genre_info_79,symTable,"genre.@info.79",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_276_genre_info_8(*rel_276_genre_info_8,symTable,"genre.@info.8",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_277_genre_info_80(*rel_277_genre_info_80,symTable,"genre.@info.80",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_278_genre_info_81(*rel_278_genre_info_81,symTable,"genre.@info.81",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_279_genre_info_82(*rel_279_genre_info_82,symTable,"genre.@info.82",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_280_genre_info_83(*rel_280_genre_info_83,symTable,"genre.@info.83",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_281_genre_info_84(*rel_281_genre_info_84,symTable,"genre.@info.84",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_282_genre_info_85(*rel_282_genre_info_85,symTable,"genre.@info.85",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_283_genre_info_86(*rel_283_genre_info_86,symTable,"genre.@info.86",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_284_genre_info_87(*rel_284_genre_info_87,symTable,"genre.@info.87",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_285_genre_info_88(*rel_285_genre_info_88,symTable,"genre.@info.88",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_286_genre_info_89(*rel_286_genre_info_89,symTable,"genre.@info.89",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_287_genre_info_9(*rel_287_genre_info_9,symTable,"genre.@info.9",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_288_genre_info_90(*rel_288_genre_info_90,symTable,"genre.@info.90",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_289_genre_info_91(*rel_289_genre_info_91,symTable,"genre.@info.91",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_290_genre_info_92(*rel_290_genre_info_92,symTable,"genre.@info.92",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_291_genre_info_93(*rel_291_genre_info_93,symTable,"genre.@info.93",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_292_genre_info_94(*rel_292_genre_info_94,symTable,"genre.@info.94",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_293_genre_info_95(*rel_293_genre_info_95,symTable,"genre.@info.95",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_294_genre_info_96(*rel_294_genre_info_96,symTable,"genre.@info.96",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_295_genre_info_97(*rel_295_genre_info_97,symTable,"genre.@info.97",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_296_genre_info_98(*rel_296_genre_info_98,symTable,"genre.@info.98",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_297_genre_info_99(*rel_297_genre_info_99,symTable,"genre.@info.99",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}){
addRelation("Igenre",&wrapper_rel_1_Igenre,true,false);
addRelation("Rule",&wrapper_rel_2_Rule,true,false);
addRelation("wikisourcelangProperty",&wrapper_rel_3_wikisourcelangProperty,true,false);
addRelation("writer",&wrapper_rel_4_writer,true,false);
addRelation("year",&wrapper_rel_5_year,true,false);
addRelation("yearOfRelease",&wrapper_rel_6_yearOfRelease,true,false);
addRelation("years",&wrapper_rel_7_years,true,false);
addRelation("genre",&wrapper_rel_8_genre,false,true);
addRelation("genre.@info.1",&wrapper_rel_11_genre_info_1,false,false);
addRelation("genre.@info.10",&wrapper_rel_12_genre_info_10,false,false);
addRelation("genre.@info.100",&wrapper_rel_13_genre_info_100,false,false);
addRelation("genre.@info.101",&wrapper_rel_14_genre_info_101,false,false);
addRelation("genre.@info.102",&wrapper_rel_15_genre_info_102,false,false);
addRelation("genre.@info.103",&wrapper_rel_16_genre_info_103,false,false);
addRelation("genre.@info.104",&wrapper_rel_17_genre_info_104,false,false);
addRelation("genre.@info.105",&wrapper_rel_18_genre_info_105,false,false);
addRelation("genre.@info.106",&wrapper_rel_19_genre_info_106,false,false);
addRelation("genre.@info.107",&wrapper_rel_20_genre_info_107,false,false);
addRelation("genre.@info.108",&wrapper_rel_21_genre_info_108,false,false);
addRelation("genre.@info.109",&wrapper_rel_22_genre_info_109,false,false);
addRelation("genre.@info.11",&wrapper_rel_23_genre_info_11,false,false);
addRelation("genre.@info.110",&wrapper_rel_24_genre_info_110,false,false);
addRelation("genre.@info.111",&wrapper_rel_25_genre_info_111,false,false);
addRelation("genre.@info.112",&wrapper_rel_26_genre_info_112,false,false);
addRelation("genre.@info.113",&wrapper_rel_27_genre_info_113,false,false);
addRelation("genre.@info.114",&wrapper_rel_28_genre_info_114,false,false);
addRelation("genre.@info.115",&wrapper_rel_29_genre_info_115,false,false);
addRelation("genre.@info.116",&wrapper_rel_30_genre_info_116,false,false);
addRelation("genre.@info.117",&wrapper_rel_31_genre_info_117,false,false);
addRelation("genre.@info.118",&wrapper_rel_32_genre_info_118,false,false);
addRelation("genre.@info.119",&wrapper_rel_33_genre_info_119,false,false);
addRelation("genre.@info.12",&wrapper_rel_34_genre_info_12,false,false);
addRelation("genre.@info.120",&wrapper_rel_35_genre_info_120,false,false);
addRelation("genre.@info.121",&wrapper_rel_36_genre_info_121,false,false);
addRelation("genre.@info.122",&wrapper_rel_37_genre_info_122,false,false);
addRelation("genre.@info.123",&wrapper_rel_38_genre_info_123,false,false);
addRelation("genre.@info.124",&wrapper_rel_39_genre_info_124,false,false);
addRelation("genre.@info.125",&wrapper_rel_40_genre_info_125,false,false);
addRelation("genre.@info.126",&wrapper_rel_41_genre_info_126,false,false);
addRelation("genre.@info.127",&wrapper_rel_42_genre_info_127,false,false);
addRelation("genre.@info.128",&wrapper_rel_43_genre_info_128,false,false);
addRelation("genre.@info.129",&wrapper_rel_44_genre_info_129,false,false);
addRelation("genre.@info.13",&wrapper_rel_45_genre_info_13,false,false);
addRelation("genre.@info.130",&wrapper_rel_46_genre_info_130,false,false);
addRelation("genre.@info.131",&wrapper_rel_47_genre_info_131,false,false);
addRelation("genre.@info.132",&wrapper_rel_48_genre_info_132,false,false);
addRelation("genre.@info.133",&wrapper_rel_49_genre_info_133,false,false);
addRelation("genre.@info.134",&wrapper_rel_50_genre_info_134,false,false);
addRelation("genre.@info.135",&wrapper_rel_51_genre_info_135,false,false);
addRelation("genre.@info.136",&wrapper_rel_52_genre_info_136,false,false);
addRelation("genre.@info.137",&wrapper_rel_53_genre_info_137,false,false);
addRelation("genre.@info.138",&wrapper_rel_54_genre_info_138,false,false);
addRelation("genre.@info.139",&wrapper_rel_55_genre_info_139,false,false);
addRelation("genre.@info.14",&wrapper_rel_56_genre_info_14,false,false);
addRelation("genre.@info.140",&wrapper_rel_57_genre_info_140,false,false);
addRelation("genre.@info.141",&wrapper_rel_58_genre_info_141,false,false);
addRelation("genre.@info.142",&wrapper_rel_59_genre_info_142,false,false);
addRelation("genre.@info.143",&wrapper_rel_60_genre_info_143,false,false);
addRelation("genre.@info.144",&wrapper_rel_61_genre_info_144,false,false);
addRelation("genre.@info.145",&wrapper_rel_62_genre_info_145,false,false);
addRelation("genre.@info.146",&wrapper_rel_63_genre_info_146,false,false);
addRelation("genre.@info.147",&wrapper_rel_64_genre_info_147,false,false);
addRelation("genre.@info.148",&wrapper_rel_65_genre_info_148,false,false);
addRelation("genre.@info.149",&wrapper_rel_66_genre_info_149,false,false);
addRelation("genre.@info.15",&wrapper_rel_67_genre_info_15,false,false);
addRelation("genre.@info.150",&wrapper_rel_68_genre_info_150,false,false);
addRelation("genre.@info.151",&wrapper_rel_69_genre_info_151,false,false);
addRelation("genre.@info.152",&wrapper_rel_70_genre_info_152,false,false);
addRelation("genre.@info.153",&wrapper_rel_71_genre_info_153,false,false);
addRelation("genre.@info.154",&wrapper_rel_72_genre_info_154,false,false);
addRelation("genre.@info.155",&wrapper_rel_73_genre_info_155,false,false);
addRelation("genre.@info.156",&wrapper_rel_74_genre_info_156,false,false);
addRelation("genre.@info.157",&wrapper_rel_75_genre_info_157,false,false);
addRelation("genre.@info.158",&wrapper_rel_76_genre_info_158,false,false);
addRelation("genre.@info.159",&wrapper_rel_77_genre_info_159,false,false);
addRelation("genre.@info.16",&wrapper_rel_78_genre_info_16,false,false);
addRelation("genre.@info.160",&wrapper_rel_79_genre_info_160,false,false);
addRelation("genre.@info.161",&wrapper_rel_80_genre_info_161,false,false);
addRelation("genre.@info.162",&wrapper_rel_81_genre_info_162,false,false);
addRelation("genre.@info.163",&wrapper_rel_82_genre_info_163,false,false);
addRelation("genre.@info.164",&wrapper_rel_83_genre_info_164,false,false);
addRelation("genre.@info.165",&wrapper_rel_84_genre_info_165,false,false);
addRelation("genre.@info.166",&wrapper_rel_85_genre_info_166,false,false);
addRelation("genre.@info.167",&wrapper_rel_86_genre_info_167,false,false);
addRelation("genre.@info.168",&wrapper_rel_87_genre_info_168,false,false);
addRelation("genre.@info.169",&wrapper_rel_88_genre_info_169,false,false);
addRelation("genre.@info.17",&wrapper_rel_89_genre_info_17,false,false);
addRelation("genre.@info.170",&wrapper_rel_90_genre_info_170,false,false);
addRelation("genre.@info.171",&wrapper_rel_91_genre_info_171,false,false);
addRelation("genre.@info.172",&wrapper_rel_92_genre_info_172,false,false);
addRelation("genre.@info.173",&wrapper_rel_93_genre_info_173,false,false);
addRelation("genre.@info.174",&wrapper_rel_94_genre_info_174,false,false);
addRelation("genre.@info.175",&wrapper_rel_95_genre_info_175,false,false);
addRelation("genre.@info.176",&wrapper_rel_96_genre_info_176,false,false);
addRelation("genre.@info.177",&wrapper_rel_97_genre_info_177,false,false);
addRelation("genre.@info.178",&wrapper_rel_98_genre_info_178,false,false);
addRelation("genre.@info.179",&wrapper_rel_99_genre_info_179,false,false);
addRelation("genre.@info.18",&wrapper_rel_100_genre_info_18,false,false);
addRelation("genre.@info.180",&wrapper_rel_101_genre_info_180,false,false);
addRelation("genre.@info.181",&wrapper_rel_102_genre_info_181,false,false);
addRelation("genre.@info.182",&wrapper_rel_103_genre_info_182,false,false);
addRelation("genre.@info.183",&wrapper_rel_104_genre_info_183,false,false);
addRelation("genre.@info.184",&wrapper_rel_105_genre_info_184,false,false);
addRelation("genre.@info.185",&wrapper_rel_106_genre_info_185,false,false);
addRelation("genre.@info.186",&wrapper_rel_107_genre_info_186,false,false);
addRelation("genre.@info.187",&wrapper_rel_108_genre_info_187,false,false);
addRelation("genre.@info.188",&wrapper_rel_109_genre_info_188,false,false);
addRelation("genre.@info.189",&wrapper_rel_110_genre_info_189,false,false);
addRelation("genre.@info.19",&wrapper_rel_111_genre_info_19,false,false);
addRelation("genre.@info.190",&wrapper_rel_112_genre_info_190,false,false);
addRelation("genre.@info.191",&wrapper_rel_113_genre_info_191,false,false);
addRelation("genre.@info.192",&wrapper_rel_114_genre_info_192,false,false);
addRelation("genre.@info.193",&wrapper_rel_115_genre_info_193,false,false);
addRelation("genre.@info.194",&wrapper_rel_116_genre_info_194,false,false);
addRelation("genre.@info.195",&wrapper_rel_117_genre_info_195,false,false);
addRelation("genre.@info.196",&wrapper_rel_118_genre_info_196,false,false);
addRelation("genre.@info.197",&wrapper_rel_119_genre_info_197,false,false);
addRelation("genre.@info.198",&wrapper_rel_120_genre_info_198,false,false);
addRelation("genre.@info.199",&wrapper_rel_121_genre_info_199,false,false);
addRelation("genre.@info.2",&wrapper_rel_122_genre_info_2,false,false);
addRelation("genre.@info.20",&wrapper_rel_123_genre_info_20,false,false);
addRelation("genre.@info.200",&wrapper_rel_124_genre_info_200,false,false);
addRelation("genre.@info.201",&wrapper_rel_125_genre_info_201,false,false);
addRelation("genre.@info.202",&wrapper_rel_126_genre_info_202,false,false);
addRelation("genre.@info.203",&wrapper_rel_127_genre_info_203,false,false);
addRelation("genre.@info.204",&wrapper_rel_128_genre_info_204,false,false);
addRelation("genre.@info.205",&wrapper_rel_129_genre_info_205,false,false);
addRelation("genre.@info.206",&wrapper_rel_130_genre_info_206,false,false);
addRelation("genre.@info.207",&wrapper_rel_131_genre_info_207,false,false);
addRelation("genre.@info.208",&wrapper_rel_132_genre_info_208,false,false);
addRelation("genre.@info.209",&wrapper_rel_133_genre_info_209,false,false);
addRelation("genre.@info.21",&wrapper_rel_134_genre_info_21,false,false);
addRelation("genre.@info.210",&wrapper_rel_135_genre_info_210,false,false);
addRelation("genre.@info.211",&wrapper_rel_136_genre_info_211,false,false);
addRelation("genre.@info.212",&wrapper_rel_137_genre_info_212,false,false);
addRelation("genre.@info.213",&wrapper_rel_138_genre_info_213,false,false);
addRelation("genre.@info.214",&wrapper_rel_139_genre_info_214,false,false);
addRelation("genre.@info.215",&wrapper_rel_140_genre_info_215,false,false);
addRelation("genre.@info.216",&wrapper_rel_141_genre_info_216,false,false);
addRelation("genre.@info.217",&wrapper_rel_142_genre_info_217,false,false);
addRelation("genre.@info.218",&wrapper_rel_143_genre_info_218,false,false);
addRelation("genre.@info.219",&wrapper_rel_144_genre_info_219,false,false);
addRelation("genre.@info.22",&wrapper_rel_145_genre_info_22,false,false);
addRelation("genre.@info.220",&wrapper_rel_146_genre_info_220,false,false);
addRelation("genre.@info.221",&wrapper_rel_147_genre_info_221,false,false);
addRelation("genre.@info.222",&wrapper_rel_148_genre_info_222,false,false);
addRelation("genre.@info.223",&wrapper_rel_149_genre_info_223,false,false);
addRelation("genre.@info.224",&wrapper_rel_150_genre_info_224,false,false);
addRelation("genre.@info.225",&wrapper_rel_151_genre_info_225,false,false);
addRelation("genre.@info.226",&wrapper_rel_152_genre_info_226,false,false);
addRelation("genre.@info.227",&wrapper_rel_153_genre_info_227,false,false);
addRelation("genre.@info.228",&wrapper_rel_154_genre_info_228,false,false);
addRelation("genre.@info.229",&wrapper_rel_155_genre_info_229,false,false);
addRelation("genre.@info.23",&wrapper_rel_156_genre_info_23,false,false);
addRelation("genre.@info.230",&wrapper_rel_157_genre_info_230,false,false);
addRelation("genre.@info.231",&wrapper_rel_158_genre_info_231,false,false);
addRelation("genre.@info.232",&wrapper_rel_159_genre_info_232,false,false);
addRelation("genre.@info.233",&wrapper_rel_160_genre_info_233,false,false);
addRelation("genre.@info.234",&wrapper_rel_161_genre_info_234,false,false);
addRelation("genre.@info.235",&wrapper_rel_162_genre_info_235,false,false);
addRelation("genre.@info.236",&wrapper_rel_163_genre_info_236,false,false);
addRelation("genre.@info.237",&wrapper_rel_164_genre_info_237,false,false);
addRelation("genre.@info.238",&wrapper_rel_165_genre_info_238,false,false);
addRelation("genre.@info.239",&wrapper_rel_166_genre_info_239,false,false);
addRelation("genre.@info.24",&wrapper_rel_167_genre_info_24,false,false);
addRelation("genre.@info.240",&wrapper_rel_168_genre_info_240,false,false);
addRelation("genre.@info.241",&wrapper_rel_169_genre_info_241,false,false);
addRelation("genre.@info.242",&wrapper_rel_170_genre_info_242,false,false);
addRelation("genre.@info.243",&wrapper_rel_171_genre_info_243,false,false);
addRelation("genre.@info.244",&wrapper_rel_172_genre_info_244,false,false);
addRelation("genre.@info.245",&wrapper_rel_173_genre_info_245,false,false);
addRelation("genre.@info.246",&wrapper_rel_174_genre_info_246,false,false);
addRelation("genre.@info.247",&wrapper_rel_175_genre_info_247,false,false);
addRelation("genre.@info.248",&wrapper_rel_176_genre_info_248,false,false);
addRelation("genre.@info.249",&wrapper_rel_177_genre_info_249,false,false);
addRelation("genre.@info.25",&wrapper_rel_178_genre_info_25,false,false);
addRelation("genre.@info.250",&wrapper_rel_179_genre_info_250,false,false);
addRelation("genre.@info.251",&wrapper_rel_180_genre_info_251,false,false);
addRelation("genre.@info.252",&wrapper_rel_181_genre_info_252,false,false);
addRelation("genre.@info.253",&wrapper_rel_182_genre_info_253,false,false);
addRelation("genre.@info.254",&wrapper_rel_183_genre_info_254,false,false);
addRelation("genre.@info.255",&wrapper_rel_184_genre_info_255,false,false);
addRelation("genre.@info.256",&wrapper_rel_185_genre_info_256,false,false);
addRelation("genre.@info.257",&wrapper_rel_186_genre_info_257,false,false);
addRelation("genre.@info.258",&wrapper_rel_187_genre_info_258,false,false);
addRelation("genre.@info.259",&wrapper_rel_188_genre_info_259,false,false);
addRelation("genre.@info.26",&wrapper_rel_189_genre_info_26,false,false);
addRelation("genre.@info.260",&wrapper_rel_190_genre_info_260,false,false);
addRelation("genre.@info.261",&wrapper_rel_191_genre_info_261,false,false);
addRelation("genre.@info.262",&wrapper_rel_192_genre_info_262,false,false);
addRelation("genre.@info.263",&wrapper_rel_193_genre_info_263,false,false);
addRelation("genre.@info.264",&wrapper_rel_194_genre_info_264,false,false);
addRelation("genre.@info.265",&wrapper_rel_195_genre_info_265,false,false);
addRelation("genre.@info.266",&wrapper_rel_196_genre_info_266,false,false);
addRelation("genre.@info.267",&wrapper_rel_197_genre_info_267,false,false);
addRelation("genre.@info.268",&wrapper_rel_198_genre_info_268,false,false);
addRelation("genre.@info.269",&wrapper_rel_199_genre_info_269,false,false);
addRelation("genre.@info.27",&wrapper_rel_200_genre_info_27,false,false);
addRelation("genre.@info.270",&wrapper_rel_201_genre_info_270,false,false);
addRelation("genre.@info.271",&wrapper_rel_202_genre_info_271,false,false);
addRelation("genre.@info.272",&wrapper_rel_203_genre_info_272,false,false);
addRelation("genre.@info.273",&wrapper_rel_204_genre_info_273,false,false);
addRelation("genre.@info.274",&wrapper_rel_205_genre_info_274,false,false);
addRelation("genre.@info.275",&wrapper_rel_206_genre_info_275,false,false);
addRelation("genre.@info.276",&wrapper_rel_207_genre_info_276,false,false);
addRelation("genre.@info.277",&wrapper_rel_208_genre_info_277,false,false);
addRelation("genre.@info.278",&wrapper_rel_209_genre_info_278,false,false);
addRelation("genre.@info.279",&wrapper_rel_210_genre_info_279,false,false);
addRelation("genre.@info.28",&wrapper_rel_211_genre_info_28,false,false);
addRelation("genre.@info.280",&wrapper_rel_212_genre_info_280,false,false);
addRelation("genre.@info.281",&wrapper_rel_213_genre_info_281,false,false);
addRelation("genre.@info.282",&wrapper_rel_214_genre_info_282,false,false);
addRelation("genre.@info.283",&wrapper_rel_215_genre_info_283,false,false);
addRelation("genre.@info.284",&wrapper_rel_216_genre_info_284,false,false);
addRelation("genre.@info.285",&wrapper_rel_217_genre_info_285,false,false);
addRelation("genre.@info.286",&wrapper_rel_218_genre_info_286,false,false);
addRelation("genre.@info.287",&wrapper_rel_219_genre_info_287,false,false);
addRelation("genre.@info.29",&wrapper_rel_220_genre_info_29,false,false);
addRelation("genre.@info.3",&wrapper_rel_221_genre_info_3,false,false);
addRelation("genre.@info.30",&wrapper_rel_222_genre_info_30,false,false);
addRelation("genre.@info.31",&wrapper_rel_223_genre_info_31,false,false);
addRelation("genre.@info.32",&wrapper_rel_224_genre_info_32,false,false);
addRelation("genre.@info.33",&wrapper_rel_225_genre_info_33,false,false);
addRelation("genre.@info.34",&wrapper_rel_226_genre_info_34,false,false);
addRelation("genre.@info.35",&wrapper_rel_227_genre_info_35,false,false);
addRelation("genre.@info.36",&wrapper_rel_228_genre_info_36,false,false);
addRelation("genre.@info.37",&wrapper_rel_229_genre_info_37,false,false);
addRelation("genre.@info.38",&wrapper_rel_230_genre_info_38,false,false);
addRelation("genre.@info.39",&wrapper_rel_231_genre_info_39,false,false);
addRelation("genre.@info.4",&wrapper_rel_232_genre_info_4,false,false);
addRelation("genre.@info.40",&wrapper_rel_233_genre_info_40,false,false);
addRelation("genre.@info.41",&wrapper_rel_234_genre_info_41,false,false);
addRelation("genre.@info.42",&wrapper_rel_235_genre_info_42,false,false);
addRelation("genre.@info.43",&wrapper_rel_236_genre_info_43,false,false);
addRelation("genre.@info.44",&wrapper_rel_237_genre_info_44,false,false);
addRelation("genre.@info.45",&wrapper_rel_238_genre_info_45,false,false);
addRelation("genre.@info.46",&wrapper_rel_239_genre_info_46,false,false);
addRelation("genre.@info.47",&wrapper_rel_240_genre_info_47,false,false);
addRelation("genre.@info.48",&wrapper_rel_241_genre_info_48,false,false);
addRelation("genre.@info.49",&wrapper_rel_242_genre_info_49,false,false);
addRelation("genre.@info.5",&wrapper_rel_243_genre_info_5,false,false);
addRelation("genre.@info.50",&wrapper_rel_244_genre_info_50,false,false);
addRelation("genre.@info.51",&wrapper_rel_245_genre_info_51,false,false);
addRelation("genre.@info.52",&wrapper_rel_246_genre_info_52,false,false);
addRelation("genre.@info.53",&wrapper_rel_247_genre_info_53,false,false);
addRelation("genre.@info.54",&wrapper_rel_248_genre_info_54,false,false);
addRelation("genre.@info.55",&wrapper_rel_249_genre_info_55,false,false);
addRelation("genre.@info.56",&wrapper_rel_250_genre_info_56,false,false);
addRelation("genre.@info.57",&wrapper_rel_251_genre_info_57,false,false);
addRelation("genre.@info.58",&wrapper_rel_252_genre_info_58,false,false);
addRelation("genre.@info.59",&wrapper_rel_253_genre_info_59,false,false);
addRelation("genre.@info.6",&wrapper_rel_254_genre_info_6,false,false);
addRelation("genre.@info.60",&wrapper_rel_255_genre_info_60,false,false);
addRelation("genre.@info.61",&wrapper_rel_256_genre_info_61,false,false);
addRelation("genre.@info.62",&wrapper_rel_257_genre_info_62,false,false);
addRelation("genre.@info.63",&wrapper_rel_258_genre_info_63,false,false);
addRelation("genre.@info.64",&wrapper_rel_259_genre_info_64,false,false);
addRelation("genre.@info.65",&wrapper_rel_260_genre_info_65,false,false);
addRelation("genre.@info.66",&wrapper_rel_261_genre_info_66,false,false);
addRelation("genre.@info.67",&wrapper_rel_262_genre_info_67,false,false);
addRelation("genre.@info.68",&wrapper_rel_263_genre_info_68,false,false);
addRelation("genre.@info.69",&wrapper_rel_264_genre_info_69,false,false);
addRelation("genre.@info.7",&wrapper_rel_265_genre_info_7,false,false);
addRelation("genre.@info.70",&wrapper_rel_266_genre_info_70,false,false);
addRelation("genre.@info.71",&wrapper_rel_267_genre_info_71,false,false);
addRelation("genre.@info.72",&wrapper_rel_268_genre_info_72,false,false);
addRelation("genre.@info.73",&wrapper_rel_269_genre_info_73,false,false);
addRelation("genre.@info.74",&wrapper_rel_270_genre_info_74,false,false);
addRelation("genre.@info.75",&wrapper_rel_271_genre_info_75,false,false);
addRelation("genre.@info.76",&wrapper_rel_272_genre_info_76,false,false);
addRelation("genre.@info.77",&wrapper_rel_273_genre_info_77,false,false);
addRelation("genre.@info.78",&wrapper_rel_274_genre_info_78,false,false);
addRelation("genre.@info.79",&wrapper_rel_275_genre_info_79,false,false);
addRelation("genre.@info.8",&wrapper_rel_276_genre_info_8,false,false);
addRelation("genre.@info.80",&wrapper_rel_277_genre_info_80,false,false);
addRelation("genre.@info.81",&wrapper_rel_278_genre_info_81,false,false);
addRelation("genre.@info.82",&wrapper_rel_279_genre_info_82,false,false);
addRelation("genre.@info.83",&wrapper_rel_280_genre_info_83,false,false);
addRelation("genre.@info.84",&wrapper_rel_281_genre_info_84,false,false);
addRelation("genre.@info.85",&wrapper_rel_282_genre_info_85,false,false);
addRelation("genre.@info.86",&wrapper_rel_283_genre_info_86,false,false);
addRelation("genre.@info.87",&wrapper_rel_284_genre_info_87,false,false);
addRelation("genre.@info.88",&wrapper_rel_285_genre_info_88,false,false);
addRelation("genre.@info.89",&wrapper_rel_286_genre_info_89,false,false);
addRelation("genre.@info.9",&wrapper_rel_287_genre_info_9,false,false);
addRelation("genre.@info.90",&wrapper_rel_288_genre_info_90,false,false);
addRelation("genre.@info.91",&wrapper_rel_289_genre_info_91,false,false);
addRelation("genre.@info.92",&wrapper_rel_290_genre_info_92,false,false);
addRelation("genre.@info.93",&wrapper_rel_291_genre_info_93,false,false);
addRelation("genre.@info.94",&wrapper_rel_292_genre_info_94,false,false);
addRelation("genre.@info.95",&wrapper_rel_293_genre_info_95,false,false);
addRelation("genre.@info.96",&wrapper_rel_294_genre_info_96,false,false);
addRelation("genre.@info.97",&wrapper_rel_295_genre_info_97,false,false);
addRelation("genre.@info.98",&wrapper_rel_296_genre_info_98,false,false);
addRelation("genre.@info.99",&wrapper_rel_297_genre_info_99,false,false);
}
~Sf_test() {
}
private:
void runFunction(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1, bool performIO = false) {
SignalHandler::instance()->set();
std::atomic<size_t> iter(0);

#if defined(_OPENMP)
if (getNumThreads() > 0) {omp_set_num_threads(getNumThreads());}
#endif

// -- query evaluation --
/* BEGIN STRATUM 0 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Igenre.facts"},{"name","Igenre"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Igenre);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 0 */
/* BEGIN STRATUM 1 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 1 */
/* BEGIN STRATUM 2 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./wikisourcelangProperty.facts"},{"name","wikisourcelangProperty"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 2 */
/* BEGIN STRATUM 3 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./writer.facts"},{"name","writer"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_writer);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 3 */
/* BEGIN STRATUM 4 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./year.facts"},{"name","year"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_year);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 4 */
/* BEGIN STRATUM 5 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./yearOfRelease.facts"},{"name","yearOfRelease"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_6_yearOfRelease);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 5 */
/* BEGIN STRATUM 6 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./years.facts"},{"name","years"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_7_years);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 6 */
/* BEGIN STRATUM 7 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,1,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(0,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [29:1-29:41])_");
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,2,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [30:1-30:41])_");
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,3,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [31:1-31:49])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,4,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [32:1-32:49])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,5,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(4,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [33:1-33:40])_");
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,6,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(5,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [34:1-34:40])_");
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,7,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [35:1-35:42])_");
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,8,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [36:1-36:42])_");
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,9,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [37:1-37:58])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,10,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [38:1-38:58])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,11,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(11,_,@level_num_0),
   Igenre(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [39:1-39:43])_");
if(!(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,13,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(14,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [41:1-41:57])_");
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(14),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,14,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   years(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [42:1-42:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(15),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,15,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(16,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [43:1-43:57])_");
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(16),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,16,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(17,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   years(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [44:1-44:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(17),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,17,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(18,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [45:1-45:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(18),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,18,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [46:1-46:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(19),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,19,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(20,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [47:1-47:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(20),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [48:1-48:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(21),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,21,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [49:1-49:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(22),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,22,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [50:1-50:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,23,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(24,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [51:1-51:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(24),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,24,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [52:1-52:57])_");
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(25),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,25,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(26,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [53:1-53:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(26),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,26,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(27,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [54:1-54:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(27),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,27,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [55:1-55:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(28),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,28,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(29,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [56:1-56:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(29),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,29,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [57:1-57:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(30),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,30,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(31,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [58:1-58:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(31),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [59:1-59:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(32),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,32,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [60:1-60:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(33),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,33,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [61:1-61:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(34),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,34,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [62:1-62:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(35),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [63:1-63:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,36,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [64:1-64:65])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(37),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,37,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [65:1-65:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(38),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,38,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [66:1-66:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(39),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,39,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [67:1-67:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(40),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,40,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [68:1-68:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(41),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,41,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [69:1-69:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,42,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [70:1-70:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(43),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,43,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(44,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [71:1-71:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(44),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,44,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(45,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [72:1-72:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(45),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,45,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(46,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [73:1-73:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(46),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,46,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [74:1-74:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(47),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,47,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(48,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [75:1-75:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(48),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,48,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(49,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [76:1-76:56])_");
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(49),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,49,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [77:1-77:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(50),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,50,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [78:1-78:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(51),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,51,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(52,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [79:1-79:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(52),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(51)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,52,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(53,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [80:1-80:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(53),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(52)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,53,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [81:1-81:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(54),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(53)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,54,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(55,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [82:1-82:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(55),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(54)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,55,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [83:1-83:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(56),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(55)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,56,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [84:1-84:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(57),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,57,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [85:1-85:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(58),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(57)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,58,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [86:1-86:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(59),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,59,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(60,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [87:1-87:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(60),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,60,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [88:1-88:58])_");
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(61),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,61,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [89:1-89:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(62),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(61)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,62,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [90:1-90:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(63),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,63,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [91:1-91:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(64),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(63)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,64,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [92:1-92:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(65),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(64)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,65,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(66,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [93:1-93:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(65)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,66,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [94:1-94:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(67),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(66)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,67,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [95:1-95:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(68),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(67)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,68,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [96:1-96:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(69),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,69,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [97:1-97:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(70),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(69)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(71,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [98:1-98:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(71),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,71,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [99:1-99:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(72),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(71)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,72,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [100:1-100:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(73),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(72)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,73,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [101:1-101:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(75),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(73)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,74,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(76,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [102:1-102:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(76),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(74)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,75,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [103:1-103:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(79),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(75)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,76,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(80,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [104:1-104:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(80),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,77,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(81,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [105:1-105:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(81),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,78,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [106:1-106:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(82),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,79,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(83,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [107:1-107:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(83),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(79)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,80,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(84,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [108:1-108:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(84),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(80)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,89,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(98,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [117:1-117:73])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(98),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,90,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(99,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [118:1-118:73])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(90)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,91,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(100,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [119:1-119:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(100),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,92,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(101,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [120:1-120:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(101),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,93,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(102,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [121:1-121:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(102),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(93)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,94,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(103,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [122:1-122:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(103),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(94)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,95,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(104,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [123:1-123:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(104),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(95)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,96,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(105,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [124:1-124:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(96)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,97,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(106,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [125:1-125:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(106),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(97)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,98,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(107,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [126:1-126:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,99,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(108,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [127:1-127:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(108),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(109,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [128:1-128:74])_");
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(109),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,101,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(110,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [129:1-129:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(110),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(101)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,102,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(111,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [130:1-130:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(111),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(102)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,103,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(112,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [131:1-131:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(112),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,104,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(113,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [132:1-132:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(113),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(104)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,105,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(114,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [133:1-133:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(114),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(105)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,106,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(115,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [134:1-134:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(115),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(106)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,107,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(116,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [135:1-135:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(116),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,108,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(117,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [136:1-136:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,109,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(118,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [137:1-137:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(109)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,110,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(119,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [138:1-138:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(119),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,111,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(120,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [139:1-139:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(120),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(111)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,112,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(121,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [140:1-140:65])_");
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(121),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(112)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,113,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(122,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [141:1-141:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(122),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(113)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,114,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(123,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [142:1-142:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(123),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(114)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,115,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(124,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [143:1-143:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(124),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(115)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,116,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(125,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [144:1-144:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(125),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(116)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,117,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(126,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [145:1-145:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(126),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,118,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(127,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [146:1-146:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(127),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,119,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(128,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [147:1-147:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(128),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(119)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,120,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(129,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [148:1-148:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(129),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(120)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,121,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(130,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [149:1-149:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(121)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,122,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(131,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [150:1-150:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(131),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,123,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(132,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [151:1-151:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(132),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(123)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,124,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(133,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [152:1-152:67])_");
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(133),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(124)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,125,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(134,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [153:1-153:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(134),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(125)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,126,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(135,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [154:1-154:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(135),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(126)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,127,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(136,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [155:1-155:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(136),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(127)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,128,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(137,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [156:1-156:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(137),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(128)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,129,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(138,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [157:1-157:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(138),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,130,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(139,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [158:1-158:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(139),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,131,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(140,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [159:1-159:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(140),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(131)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,132,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(141,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [160:1-160:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(141),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(132)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,133,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(142,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [161:1-161:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(142),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(133)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,134,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(143,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [162:1-162:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(143),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(134)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,135,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(144,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [163:1-163:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(144),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(135)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(145,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [164:1-164:83])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(145),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,137,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(147,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [165:1-165:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(147),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,138,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(148,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [166:1-166:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,139,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(151,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [167:1-167:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(151),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(139)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,140,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(152,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [168:1-168:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(152),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(140)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,141,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(153,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [169:1-169:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(153),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,142,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(154,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [170:1-170:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(154),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(142)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,143,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(155,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [171:1-171:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(155),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(143)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,144,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(156,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [172:1-172:67])_");
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(156),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,153,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(170,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [181:1-181:56])_");
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(153)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,154,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(171,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [182:1-182:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(171),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(154)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,155,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(172,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [183:1-183:56])_");
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(172),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(155)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,156,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(173,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [184:1-184:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(173),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(156)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,157,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(174,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [185:1-185:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(174),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(157)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,158,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(175,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [186:1-186:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(175),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(158)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,159,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(176,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [187:1-187:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(176),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(159)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,160,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(177,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [188:1-188:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(177),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(160)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,161,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(178,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [189:1-189:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(178),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(161)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,162,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(179,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [190:1-190:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(179),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(162)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,163,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(180,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [191:1-191:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(180),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(163)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,164,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(181,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [192:1-192:56])_");
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(181),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(164)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,165,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(182,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [193:1-193:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(182),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(165)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,166,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(183,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [194:1-194:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(183),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(166)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,167,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(184,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [195:1-195:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(184),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(167)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,168,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(185,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [196:1-196:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(185),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(168)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,169,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(186,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [197:1-197:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(186),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(169)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,170,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(187,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [198:1-198:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(187),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(170)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,171,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(188,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [199:1-199:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(188),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(171)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,172,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(189,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [200:1-200:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(189),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(172)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,173,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(190,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [201:1-201:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(190),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(173)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,174,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(191,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [202:1-202:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(191),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(174)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,175,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(192,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [203:1-203:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(192),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(175)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,176,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(193,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [204:1-204:58])_");
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(193),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(176)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,177,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(194,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [205:1-205:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(194),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(177)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,178,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(195,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [206:1-206:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(195),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(178)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,179,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(196,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [207:1-207:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(196),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(179)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,180,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(197,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [208:1-208:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(197),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(180)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,181,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(198,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [209:1-209:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(198),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(181)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,182,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(199,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [210:1-210:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(199),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(182)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,183,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(200,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [211:1-211:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(200),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(183)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,184,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(201,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [212:1-212:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(201),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(184)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,185,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(202,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [213:1-213:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(202),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(185)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,186,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(203,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [214:1-214:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(203),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(186)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,187,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(204,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [215:1-215:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(204),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(187)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,188,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(205,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [216:1-216:74])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(205),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(188)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,189,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(207,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [217:1-217:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(207),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(189)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,190,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(208,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [218:1-218:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(208),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(190)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,191,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(211,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [219:1-219:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(211),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(191)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,192,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(212,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [220:1-220:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(212),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(192)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,193,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(213,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [221:1-221:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(213),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(193)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,194,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(214,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [222:1-222:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(214),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(194)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,195,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(215,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [223:1-223:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(215),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(195)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,196,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(216,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [224:1-224:58])_");
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(216),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(196)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,205,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(230,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [233:1-233:60])_");
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(205)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,206,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(231,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [234:1-234:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(231),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(206)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,207,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(232,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [235:1-235:60])_");
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(232),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(207)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,208,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(233,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [236:1-236:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(233),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(208)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,209,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(234,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [237:1-237:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(234),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(209)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,210,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(235,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [238:1-238:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(235),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(210)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,211,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(236,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [239:1-239:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(236),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(211)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,212,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(237,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [240:1-240:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(237),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(212)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,213,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(238,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [241:1-241:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(238),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(213)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,214,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(239,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [242:1-242:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(239),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(214)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,215,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(240,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [243:1-243:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(240),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(215)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,216,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(241,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [244:1-244:60])_");
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(241),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(216)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,217,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(242,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [245:1-245:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(242),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(217)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,218,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(243,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [246:1-246:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(243),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(218)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,219,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(244,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [247:1-247:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(244),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(219)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,220,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(245,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [248:1-248:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(245),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(220)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,221,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(246,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [249:1-249:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(246),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(221)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,222,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(247,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [250:1-250:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(222)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,223,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(248,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [251:1-251:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(248),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(223)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,224,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(249,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [252:1-252:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(249),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(224)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,225,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(250,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [253:1-253:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(250),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(225)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,226,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(251,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [254:1-254:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(251),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(226)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,227,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(252,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [255:1-255:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(252),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(227)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,228,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(253,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [256:1-256:76])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(253),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(228)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,229,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(255,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [257:1-257:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(255),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(229)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,230,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(256,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [258:1-258:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(256),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(230)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,231,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(259,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [259:1-259:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(259),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(231)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,232,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(260,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [260:1-260:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(260),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(232)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,233,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(261,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [261:1-261:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(261),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(233)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,234,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(262,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [262:1-262:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(262),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(234)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,235,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(263,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [263:1-263:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(263),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(235)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,236,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(264,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [264:1-264:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(264),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(236)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,245,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(278,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [273:1-273:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(278),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(245)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,246,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(279,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [274:1-274:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(279),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(246)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,247,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(280,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [275:1-275:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(280),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(247)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,248,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(281,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [276:1-276:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(281),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(248)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,249,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(282,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [277:1-277:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(282),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(249)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,250,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(283,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [278:1-278:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(283),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(250)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,251,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(284,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [279:1-279:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(284),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(251)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,252,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(285,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [280:1-280:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(285),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(252)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,253,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(286,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [281:1-281:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(286),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(253)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,254,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(287,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [282:1-282:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(287),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(254)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,255,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(288,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [283:1-283:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(288),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(255)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,256,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(289,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [284:1-284:92])_");
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(289),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(256)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,257,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(291,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [285:1-285:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(291),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(257)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,258,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(292,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   Igenre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [286:1-286:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(292),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(258)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,259,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(295,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [287:1-287:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(295),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(259)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,260,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(296,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [288:1-288:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(260)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,261,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(297,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [289:1-289:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(297),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(261)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,262,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(298,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [290:1-290:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(298),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(262)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,263,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(299,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [291:1-291:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(263)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,264,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(300,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [292:1-292:76])_");
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(300),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(264)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,273,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(316,_,@level_num_0),
   Igenre(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [301:1-301:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(316),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(273)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,274,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(319,_,@level_num_0),
   Igenre(v1,v2,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [302:1-302:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(319),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(274)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,275,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(320,_,@level_num_0),
   Igenre(v2,v0,_,@level_num_1),
   Igenre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [303:1-303:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(320),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(275)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,276,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(321,_,@level_num_0),
   Igenre(v2,v0,_,@level_num_1),
   Igenre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [304:1-304:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(321),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(276)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,277,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(324,_,@level_num_0),
   Igenre(v2,v1,_,@level_num_1),
   Igenre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [305:1-305:60])_");
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(324),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(277)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_genre->insert(tuple,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
rel_9_delta_genre->insertAll(*rel_8_genre);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,12,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(13,_,@level_num_0),
   genre(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [40:1-40:42])_");
if(!(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(13),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,81,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(87,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [109:1-109:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(87),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(81)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,82,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [110:1-110:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(88),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(82)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,83,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(91,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [111:1-111:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(91),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,84,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(92,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [112:1-112:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(92),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(84)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,85,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(93,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [113:1-113:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(93),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(94,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [114:1-114:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(94),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,87,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(95,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [115:1-115:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(95),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(87)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,88,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(96,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [116:1-116:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(96),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_7_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(88)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,145,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(159,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [173:1-173:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(159),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(145)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,146,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(160,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [174:1-174:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(160),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,147,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(163,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [175:1-175:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(163),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(147)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,148,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(164,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [176:1-176:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(164),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(148)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,149,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(165,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [177:1-177:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(165),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(149)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,150,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(166,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [178:1-178:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(166),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(150)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,151,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(167,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [179:1-179:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(151)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,152,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(168,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [180:1-180:66])_");
if(!(rel_9_delta_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(168),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_6_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(152)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,197,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(219,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [225:1-225:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(197)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,198,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(220,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [226:1-226:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(220),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(198)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,199,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(223,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [227:1-227:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(223),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(199)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,200,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(224,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [228:1-228:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(224),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(200)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,201,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(225,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [229:1-229:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(225),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(201)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,202,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(226,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [230:1-230:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(226),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(202)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,203,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(227,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [231:1-231:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(227),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(203)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,204,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(228,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [232:1-232:57])_");
if(!(rel_9_delta_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(228),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_5_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(204)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,237,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(267,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [265:1-265:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(267),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(237)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,238,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(268,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [266:1-266:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(238)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,239,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(271,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [267:1-267:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(271),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(239)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,240,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(272,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [268:1-268:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(272),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(240)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,241,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(273,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [269:1-269:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(273),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(241)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,242,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(274,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [270:1-270:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(274),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(242)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,243,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(275,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [271:1-271:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(275),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(243)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,244,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(276,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [272:1-272:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(276),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_4_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(244)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,265,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(303,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [293:1-293:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(303),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(265)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,266,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(304,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [294:1-294:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(304),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(266)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,267,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(307,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [295:1-295:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(267)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,268,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(308,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [296:1-296:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(308),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(268)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,269,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(309,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [297:1-297:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(309),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(269)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,270,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(310,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [298:1-298:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(310),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(270)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,271,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(311,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [299:1-299:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(311),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(271)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,272,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(312,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [300:1-300:75])_");
if(!(rel_9_delta_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(312),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_3_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(272)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,278,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(328,_,@level_num_0),
   Igenre(v1,v0,_,@level_num_1),
   genre(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [306:1-306:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(328),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_9_delta_genre->equalRange_3(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(278)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,279,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(331,_,@level_num_0),
   Igenre(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [307:1-307:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(331),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(279)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,280,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(332,_,@level_num_0),
   Igenre(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [308:1-308:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(332),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(280)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,281,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(333,_,@level_num_0),
   Igenre(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [309:1-309:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(333),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(281)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,282,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(336,_,@level_num_0),
   Igenre(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [310:1-310:59])_");
if(!(rel_9_delta_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(336),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_1_Igenre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(282)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,283,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(340,_,@level_num_0),
   genre(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [311:1-311:58])_");
if(!(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(340),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(283)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,284,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(343,_,@level_num_0),
   genre(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [312:1-312:58])_");
if(!(rel_8_genre->empty()) && !(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(343),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_genre->equalRange_1(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_9_delta_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(284)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,284,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(343,_,@level_num_0),
   genre(v1,v2,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [312:1-312:58])_");
if(!(rel_9_delta_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(343),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_8_genre) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(284)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,285,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(344,_,@level_num_0),
   genre(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [313:1-313:58])_");
if(!(rel_8_genre->empty()) && !(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(344),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_genre->equalRange_2(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_9_delta_genre->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(285)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,285,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(344,_,@level_num_0),
   genre(v2,v0,_,@level_num_1),
   genre(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [313:1-313:58])_");
if(!(rel_9_delta_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(344),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_8_genre) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_9_delta_genre->equalRange_2(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(285)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,286,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(345,_,@level_num_0),
   genre(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [314:1-314:58])_");
if(!(rel_8_genre->empty()) && !(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(345),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_genre->equalRange_1(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_9_delta_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(286)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,286,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(345,_,@level_num_0),
   genre(v2,v0,_,@level_num_1),
   genre(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [314:1-314:58])_");
if(!(rel_9_delta_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(345),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_8_genre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(286)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,287,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(348,_,@level_num_0),
   genre(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [315:1-315:58])_");
if(!(rel_8_genre->empty()) && !(rel_9_delta_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(348),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_9_delta_genre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_genre->equalRange_1(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_9_delta_genre->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(287)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
SignalHandler::instance()->setMsg(R"_(genre(v0,v1,287,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(348,_,@level_num_0),
   genre(v2,v1,_,@level_num_1),
   genre(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [315:1-315:58])_");
if(!(rel_9_delta_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(348),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
CREATE_OP_CONTEXT(rel_9_delta_genre_op_ctxt,rel_9_delta_genre->createContext());
CREATE_OP_CONTEXT(rel_10_new_genre_op_ctxt,rel_10_new_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
for(const auto& env1 : *rel_8_genre) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_9_delta_genre->equalRange_1(key,READ_OP_CONTEXT(rel_9_delta_genre_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(287)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_new_genre->insert(tuple,READ_OP_CONTEXT(rel_10_new_genre_op_ctxt));
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
if(rel_10_new_genre->empty()) break;
rel_8_genre->insertAll(*rel_10_new_genre);
std::swap(rel_9_delta_genre, rel_10_new_genre);
rel_10_new_genre->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_9_delta_genre->purge();
if (!isHintsProfilingEnabled()) rel_10_new_genre->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./genre.csv"},{"name","genre"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_8_genre);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 7 */
/* BEGIN STRATUM 8 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.1(1,"v0,v1","Rule","years,v0,v1","genre(v0,v1) :- 
   Rule(0),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_11_genre_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(3));
}();
/* END STRATUM 8 */
/* BEGIN STRATUM 9 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.10(10,"v0,v1","Rule","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(9),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_12_genre_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(21));
}();
/* END STRATUM 9 */
/* BEGIN STRATUM 10 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.100(100,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v0,v2","genre(v0,v1) :- 
   Rule(109),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_13_genre_info_100->insert(RamDomain(100),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(46),RamDomain(139));
}();
/* END STRATUM 10 */
/* BEGIN STRATUM 11 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.101(101,"v0,v1","Rule","yearOfRelease,v0,v1","year,v0,v1","genre(v0,v1) :- 
   Rule(110),
   yearOfRelease(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_14_genre_info_101->insert(RamDomain(101),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(10),RamDomain(140));
}();
/* END STRATUM 11 */
/* BEGIN STRATUM 12 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.102(102,"v0,v1","Rule","yearOfRelease,v0,v1","year,v1,v0","genre(v0,v1) :- 
   Rule(111),
   yearOfRelease(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_15_genre_info_102->insert(RamDomain(102),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(141));
}();
/* END STRATUM 12 */
/* BEGIN STRATUM 13 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.103(103,"v0,v1","Rule","yearOfRelease,v1,v0","year,v1,v0","genre(v0,v1) :- 
   Rule(112),
   yearOfRelease(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_16_genre_info_103->insert(RamDomain(103),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(12),RamDomain(142));
}();
/* END STRATUM 13 */
/* BEGIN STRATUM 14 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.104(104,"v0,v1","Rule","yearOfRelease,v1,v0","year,v0,v1","genre(v0,v1) :- 
   Rule(113),
   yearOfRelease(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_17_genre_info_104->insert(RamDomain(104),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(10),RamDomain(143));
}();
/* END STRATUM 14 */
/* BEGIN STRATUM 15 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.105(105,"v0,v1","Rule","yearOfRelease,v2,v1","year,v0,v2","genre(v0,v1) :- 
   Rule(114),
   yearOfRelease(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_18_genre_info_105->insert(RamDomain(105),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(62),RamDomain(144));
}();
/* END STRATUM 15 */
/* BEGIN STRATUM 16 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.106(106,"v0,v1","Rule","yearOfRelease,v1,v2","year,v2,v0","genre(v0,v1) :- 
   Rule(115),
   yearOfRelease(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_19_genre_info_106->insert(RamDomain(106),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(64),RamDomain(145));
}();
/* END STRATUM 16 */
/* BEGIN STRATUM 17 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.107(107,"v0,v1","Rule","yearOfRelease,v2,v0","year,v1,v2","genre(v0,v1) :- 
   Rule(116),
   yearOfRelease(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_20_genre_info_107->insert(RamDomain(107),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(66),RamDomain(146));
}();
/* END STRATUM 17 */
/* BEGIN STRATUM 18 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.108(108,"v0,v1","Rule","yearOfRelease,v2,v0","year,v2,v1","genre(v0,v1) :- 
   Rule(117),
   yearOfRelease(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_21_genre_info_108->insert(RamDomain(108),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(68),RamDomain(147));
}();
/* END STRATUM 18 */
/* BEGIN STRATUM 19 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.109(109,"v0,v1","Rule","yearOfRelease,v0,v2","year,v1,v2","genre(v0,v1) :- 
   Rule(118),
   yearOfRelease(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_22_genre_info_109->insert(RamDomain(109),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(66),RamDomain(148));
}();
/* END STRATUM 19 */
/* BEGIN STRATUM 20 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.11(11,"v0,v1","Rule","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(11),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_23_genre_info_11->insert(RamDomain(11),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(23));
}();
/* END STRATUM 20 */
/* BEGIN STRATUM 21 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.110(110,"v0,v1","Rule","yearOfRelease,v0,v2","year,v2,v1","genre(v0,v1) :- 
   Rule(119),
   yearOfRelease(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_24_genre_info_110->insert(RamDomain(110),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(68),RamDomain(149));
}();
/* END STRATUM 21 */
/* BEGIN STRATUM 22 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.111(111,"v0,v1","Rule","yearOfRelease,v2,v1","year,v2,v0","genre(v0,v1) :- 
   Rule(120),
   yearOfRelease(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_25_genre_info_111->insert(RamDomain(111),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(64),RamDomain(150));
}();
/* END STRATUM 22 */
/* BEGIN STRATUM 23 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.112(112,"v0,v1","Rule","yearOfRelease,v1,v2","year,v0,v2","genre(v0,v1) :- 
   Rule(121),
   yearOfRelease(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_26_genre_info_112->insert(RamDomain(112),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(62),RamDomain(151));
}();
/* END STRATUM 23 */
/* BEGIN STRATUM 24 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.113(113,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v0,v1","genre(v0,v1) :- 
   Rule(122),
   yearOfRelease(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_27_genre_info_113->insert(RamDomain(113),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(14),RamDomain(152));
}();
/* END STRATUM 24 */
/* BEGIN STRATUM 25 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.114(114,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v1,v0","genre(v0,v1) :- 
   Rule(123),
   yearOfRelease(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_28_genre_info_114->insert(RamDomain(114),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(16),RamDomain(153));
}();
/* END STRATUM 25 */
/* BEGIN STRATUM 26 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.115(115,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v1,v0","genre(v0,v1) :- 
   Rule(124),
   yearOfRelease(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_29_genre_info_115->insert(RamDomain(115),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(16),RamDomain(154));
}();
/* END STRATUM 26 */
/* BEGIN STRATUM 27 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.116(116,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v0,v1","genre(v0,v1) :- 
   Rule(125),
   yearOfRelease(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_30_genre_info_116->insert(RamDomain(116),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(14),RamDomain(155));
}();
/* END STRATUM 27 */
/* BEGIN STRATUM 28 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.117(117,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v0,v2","genre(v0,v1) :- 
   Rule(126),
   yearOfRelease(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_31_genre_info_117->insert(RamDomain(117),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(78),RamDomain(156));
}();
/* END STRATUM 28 */
/* BEGIN STRATUM 29 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.118(118,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v2,v0","genre(v0,v1) :- 
   Rule(127),
   yearOfRelease(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_32_genre_info_118->insert(RamDomain(118),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(80),RamDomain(157));
}();
/* END STRATUM 29 */
/* BEGIN STRATUM 30 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.119(119,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v1,v2","genre(v0,v1) :- 
   Rule(128),
   yearOfRelease(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_33_genre_info_119->insert(RamDomain(119),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(82),RamDomain(158));
}();
/* END STRATUM 30 */
/* BEGIN STRATUM 31 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.12(12,"v0,v1","Rule","genre,v1,v0","genre(v0,v1) :- 
   Rule(13),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_34_genre_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(25));
}();
/* END STRATUM 31 */
/* BEGIN STRATUM 32 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.120(120,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v2,v1","genre(v0,v1) :- 
   Rule(129),
   yearOfRelease(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_35_genre_info_120->insert(RamDomain(120),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(84),RamDomain(159));
}();
/* END STRATUM 32 */
/* BEGIN STRATUM 33 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.121(121,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v1,v2","genre(v0,v1) :- 
   Rule(130),
   yearOfRelease(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_36_genre_info_121->insert(RamDomain(121),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(82),RamDomain(160));
}();
/* END STRATUM 33 */
/* BEGIN STRATUM 34 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.122(122,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v2,v1","genre(v0,v1) :- 
   Rule(131),
   yearOfRelease(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_37_genre_info_122->insert(RamDomain(122),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(84),RamDomain(161));
}();
/* END STRATUM 34 */
/* BEGIN STRATUM 35 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.123(123,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v2,v0","genre(v0,v1) :- 
   Rule(132),
   yearOfRelease(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_38_genre_info_123->insert(RamDomain(123),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(80),RamDomain(162));
}();
/* END STRATUM 35 */
/* BEGIN STRATUM 36 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.124(124,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v0,v2","genre(v0,v1) :- 
   Rule(133),
   yearOfRelease(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_39_genre_info_124->insert(RamDomain(124),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(78),RamDomain(163));
}();
/* END STRATUM 36 */
/* BEGIN STRATUM 37 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.125(125,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(134),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_40_genre_info_125->insert(RamDomain(125),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(18),RamDomain(164));
}();
/* END STRATUM 37 */
/* BEGIN STRATUM 38 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.126(126,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(135),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_41_genre_info_126->insert(RamDomain(126),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(20),RamDomain(165));
}();
/* END STRATUM 38 */
/* BEGIN STRATUM 39 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.127(127,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(136),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_42_genre_info_127->insert(RamDomain(127),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(20),RamDomain(166));
}();
/* END STRATUM 39 */
/* BEGIN STRATUM 40 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.128(128,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(137),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_43_genre_info_128->insert(RamDomain(128),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(18),RamDomain(167));
}();
/* END STRATUM 40 */
/* BEGIN STRATUM 41 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.129(129,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(138),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_44_genre_info_129->insert(RamDomain(129),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(94),RamDomain(168));
}();
/* END STRATUM 41 */
/* BEGIN STRATUM 42 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.13(13,"v0,v1","Rule","years,v0,v1","genre(v0,v1) :- 
   Rule(14),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_45_genre_info_13->insert(RamDomain(13),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(26));
}();
/* END STRATUM 42 */
/* BEGIN STRATUM 43 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.130(130,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(139),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_46_genre_info_130->insert(RamDomain(130),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(96),RamDomain(169));
}();
/* END STRATUM 43 */
/* BEGIN STRATUM 44 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.131(131,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(140),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_47_genre_info_131->insert(RamDomain(131),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(98),RamDomain(170));
}();
/* END STRATUM 44 */
/* BEGIN STRATUM 45 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.132(132,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(141),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_48_genre_info_132->insert(RamDomain(132),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(100),RamDomain(171));
}();
/* END STRATUM 45 */
/* BEGIN STRATUM 46 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.133(133,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(142),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_49_genre_info_133->insert(RamDomain(133),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(98),RamDomain(172));
}();
/* END STRATUM 46 */
/* BEGIN STRATUM 47 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.134(134,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(143),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_50_genre_info_134->insert(RamDomain(134),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(100),RamDomain(173));
}();
/* END STRATUM 47 */
/* BEGIN STRATUM 48 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.135(135,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(144),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_51_genre_info_135->insert(RamDomain(135),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(96),RamDomain(174));
}();
/* END STRATUM 48 */
/* BEGIN STRATUM 49 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.136(136,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(145),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_52_genre_info_136->insert(RamDomain(136),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(94),RamDomain(175));
}();
/* END STRATUM 49 */
/* BEGIN STRATUM 50 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.137(137,"v0,v1","Rule","yearOfRelease,v0,v1","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(147),
   yearOfRelease(v0,v1),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_53_genre_info_137->insert(RamDomain(137),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(22),RamDomain(176));
}();
/* END STRATUM 50 */
/* BEGIN STRATUM 51 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.138(138,"v0,v1","Rule","yearOfRelease,v1,v0","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(148),
   yearOfRelease(v1,v0),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_54_genre_info_138->insert(RamDomain(138),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(22),RamDomain(177));
}();
/* END STRATUM 51 */
/* BEGIN STRATUM 52 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.139(139,"v0,v1","Rule","yearOfRelease,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(151),
   yearOfRelease(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_55_genre_info_139->insert(RamDomain(139),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(108),RamDomain(178));
}();
/* END STRATUM 52 */
/* BEGIN STRATUM 53 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.14(14,"v0,v1","Rule","years,v0,v1","years,v1,v0","genre(v0,v1) :- 
   Rule(15),
   years(v0,v1),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_56_genre_info_14->insert(RamDomain(14),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(4),RamDomain(27));
}();
/* END STRATUM 53 */
/* BEGIN STRATUM 54 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.140(140,"v0,v1","Rule","yearOfRelease,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(152),
   yearOfRelease(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_57_genre_info_140->insert(RamDomain(140),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(110),RamDomain(179));
}();
/* END STRATUM 54 */
/* BEGIN STRATUM 55 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.141(141,"v0,v1","Rule","yearOfRelease,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(153),
   yearOfRelease(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_58_genre_info_141->insert(RamDomain(141),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(112),RamDomain(180));
}();
/* END STRATUM 55 */
/* BEGIN STRATUM 56 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.142(142,"v0,v1","Rule","yearOfRelease,v0,v2","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(154),
   yearOfRelease(v0,v2),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_59_genre_info_142->insert(RamDomain(142),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(110),RamDomain(181));
}();
/* END STRATUM 56 */
/* BEGIN STRATUM 57 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.143(143,"v0,v1","Rule","yearOfRelease,v0,v2","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(155),
   yearOfRelease(v0,v2),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_60_genre_info_143->insert(RamDomain(143),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(112),RamDomain(182));
}();
/* END STRATUM 57 */
/* BEGIN STRATUM 58 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.144(144,"v0,v1","Rule","yearOfRelease,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(156),
   yearOfRelease(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_61_genre_info_144->insert(RamDomain(144),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(108),RamDomain(183));
}();
/* END STRATUM 58 */
/* BEGIN STRATUM 59 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.145(145,"v0,v1","Rule","yearOfRelease,v0,v1","genre,v1,v0","genre(v0,v1) :- 
   Rule(159),
   yearOfRelease(v0,v1),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_62_genre_info_145->insert(RamDomain(145),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(24),RamDomain(184));
}();
/* END STRATUM 59 */
/* BEGIN STRATUM 60 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.146(146,"v0,v1","Rule","yearOfRelease,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(160),
   yearOfRelease(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_63_genre_info_146->insert(RamDomain(146),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(24),RamDomain(185));
}();
/* END STRATUM 60 */
/* BEGIN STRATUM 61 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.147(147,"v0,v1","Rule","yearOfRelease,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(163),
   yearOfRelease(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_64_genre_info_147->insert(RamDomain(147),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(119),RamDomain(186));
}();
/* END STRATUM 61 */
/* BEGIN STRATUM 62 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.148(148,"v0,v1","Rule","yearOfRelease,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(164),
   yearOfRelease(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_65_genre_info_148->insert(RamDomain(148),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(121),RamDomain(187));
}();
/* END STRATUM 62 */
/* BEGIN STRATUM 63 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.149(149,"v0,v1","Rule","yearOfRelease,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(165),
   yearOfRelease(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_66_genre_info_149->insert(RamDomain(149),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(123),RamDomain(188));
}();
/* END STRATUM 63 */
/* BEGIN STRATUM 64 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.15(15,"v0,v1","Rule","years,v1,v0","genre(v0,v1) :- 
   Rule(16),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_67_genre_info_15->insert(RamDomain(15),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(28));
}();
/* END STRATUM 64 */
/* BEGIN STRATUM 65 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.150(150,"v0,v1","Rule","yearOfRelease,v0,v2","genre,v1,v2","genre(v0,v1) :- 
   Rule(166),
   yearOfRelease(v0,v2),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_68_genre_info_150->insert(RamDomain(150),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(121),RamDomain(189));
}();
/* END STRATUM 65 */
/* BEGIN STRATUM 66 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.151(151,"v0,v1","Rule","yearOfRelease,v0,v2","genre,v2,v1","genre(v0,v1) :- 
   Rule(167),
   yearOfRelease(v0,v2),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_69_genre_info_151->insert(RamDomain(151),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(123),RamDomain(190));
}();
/* END STRATUM 66 */
/* BEGIN STRATUM 67 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.152(152,"v0,v1","Rule","yearOfRelease,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(168),
   yearOfRelease(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_70_genre_info_152->insert(RamDomain(152),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(119),RamDomain(191));
}();
/* END STRATUM 67 */
/* BEGIN STRATUM 68 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.153(153,"v0,v1","Rule","year,v0,v1","genre(v0,v1) :- 
   Rule(170),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_71_genre_info_153->insert(RamDomain(153),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(192));
}();
/* END STRATUM 68 */
/* BEGIN STRATUM 69 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.154(154,"v0,v1","Rule","year,v0,v1","year,v1,v0","genre(v0,v1) :- 
   Rule(171),
   year(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_72_genre_info_154->insert(RamDomain(154),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(193));
}();
/* END STRATUM 69 */
/* BEGIN STRATUM 70 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.155(155,"v0,v1","Rule","year,v1,v0","genre(v0,v1) :- 
   Rule(172),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_73_genre_info_155->insert(RamDomain(155),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(194));
}();
/* END STRATUM 70 */
/* BEGIN STRATUM 71 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.156(156,"v0,v1","Rule","year,v1,v0","year,v0,v1","genre(v0,v1) :- 
   Rule(173),
   year(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_74_genre_info_156->insert(RamDomain(156),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(195));
}();
/* END STRATUM 71 */
/* BEGIN STRATUM 72 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.157(157,"v0,v1","Rule","year,v2,v1","year,v0,v2","genre(v0,v1) :- 
   Rule(174),
   year(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_75_genre_info_157->insert(RamDomain(157),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(62),RamDomain(196));
}();
/* END STRATUM 72 */
/* BEGIN STRATUM 73 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.158(158,"v0,v1","Rule","year,v1,v2","year,v2,v0","genre(v0,v1) :- 
   Rule(175),
   year(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_76_genre_info_158->insert(RamDomain(158),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(64),RamDomain(197));
}();
/* END STRATUM 73 */
/* BEGIN STRATUM 74 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.159(159,"v0,v1","Rule","year,v2,v0","year,v1,v2","genre(v0,v1) :- 
   Rule(176),
   year(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_77_genre_info_159->insert(RamDomain(159),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(66),RamDomain(198));
}();
/* END STRATUM 74 */
/* BEGIN STRATUM 75 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.16(16,"v0,v1","Rule","years,v1,v0","years,v0,v1","genre(v0,v1) :- 
   Rule(17),
   years(v1,v0),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_78_genre_info_16->insert(RamDomain(16),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(2),RamDomain(29));
}();
/* END STRATUM 75 */
/* BEGIN STRATUM 76 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.160(160,"v0,v1","Rule","year,v2,v0","year,v2,v1","genre(v0,v1) :- 
   Rule(177),
   year(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_79_genre_info_160->insert(RamDomain(160),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(68),RamDomain(199));
}();
/* END STRATUM 76 */
/* BEGIN STRATUM 77 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.161(161,"v0,v1","Rule","year,v0,v2","year,v1,v2","genre(v0,v1) :- 
   Rule(178),
   year(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_80_genre_info_161->insert(RamDomain(161),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(66),RamDomain(200));
}();
/* END STRATUM 77 */
/* BEGIN STRATUM 78 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.162(162,"v0,v1","Rule","year,v0,v2","year,v2,v1","genre(v0,v1) :- 
   Rule(179),
   year(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_81_genre_info_162->insert(RamDomain(162),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(68),RamDomain(201));
}();
/* END STRATUM 78 */
/* BEGIN STRATUM 79 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.163(163,"v0,v1","Rule","year,v2,v1","year,v2,v0","genre(v0,v1) :- 
   Rule(180),
   year(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_82_genre_info_163->insert(RamDomain(163),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(64),RamDomain(202));
}();
/* END STRATUM 79 */
/* BEGIN STRATUM 80 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.164(164,"v0,v1","Rule","year,v1,v2","year,v0,v2","genre(v0,v1) :- 
   Rule(181),
   year(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_83_genre_info_164->insert(RamDomain(164),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(62),RamDomain(203));
}();
/* END STRATUM 80 */
/* BEGIN STRATUM 81 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.165(165,"v0,v1","Rule","year,v0,v1","writer,v0,v1","genre(v0,v1) :- 
   Rule(182),
   year(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_84_genre_info_165->insert(RamDomain(165),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(14),RamDomain(204));
}();
/* END STRATUM 81 */
/* BEGIN STRATUM 82 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.166(166,"v0,v1","Rule","year,v0,v1","writer,v1,v0","genre(v0,v1) :- 
   Rule(183),
   year(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_85_genre_info_166->insert(RamDomain(166),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(205));
}();
/* END STRATUM 82 */
/* BEGIN STRATUM 83 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.167(167,"v0,v1","Rule","year,v1,v0","writer,v1,v0","genre(v0,v1) :- 
   Rule(184),
   year(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_86_genre_info_167->insert(RamDomain(167),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(206));
}();
/* END STRATUM 83 */
/* BEGIN STRATUM 84 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.168(168,"v0,v1","Rule","year,v1,v0","writer,v0,v1","genre(v0,v1) :- 
   Rule(185),
   year(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_87_genre_info_168->insert(RamDomain(168),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(14),RamDomain(207));
}();
/* END STRATUM 84 */
/* BEGIN STRATUM 85 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.169(169,"v0,v1","Rule","year,v2,v1","writer,v0,v2","genre(v0,v1) :- 
   Rule(186),
   year(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_88_genre_info_169->insert(RamDomain(169),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(78),RamDomain(208));
}();
/* END STRATUM 85 */
/* BEGIN STRATUM 86 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.17(17,"v0,v1","Rule","years,v2,v1","years,v0,v2","genre(v0,v1) :- 
   Rule(18),
   years(v2,v1),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_89_genre_info_17->insert(RamDomain(17),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(31),RamDomain(32));
}();
/* END STRATUM 86 */
/* BEGIN STRATUM 87 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.170(170,"v0,v1","Rule","year,v1,v2","writer,v2,v0","genre(v0,v1) :- 
   Rule(187),
   year(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_90_genre_info_170->insert(RamDomain(170),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(80),RamDomain(209));
}();
/* END STRATUM 87 */
/* BEGIN STRATUM 88 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.171(171,"v0,v1","Rule","year,v2,v0","writer,v1,v2","genre(v0,v1) :- 
   Rule(188),
   year(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_91_genre_info_171->insert(RamDomain(171),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(82),RamDomain(210));
}();
/* END STRATUM 88 */
/* BEGIN STRATUM 89 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.172(172,"v0,v1","Rule","year,v2,v0","writer,v2,v1","genre(v0,v1) :- 
   Rule(189),
   year(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_92_genre_info_172->insert(RamDomain(172),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(84),RamDomain(211));
}();
/* END STRATUM 89 */
/* BEGIN STRATUM 90 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.173(173,"v0,v1","Rule","year,v0,v2","writer,v1,v2","genre(v0,v1) :- 
   Rule(190),
   year(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_93_genre_info_173->insert(RamDomain(173),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(82),RamDomain(212));
}();
/* END STRATUM 90 */
/* BEGIN STRATUM 91 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.174(174,"v0,v1","Rule","year,v0,v2","writer,v2,v1","genre(v0,v1) :- 
   Rule(191),
   year(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_94_genre_info_174->insert(RamDomain(174),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(84),RamDomain(213));
}();
/* END STRATUM 91 */
/* BEGIN STRATUM 92 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.175(175,"v0,v1","Rule","year,v2,v1","writer,v2,v0","genre(v0,v1) :- 
   Rule(192),
   year(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_95_genre_info_175->insert(RamDomain(175),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(80),RamDomain(214));
}();
/* END STRATUM 92 */
/* BEGIN STRATUM 93 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.176(176,"v0,v1","Rule","year,v1,v2","writer,v0,v2","genre(v0,v1) :- 
   Rule(193),
   year(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_96_genre_info_176->insert(RamDomain(176),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(78),RamDomain(215));
}();
/* END STRATUM 93 */
/* BEGIN STRATUM 94 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.177(177,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(194),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_97_genre_info_177->insert(RamDomain(177),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(18),RamDomain(216));
}();
/* END STRATUM 94 */
/* BEGIN STRATUM 95 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.178(178,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(195),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_98_genre_info_178->insert(RamDomain(178),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(20),RamDomain(217));
}();
/* END STRATUM 95 */
/* BEGIN STRATUM 96 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.179(179,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(196),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_99_genre_info_179->insert(RamDomain(179),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(20),RamDomain(218));
}();
/* END STRATUM 96 */
/* BEGIN STRATUM 97 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.18(18,"v0,v1","Rule","years,v1,v2","years,v2,v0","genre(v0,v1) :- 
   Rule(19),
   years(v1,v2),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_100_genre_info_18->insert(RamDomain(18),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(34),RamDomain(35));
}();
/* END STRATUM 97 */
/* BEGIN STRATUM 98 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.180(180,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(197),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_101_genre_info_180->insert(RamDomain(180),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(18),RamDomain(219));
}();
/* END STRATUM 98 */
/* BEGIN STRATUM 99 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.181(181,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(198),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_102_genre_info_181->insert(RamDomain(181),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(94),RamDomain(220));
}();
/* END STRATUM 99 */
/* BEGIN STRATUM 100 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.182(182,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(199),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_103_genre_info_182->insert(RamDomain(182),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(96),RamDomain(221));
}();
/* END STRATUM 100 */
/* BEGIN STRATUM 101 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.183(183,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(200),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_104_genre_info_183->insert(RamDomain(183),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(98),RamDomain(222));
}();
/* END STRATUM 101 */
/* BEGIN STRATUM 102 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.184(184,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(201),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_105_genre_info_184->insert(RamDomain(184),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(100),RamDomain(223));
}();
/* END STRATUM 102 */
/* BEGIN STRATUM 103 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.185(185,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(202),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_106_genre_info_185->insert(RamDomain(185),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(98),RamDomain(224));
}();
/* END STRATUM 103 */
/* BEGIN STRATUM 104 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.186(186,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(203),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_107_genre_info_186->insert(RamDomain(186),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(100),RamDomain(225));
}();
/* END STRATUM 104 */
/* BEGIN STRATUM 105 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.187(187,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(204),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_108_genre_info_187->insert(RamDomain(187),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(96),RamDomain(226));
}();
/* END STRATUM 105 */
/* BEGIN STRATUM 106 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.188(188,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(205),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_109_genre_info_188->insert(RamDomain(188),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(94),RamDomain(227));
}();
/* END STRATUM 106 */
/* BEGIN STRATUM 107 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.189(189,"v0,v1","Rule","year,v0,v1","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(207),
   year(v0,v1),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_110_genre_info_189->insert(RamDomain(189),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(22),RamDomain(228));
}();
/* END STRATUM 107 */
/* BEGIN STRATUM 108 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.19(19,"v0,v1","Rule","years,v2,v0","years,v1,v2","genre(v0,v1) :- 
   Rule(20),
   years(v2,v0),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_111_genre_info_19->insert(RamDomain(19),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(33),RamDomain(36));
}();
/* END STRATUM 108 */
/* BEGIN STRATUM 109 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.190(190,"v0,v1","Rule","year,v1,v0","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(208),
   year(v1,v0),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_112_genre_info_190->insert(RamDomain(190),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(22),RamDomain(229));
}();
/* END STRATUM 109 */
/* BEGIN STRATUM 110 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.191(191,"v0,v1","Rule","year,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(211),
   year(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_113_genre_info_191->insert(RamDomain(191),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(108),RamDomain(230));
}();
/* END STRATUM 110 */
/* BEGIN STRATUM 111 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.192(192,"v0,v1","Rule","year,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(212),
   year(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_114_genre_info_192->insert(RamDomain(192),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(110),RamDomain(231));
}();
/* END STRATUM 111 */
/* BEGIN STRATUM 112 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.193(193,"v0,v1","Rule","year,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(213),
   year(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_115_genre_info_193->insert(RamDomain(193),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(112),RamDomain(232));
}();
/* END STRATUM 112 */
/* BEGIN STRATUM 113 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.194(194,"v0,v1","Rule","year,v0,v2","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(214),
   year(v0,v2),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_116_genre_info_194->insert(RamDomain(194),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(110),RamDomain(233));
}();
/* END STRATUM 113 */
/* BEGIN STRATUM 114 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.195(195,"v0,v1","Rule","year,v0,v2","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(215),
   year(v0,v2),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_117_genre_info_195->insert(RamDomain(195),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(112),RamDomain(234));
}();
/* END STRATUM 114 */
/* BEGIN STRATUM 115 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.196(196,"v0,v1","Rule","year,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(216),
   year(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_118_genre_info_196->insert(RamDomain(196),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(108),RamDomain(235));
}();
/* END STRATUM 115 */
/* BEGIN STRATUM 116 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.197(197,"v0,v1","Rule","year,v0,v1","genre,v1,v0","genre(v0,v1) :- 
   Rule(219),
   year(v0,v1),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_119_genre_info_197->insert(RamDomain(197),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(236));
}();
/* END STRATUM 116 */
/* BEGIN STRATUM 117 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.198(198,"v0,v1","Rule","year,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(220),
   year(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_120_genre_info_198->insert(RamDomain(198),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(24),RamDomain(237));
}();
/* END STRATUM 117 */
/* BEGIN STRATUM 118 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.199(199,"v0,v1","Rule","year,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(223),
   year(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_121_genre_info_199->insert(RamDomain(199),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(119),RamDomain(238));
}();
/* END STRATUM 118 */
/* BEGIN STRATUM 119 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.2(2,"v0,v1","Rule","years,v1,v0","genre(v0,v1) :- 
   Rule(1),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_122_genre_info_2->insert(RamDomain(2),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(5));
}();
/* END STRATUM 119 */
/* BEGIN STRATUM 120 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.20(20,"v0,v1","Rule","years,v2,v0","years,v2,v1","genre(v0,v1) :- 
   Rule(21),
   years(v2,v0),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_123_genre_info_20->insert(RamDomain(20),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(30),RamDomain(37));
}();
/* END STRATUM 120 */
/* BEGIN STRATUM 121 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.200(200,"v0,v1","Rule","year,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(224),
   year(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_124_genre_info_200->insert(RamDomain(200),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(121),RamDomain(239));
}();
/* END STRATUM 121 */
/* BEGIN STRATUM 122 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.201(201,"v0,v1","Rule","year,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(225),
   year(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_125_genre_info_201->insert(RamDomain(201),RamDomain(0),RamDomain(1),RamDomain(64),RamDomain(123),RamDomain(240));
}();
/* END STRATUM 122 */
/* BEGIN STRATUM 123 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.202(202,"v0,v1","Rule","year,v0,v2","genre,v1,v2","genre(v0,v1) :- 
   Rule(226),
   year(v0,v2),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_126_genre_info_202->insert(RamDomain(202),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(121),RamDomain(241));
}();
/* END STRATUM 123 */
/* BEGIN STRATUM 124 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.203(203,"v0,v1","Rule","year,v0,v2","genre,v2,v1","genre(v0,v1) :- 
   Rule(227),
   year(v0,v2),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_127_genre_info_203->insert(RamDomain(203),RamDomain(0),RamDomain(1),RamDomain(62),RamDomain(123),RamDomain(242));
}();
/* END STRATUM 124 */
/* BEGIN STRATUM 125 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.204(204,"v0,v1","Rule","year,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(228),
   year(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_128_genre_info_204->insert(RamDomain(204),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(119),RamDomain(243));
}();
/* END STRATUM 125 */
/* BEGIN STRATUM 126 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.205(205,"v0,v1","Rule","writer,v0,v1","genre(v0,v1) :- 
   Rule(230),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_129_genre_info_205->insert(RamDomain(205),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(244));
}();
/* END STRATUM 126 */
/* BEGIN STRATUM 127 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.206(206,"v0,v1","Rule","writer,v0,v1","writer,v1,v0","genre(v0,v1) :- 
   Rule(231),
   writer(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_130_genre_info_206->insert(RamDomain(206),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(16),RamDomain(245));
}();
/* END STRATUM 127 */
/* BEGIN STRATUM 128 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.207(207,"v0,v1","Rule","writer,v1,v0","genre(v0,v1) :- 
   Rule(232),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_131_genre_info_207->insert(RamDomain(207),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(246));
}();
/* END STRATUM 128 */
/* BEGIN STRATUM 129 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.208(208,"v0,v1","Rule","writer,v1,v0","writer,v0,v1","genre(v0,v1) :- 
   Rule(233),
   writer(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_132_genre_info_208->insert(RamDomain(208),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(14),RamDomain(247));
}();
/* END STRATUM 129 */
/* BEGIN STRATUM 130 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.209(209,"v0,v1","Rule","writer,v2,v1","writer,v0,v2","genre(v0,v1) :- 
   Rule(234),
   writer(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_133_genre_info_209->insert(RamDomain(209),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(78),RamDomain(248));
}();
/* END STRATUM 130 */
/* BEGIN STRATUM 131 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.21(21,"v0,v1","Rule","years,v0,v2","years,v1,v2","genre(v0,v1) :- 
   Rule(22),
   years(v0,v2),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_134_genre_info_21->insert(RamDomain(21),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(33),RamDomain(38));
}();
/* END STRATUM 131 */
/* BEGIN STRATUM 132 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.210(210,"v0,v1","Rule","writer,v1,v2","writer,v2,v0","genre(v0,v1) :- 
   Rule(235),
   writer(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_135_genre_info_210->insert(RamDomain(210),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(80),RamDomain(249));
}();
/* END STRATUM 132 */
/* BEGIN STRATUM 133 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.211(211,"v0,v1","Rule","writer,v2,v0","writer,v1,v2","genre(v0,v1) :- 
   Rule(236),
   writer(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_136_genre_info_211->insert(RamDomain(211),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(82),RamDomain(250));
}();
/* END STRATUM 133 */
/* BEGIN STRATUM 134 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.212(212,"v0,v1","Rule","writer,v2,v0","writer,v2,v1","genre(v0,v1) :- 
   Rule(237),
   writer(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_137_genre_info_212->insert(RamDomain(212),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(84),RamDomain(251));
}();
/* END STRATUM 134 */
/* BEGIN STRATUM 135 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.213(213,"v0,v1","Rule","writer,v0,v2","writer,v1,v2","genre(v0,v1) :- 
   Rule(238),
   writer(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_138_genre_info_213->insert(RamDomain(213),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(82),RamDomain(252));
}();
/* END STRATUM 135 */
/* BEGIN STRATUM 136 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.214(214,"v0,v1","Rule","writer,v0,v2","writer,v2,v1","genre(v0,v1) :- 
   Rule(239),
   writer(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_139_genre_info_214->insert(RamDomain(214),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(84),RamDomain(253));
}();
/* END STRATUM 136 */
/* BEGIN STRATUM 137 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.215(215,"v0,v1","Rule","writer,v2,v1","writer,v2,v0","genre(v0,v1) :- 
   Rule(240),
   writer(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_140_genre_info_215->insert(RamDomain(215),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(80),RamDomain(254));
}();
/* END STRATUM 137 */
/* BEGIN STRATUM 138 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.216(216,"v0,v1","Rule","writer,v1,v2","writer,v0,v2","genre(v0,v1) :- 
   Rule(241),
   writer(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_141_genre_info_216->insert(RamDomain(216),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(78),RamDomain(255));
}();
/* END STRATUM 138 */
/* BEGIN STRATUM 139 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.217(217,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(242),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_142_genre_info_217->insert(RamDomain(217),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(18),RamDomain(256));
}();
/* END STRATUM 139 */
/* BEGIN STRATUM 140 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.218(218,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(243),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_143_genre_info_218->insert(RamDomain(218),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(20),RamDomain(257));
}();
/* END STRATUM 140 */
/* BEGIN STRATUM 141 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.219(219,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(244),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_144_genre_info_219->insert(RamDomain(219),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(20),RamDomain(258));
}();
/* END STRATUM 141 */
/* BEGIN STRATUM 142 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.22(22,"v0,v1","Rule","years,v0,v2","years,v2,v1","genre(v0,v1) :- 
   Rule(23),
   years(v0,v2),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_145_genre_info_22->insert(RamDomain(22),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(30),RamDomain(39));
}();
/* END STRATUM 142 */
/* BEGIN STRATUM 143 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.220(220,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(245),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_146_genre_info_220->insert(RamDomain(220),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(18),RamDomain(259));
}();
/* END STRATUM 143 */
/* BEGIN STRATUM 144 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.221(221,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(246),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_147_genre_info_221->insert(RamDomain(221),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(94),RamDomain(260));
}();
/* END STRATUM 144 */
/* BEGIN STRATUM 145 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.222(222,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(247),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_148_genre_info_222->insert(RamDomain(222),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(96),RamDomain(261));
}();
/* END STRATUM 145 */
/* BEGIN STRATUM 146 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.223(223,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(248),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_149_genre_info_223->insert(RamDomain(223),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(98),RamDomain(262));
}();
/* END STRATUM 146 */
/* BEGIN STRATUM 147 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.224(224,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(249),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_150_genre_info_224->insert(RamDomain(224),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(100),RamDomain(263));
}();
/* END STRATUM 147 */
/* BEGIN STRATUM 148 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.225(225,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(250),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_151_genre_info_225->insert(RamDomain(225),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(98),RamDomain(264));
}();
/* END STRATUM 148 */
/* BEGIN STRATUM 149 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.226(226,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(251),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_152_genre_info_226->insert(RamDomain(226),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(100),RamDomain(265));
}();
/* END STRATUM 149 */
/* BEGIN STRATUM 150 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.227(227,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(252),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_153_genre_info_227->insert(RamDomain(227),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(96),RamDomain(266));
}();
/* END STRATUM 150 */
/* BEGIN STRATUM 151 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.228(228,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(253),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_154_genre_info_228->insert(RamDomain(228),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(94),RamDomain(267));
}();
/* END STRATUM 151 */
/* BEGIN STRATUM 152 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.229(229,"v0,v1","Rule","writer,v0,v1","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(255),
   writer(v0,v1),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_155_genre_info_229->insert(RamDomain(229),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(22),RamDomain(268));
}();
/* END STRATUM 152 */
/* BEGIN STRATUM 153 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.23(23,"v0,v1","Rule","years,v2,v1","years,v2,v0","genre(v0,v1) :- 
   Rule(24),
   years(v2,v1),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_156_genre_info_23->insert(RamDomain(23),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(34),RamDomain(40));
}();
/* END STRATUM 153 */
/* BEGIN STRATUM 154 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.230(230,"v0,v1","Rule","writer,v1,v0","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(256),
   writer(v1,v0),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_157_genre_info_230->insert(RamDomain(230),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(22),RamDomain(269));
}();
/* END STRATUM 154 */
/* BEGIN STRATUM 155 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.231(231,"v0,v1","Rule","writer,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(259),
   writer(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_158_genre_info_231->insert(RamDomain(231),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(108),RamDomain(270));
}();
/* END STRATUM 155 */
/* BEGIN STRATUM 156 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.232(232,"v0,v1","Rule","writer,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(260),
   writer(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_159_genre_info_232->insert(RamDomain(232),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(110),RamDomain(271));
}();
/* END STRATUM 156 */
/* BEGIN STRATUM 157 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.233(233,"v0,v1","Rule","writer,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(261),
   writer(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_160_genre_info_233->insert(RamDomain(233),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(112),RamDomain(272));
}();
/* END STRATUM 157 */
/* BEGIN STRATUM 158 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.234(234,"v0,v1","Rule","writer,v0,v2","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(262),
   writer(v0,v2),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_161_genre_info_234->insert(RamDomain(234),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(110),RamDomain(273));
}();
/* END STRATUM 158 */
/* BEGIN STRATUM 159 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.235(235,"v0,v1","Rule","writer,v0,v2","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(263),
   writer(v0,v2),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_162_genre_info_235->insert(RamDomain(235),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(112),RamDomain(274));
}();
/* END STRATUM 159 */
/* BEGIN STRATUM 160 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.236(236,"v0,v1","Rule","writer,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(264),
   writer(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_163_genre_info_236->insert(RamDomain(236),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(108),RamDomain(275));
}();
/* END STRATUM 160 */
/* BEGIN STRATUM 161 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.237(237,"v0,v1","Rule","writer,v0,v1","genre,v1,v0","genre(v0,v1) :- 
   Rule(267),
   writer(v0,v1),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_164_genre_info_237->insert(RamDomain(237),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(24),RamDomain(276));
}();
/* END STRATUM 161 */
/* BEGIN STRATUM 162 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.238(238,"v0,v1","Rule","writer,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(268),
   writer(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_165_genre_info_238->insert(RamDomain(238),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(24),RamDomain(277));
}();
/* END STRATUM 162 */
/* BEGIN STRATUM 163 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.239(239,"v0,v1","Rule","writer,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(271),
   writer(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_166_genre_info_239->insert(RamDomain(239),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(119),RamDomain(278));
}();
/* END STRATUM 163 */
/* BEGIN STRATUM 164 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.24(24,"v0,v1","Rule","years,v1,v2","years,v0,v2","genre(v0,v1) :- 
   Rule(25),
   years(v1,v2),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_167_genre_info_24->insert(RamDomain(24),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(31),RamDomain(41));
}();
/* END STRATUM 164 */
/* BEGIN STRATUM 165 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.240(240,"v0,v1","Rule","writer,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(272),
   writer(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_168_genre_info_240->insert(RamDomain(240),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(121),RamDomain(279));
}();
/* END STRATUM 165 */
/* BEGIN STRATUM 166 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.241(241,"v0,v1","Rule","writer,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(273),
   writer(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_169_genre_info_241->insert(RamDomain(241),RamDomain(0),RamDomain(1),RamDomain(80),RamDomain(123),RamDomain(280));
}();
/* END STRATUM 166 */
/* BEGIN STRATUM 167 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.242(242,"v0,v1","Rule","writer,v0,v2","genre,v1,v2","genre(v0,v1) :- 
   Rule(274),
   writer(v0,v2),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_170_genre_info_242->insert(RamDomain(242),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(121),RamDomain(281));
}();
/* END STRATUM 167 */
/* BEGIN STRATUM 168 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.243(243,"v0,v1","Rule","writer,v0,v2","genre,v2,v1","genre(v0,v1) :- 
   Rule(275),
   writer(v0,v2),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_171_genre_info_243->insert(RamDomain(243),RamDomain(0),RamDomain(1),RamDomain(78),RamDomain(123),RamDomain(282));
}();
/* END STRATUM 168 */
/* BEGIN STRATUM 169 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.244(244,"v0,v1","Rule","writer,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(276),
   writer(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_172_genre_info_244->insert(RamDomain(244),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(119),RamDomain(283));
}();
/* END STRATUM 169 */
/* BEGIN STRATUM 170 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.245(245,"v0,v1","Rule","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(278),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_173_genre_info_245->insert(RamDomain(245),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(284));
}();
/* END STRATUM 170 */
/* BEGIN STRATUM 171 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.246(246,"v0,v1","Rule","wikisourcelangProperty,v0,v1","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(279),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_174_genre_info_246->insert(RamDomain(246),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(20),RamDomain(285));
}();
/* END STRATUM 171 */
/* BEGIN STRATUM 172 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.247(247,"v0,v1","Rule","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(280),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_175_genre_info_247->insert(RamDomain(247),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(286));
}();
/* END STRATUM 172 */
/* BEGIN STRATUM 173 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.248(248,"v0,v1","Rule","wikisourcelangProperty,v1,v0","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(281),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_176_genre_info_248->insert(RamDomain(248),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(18),RamDomain(287));
}();
/* END STRATUM 173 */
/* BEGIN STRATUM 174 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.249(249,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(282),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_177_genre_info_249->insert(RamDomain(249),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(94),RamDomain(288));
}();
/* END STRATUM 174 */
/* BEGIN STRATUM 175 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.25(25,"v0,v1","Rule","years,v0,v1","yearOfRelease,v0,v1","genre(v0,v1) :- 
   Rule(26),
   years(v0,v1),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_178_genre_info_25->insert(RamDomain(25),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(42));
}();
/* END STRATUM 175 */
/* BEGIN STRATUM 176 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.250(250,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(283),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_179_genre_info_250->insert(RamDomain(250),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(96),RamDomain(289));
}();
/* END STRATUM 176 */
/* BEGIN STRATUM 177 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.251(251,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(284),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_180_genre_info_251->insert(RamDomain(251),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(98),RamDomain(290));
}();
/* END STRATUM 177 */
/* BEGIN STRATUM 178 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.252(252,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(285),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_181_genre_info_252->insert(RamDomain(252),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(100),RamDomain(291));
}();
/* END STRATUM 178 */
/* BEGIN STRATUM 179 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.253(253,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(286),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_182_genre_info_253->insert(RamDomain(253),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(98),RamDomain(292));
}();
/* END STRATUM 179 */
/* BEGIN STRATUM 180 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.254(254,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(287),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_183_genre_info_254->insert(RamDomain(254),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(100),RamDomain(293));
}();
/* END STRATUM 180 */
/* BEGIN STRATUM 181 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.255(255,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(288),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_184_genre_info_255->insert(RamDomain(255),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(96),RamDomain(294));
}();
/* END STRATUM 181 */
/* BEGIN STRATUM 182 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.256(256,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(289),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_185_genre_info_256->insert(RamDomain(256),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(94),RamDomain(295));
}();
/* END STRATUM 182 */
/* BEGIN STRATUM 183 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.257(257,"v0,v1","Rule","wikisourcelangProperty,v0,v1","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(291),
   wikisourcelangProperty(v0,v1),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_186_genre_info_257->insert(RamDomain(257),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(22),RamDomain(296));
}();
/* END STRATUM 183 */
/* BEGIN STRATUM 184 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.258(258,"v0,v1","Rule","wikisourcelangProperty,v1,v0","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(292),
   wikisourcelangProperty(v1,v0),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_187_genre_info_258->insert(RamDomain(258),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(22),RamDomain(297));
}();
/* END STRATUM 184 */
/* BEGIN STRATUM 185 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.259(259,"v0,v1","Rule","wikisourcelangProperty,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(295),
   wikisourcelangProperty(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_188_genre_info_259->insert(RamDomain(259),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(108),RamDomain(298));
}();
/* END STRATUM 185 */
/* BEGIN STRATUM 186 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.26(26,"v0,v1","Rule","years,v0,v1","yearOfRelease,v1,v0","genre(v0,v1) :- 
   Rule(27),
   years(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_189_genre_info_26->insert(RamDomain(26),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(8),RamDomain(43));
}();
/* END STRATUM 186 */
/* BEGIN STRATUM 187 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.260(260,"v0,v1","Rule","wikisourcelangProperty,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(296),
   wikisourcelangProperty(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_190_genre_info_260->insert(RamDomain(260),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(110),RamDomain(299));
}();
/* END STRATUM 187 */
/* BEGIN STRATUM 188 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.261(261,"v0,v1","Rule","wikisourcelangProperty,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(297),
   wikisourcelangProperty(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_191_genre_info_261->insert(RamDomain(261),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(112),RamDomain(300));
}();
/* END STRATUM 188 */
/* BEGIN STRATUM 189 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.262(262,"v0,v1","Rule","wikisourcelangProperty,v0,v2","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(298),
   wikisourcelangProperty(v0,v2),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_192_genre_info_262->insert(RamDomain(262),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(110),RamDomain(301));
}();
/* END STRATUM 189 */
/* BEGIN STRATUM 190 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.263(263,"v0,v1","Rule","wikisourcelangProperty,v0,v2","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(299),
   wikisourcelangProperty(v0,v2),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_193_genre_info_263->insert(RamDomain(263),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(112),RamDomain(302));
}();
/* END STRATUM 190 */
/* BEGIN STRATUM 191 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.264(264,"v0,v1","Rule","wikisourcelangProperty,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(300),
   wikisourcelangProperty(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_194_genre_info_264->insert(RamDomain(264),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(108),RamDomain(303));
}();
/* END STRATUM 191 */
/* BEGIN STRATUM 192 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.265(265,"v0,v1","Rule","wikisourcelangProperty,v0,v1","genre,v1,v0","genre(v0,v1) :- 
   Rule(303),
   wikisourcelangProperty(v0,v1),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_195_genre_info_265->insert(RamDomain(265),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(24),RamDomain(304));
}();
/* END STRATUM 192 */
/* BEGIN STRATUM 193 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.266(266,"v0,v1","Rule","wikisourcelangProperty,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(304),
   wikisourcelangProperty(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_196_genre_info_266->insert(RamDomain(266),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(24),RamDomain(305));
}();
/* END STRATUM 193 */
/* BEGIN STRATUM 194 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.267(267,"v0,v1","Rule","wikisourcelangProperty,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(307),
   wikisourcelangProperty(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_197_genre_info_267->insert(RamDomain(267),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(119),RamDomain(306));
}();
/* END STRATUM 194 */
/* BEGIN STRATUM 195 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.268(268,"v0,v1","Rule","wikisourcelangProperty,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(308),
   wikisourcelangProperty(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_198_genre_info_268->insert(RamDomain(268),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(121),RamDomain(307));
}();
/* END STRATUM 195 */
/* BEGIN STRATUM 196 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.269(269,"v0,v1","Rule","wikisourcelangProperty,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(309),
   wikisourcelangProperty(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_199_genre_info_269->insert(RamDomain(269),RamDomain(0),RamDomain(1),RamDomain(96),RamDomain(123),RamDomain(308));
}();
/* END STRATUM 196 */
/* BEGIN STRATUM 197 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.27(27,"v0,v1","Rule","years,v1,v0","yearOfRelease,v1,v0","genre(v0,v1) :- 
   Rule(28),
   years(v1,v0),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_200_genre_info_27->insert(RamDomain(27),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(8),RamDomain(44));
}();
/* END STRATUM 197 */
/* BEGIN STRATUM 198 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.270(270,"v0,v1","Rule","wikisourcelangProperty,v0,v2","genre,v1,v2","genre(v0,v1) :- 
   Rule(310),
   wikisourcelangProperty(v0,v2),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_201_genre_info_270->insert(RamDomain(270),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(121),RamDomain(309));
}();
/* END STRATUM 198 */
/* BEGIN STRATUM 199 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.271(271,"v0,v1","Rule","wikisourcelangProperty,v0,v2","genre,v2,v1","genre(v0,v1) :- 
   Rule(311),
   wikisourcelangProperty(v0,v2),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_202_genre_info_271->insert(RamDomain(271),RamDomain(0),RamDomain(1),RamDomain(94),RamDomain(123),RamDomain(310));
}();
/* END STRATUM 199 */
/* BEGIN STRATUM 200 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.272(272,"v0,v1","Rule","wikisourcelangProperty,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(312),
   wikisourcelangProperty(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_203_genre_info_272->insert(RamDomain(272),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(119),RamDomain(311));
}();
/* END STRATUM 200 */
/* BEGIN STRATUM 201 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.273(273,"v0,v1","Rule","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(316),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_204_genre_info_273->insert(RamDomain(273),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(312));
}();
/* END STRATUM 201 */
/* BEGIN STRATUM 202 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.274(274,"v0,v1","Rule","Igenre,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(319),
   Igenre(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_205_genre_info_274->insert(RamDomain(274),RamDomain(0),RamDomain(1),RamDomain(110),RamDomain(108),RamDomain(313));
}();
/* END STRATUM 202 */
/* BEGIN STRATUM 203 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.275(275,"v0,v1","Rule","Igenre,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(320),
   Igenre(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_206_genre_info_275->insert(RamDomain(275),RamDomain(0),RamDomain(1),RamDomain(108),RamDomain(110),RamDomain(314));
}();
/* END STRATUM 203 */
/* BEGIN STRATUM 204 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.276(276,"v0,v1","Rule","Igenre,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(321),
   Igenre(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_207_genre_info_276->insert(RamDomain(276),RamDomain(0),RamDomain(1),RamDomain(108),RamDomain(112),RamDomain(315));
}();
/* END STRATUM 204 */
/* BEGIN STRATUM 205 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.277(277,"v0,v1","Rule","Igenre,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(324),
   Igenre(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_208_genre_info_277->insert(RamDomain(277),RamDomain(0),RamDomain(1),RamDomain(112),RamDomain(108),RamDomain(316));
}();
/* END STRATUM 205 */
/* BEGIN STRATUM 206 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.278(278,"v0,v1","Rule","Igenre,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(328),
   Igenre(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_209_genre_info_278->insert(RamDomain(278),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(24),RamDomain(317));
}();
/* END STRATUM 206 */
/* BEGIN STRATUM 207 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.279(279,"v0,v1","Rule","Igenre,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(331),
   Igenre(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_210_genre_info_279->insert(RamDomain(279),RamDomain(0),RamDomain(1),RamDomain(110),RamDomain(119),RamDomain(318));
}();
/* END STRATUM 207 */
/* BEGIN STRATUM 208 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.28(28,"v0,v1","Rule","years,v1,v0","yearOfRelease,v0,v1","genre(v0,v1) :- 
   Rule(29),
   years(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_211_genre_info_28->insert(RamDomain(28),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(6),RamDomain(45));
}();
/* END STRATUM 208 */
/* BEGIN STRATUM 209 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.280(280,"v0,v1","Rule","Igenre,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(332),
   Igenre(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_212_genre_info_280->insert(RamDomain(280),RamDomain(0),RamDomain(1),RamDomain(108),RamDomain(121),RamDomain(319));
}();
/* END STRATUM 209 */
/* BEGIN STRATUM 210 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.281(281,"v0,v1","Rule","Igenre,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(333),
   Igenre(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_213_genre_info_281->insert(RamDomain(281),RamDomain(0),RamDomain(1),RamDomain(108),RamDomain(123),RamDomain(320));
}();
/* END STRATUM 210 */
/* BEGIN STRATUM 211 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.282(282,"v0,v1","Rule","Igenre,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(336),
   Igenre(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_214_genre_info_282->insert(RamDomain(282),RamDomain(0),RamDomain(1),RamDomain(112),RamDomain(119),RamDomain(321));
}();
/* END STRATUM 211 */
/* BEGIN STRATUM 212 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.283(283,"v0,v1","Rule","genre,v1,v0","genre(v0,v1) :- 
   Rule(340),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_215_genre_info_283->insert(RamDomain(283),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(322));
}();
/* END STRATUM 212 */
/* BEGIN STRATUM 213 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.284(284,"v0,v1","Rule","genre,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(343),
   genre(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_216_genre_info_284->insert(RamDomain(284),RamDomain(0),RamDomain(1),RamDomain(121),RamDomain(119),RamDomain(323));
}();
/* END STRATUM 213 */
/* BEGIN STRATUM 214 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.285(285,"v0,v1","Rule","genre,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(344),
   genre(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_217_genre_info_285->insert(RamDomain(285),RamDomain(0),RamDomain(1),RamDomain(119),RamDomain(121),RamDomain(324));
}();
/* END STRATUM 214 */
/* BEGIN STRATUM 215 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.286(286,"v0,v1","Rule","genre,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(345),
   genre(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_218_genre_info_286->insert(RamDomain(286),RamDomain(0),RamDomain(1),RamDomain(119),RamDomain(123),RamDomain(325));
}();
/* END STRATUM 215 */
/* BEGIN STRATUM 216 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.287(287,"v0,v1","Rule","genre,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(348),
   genre(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_219_genre_info_287->insert(RamDomain(287),RamDomain(0),RamDomain(1),RamDomain(123),RamDomain(119),RamDomain(326));
}();
/* END STRATUM 216 */
/* BEGIN STRATUM 217 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.29(29,"v0,v1","Rule","years,v2,v1","yearOfRelease,v0,v2","genre(v0,v1) :- 
   Rule(30),
   years(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_220_genre_info_29->insert(RamDomain(29),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(46),RamDomain(47));
}();
/* END STRATUM 217 */
/* BEGIN STRATUM 218 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.3(3,"v0,v1","Rule","yearOfRelease,v0,v1","genre(v0,v1) :- 
   Rule(2),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_221_genre_info_3->insert(RamDomain(3),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7));
}();
/* END STRATUM 218 */
/* BEGIN STRATUM 219 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.30(30,"v0,v1","Rule","years,v1,v2","yearOfRelease,v2,v0","genre(v0,v1) :- 
   Rule(31),
   years(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_222_genre_info_30->insert(RamDomain(30),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(48),RamDomain(49));
}();
/* END STRATUM 219 */
/* BEGIN STRATUM 220 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.31(31,"v0,v1","Rule","years,v2,v0","yearOfRelease,v1,v2","genre(v0,v1) :- 
   Rule(32),
   years(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_223_genre_info_31->insert(RamDomain(31),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(50),RamDomain(51));
}();
/* END STRATUM 220 */
/* BEGIN STRATUM 221 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.32(32,"v0,v1","Rule","years,v2,v0","yearOfRelease,v2,v1","genre(v0,v1) :- 
   Rule(33),
   years(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_224_genre_info_32->insert(RamDomain(32),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(52),RamDomain(53));
}();
/* END STRATUM 221 */
/* BEGIN STRATUM 222 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.33(33,"v0,v1","Rule","years,v0,v2","yearOfRelease,v1,v2","genre(v0,v1) :- 
   Rule(34),
   years(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_225_genre_info_33->insert(RamDomain(33),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(50),RamDomain(54));
}();
/* END STRATUM 222 */
/* BEGIN STRATUM 223 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.34(34,"v0,v1","Rule","years,v0,v2","yearOfRelease,v2,v1","genre(v0,v1) :- 
   Rule(35),
   years(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_226_genre_info_34->insert(RamDomain(34),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(52),RamDomain(55));
}();
/* END STRATUM 223 */
/* BEGIN STRATUM 224 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.35(35,"v0,v1","Rule","years,v2,v1","yearOfRelease,v2,v0","genre(v0,v1) :- 
   Rule(36),
   years(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_227_genre_info_35->insert(RamDomain(35),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(48),RamDomain(56));
}();
/* END STRATUM 224 */
/* BEGIN STRATUM 225 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.36(36,"v0,v1","Rule","years,v1,v2","yearOfRelease,v0,v2","genre(v0,v1) :- 
   Rule(37),
   years(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_228_genre_info_36->insert(RamDomain(36),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(46),RamDomain(57));
}();
/* END STRATUM 225 */
/* BEGIN STRATUM 226 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.37(37,"v0,v1","Rule","years,v0,v1","year,v0,v1","genre(v0,v1) :- 
   Rule(38),
   years(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_229_genre_info_37->insert(RamDomain(37),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(10),RamDomain(58));
}();
/* END STRATUM 226 */
/* BEGIN STRATUM 227 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.38(38,"v0,v1","Rule","years,v0,v1","year,v1,v0","genre(v0,v1) :- 
   Rule(39),
   years(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_230_genre_info_38->insert(RamDomain(38),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(59));
}();
/* END STRATUM 227 */
/* BEGIN STRATUM 228 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.39(39,"v0,v1","Rule","years,v1,v0","year,v1,v0","genre(v0,v1) :- 
   Rule(40),
   years(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_231_genre_info_39->insert(RamDomain(39),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(12),RamDomain(60));
}();
/* END STRATUM 228 */
/* BEGIN STRATUM 229 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.4(4,"v0,v1","Rule","yearOfRelease,v1,v0","genre(v0,v1) :- 
   Rule(3),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_232_genre_info_4->insert(RamDomain(4),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(9));
}();
/* END STRATUM 229 */
/* BEGIN STRATUM 230 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.40(40,"v0,v1","Rule","years,v1,v0","year,v0,v1","genre(v0,v1) :- 
   Rule(41),
   years(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_233_genre_info_40->insert(RamDomain(40),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(10),RamDomain(61));
}();
/* END STRATUM 230 */
/* BEGIN STRATUM 231 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.41(41,"v0,v1","Rule","years,v2,v1","year,v0,v2","genre(v0,v1) :- 
   Rule(42),
   years(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_234_genre_info_41->insert(RamDomain(41),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(62),RamDomain(63));
}();
/* END STRATUM 231 */
/* BEGIN STRATUM 232 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.42(42,"v0,v1","Rule","years,v1,v2","year,v2,v0","genre(v0,v1) :- 
   Rule(43),
   years(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_235_genre_info_42->insert(RamDomain(42),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(64),RamDomain(65));
}();
/* END STRATUM 232 */
/* BEGIN STRATUM 233 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.43(43,"v0,v1","Rule","years,v2,v0","year,v1,v2","genre(v0,v1) :- 
   Rule(44),
   years(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_236_genre_info_43->insert(RamDomain(43),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(66),RamDomain(67));
}();
/* END STRATUM 233 */
/* BEGIN STRATUM 234 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.44(44,"v0,v1","Rule","years,v2,v0","year,v2,v1","genre(v0,v1) :- 
   Rule(45),
   years(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_237_genre_info_44->insert(RamDomain(44),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(68),RamDomain(69));
}();
/* END STRATUM 234 */
/* BEGIN STRATUM 235 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.45(45,"v0,v1","Rule","years,v0,v2","year,v1,v2","genre(v0,v1) :- 
   Rule(46),
   years(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_238_genre_info_45->insert(RamDomain(45),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(66),RamDomain(70));
}();
/* END STRATUM 235 */
/* BEGIN STRATUM 236 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.46(46,"v0,v1","Rule","years,v0,v2","year,v2,v1","genre(v0,v1) :- 
   Rule(47),
   years(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_239_genre_info_46->insert(RamDomain(46),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(68),RamDomain(71));
}();
/* END STRATUM 236 */
/* BEGIN STRATUM 237 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.47(47,"v0,v1","Rule","years,v2,v1","year,v2,v0","genre(v0,v1) :- 
   Rule(48),
   years(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_240_genre_info_47->insert(RamDomain(47),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(64),RamDomain(72));
}();
/* END STRATUM 237 */
/* BEGIN STRATUM 238 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.48(48,"v0,v1","Rule","years,v1,v2","year,v0,v2","genre(v0,v1) :- 
   Rule(49),
   years(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_241_genre_info_48->insert(RamDomain(48),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(62),RamDomain(73));
}();
/* END STRATUM 238 */
/* BEGIN STRATUM 239 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.49(49,"v0,v1","Rule","years,v0,v1","writer,v0,v1","genre(v0,v1) :- 
   Rule(50),
   years(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_242_genre_info_49->insert(RamDomain(49),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(14),RamDomain(74));
}();
/* END STRATUM 239 */
/* BEGIN STRATUM 240 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.5(5,"v0,v1","Rule","year,v0,v1","genre(v0,v1) :- 
   Rule(4),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_243_genre_info_5->insert(RamDomain(5),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(11));
}();
/* END STRATUM 240 */
/* BEGIN STRATUM 241 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.50(50,"v0,v1","Rule","years,v0,v1","writer,v1,v0","genre(v0,v1) :- 
   Rule(51),
   years(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_244_genre_info_50->insert(RamDomain(50),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(16),RamDomain(75));
}();
/* END STRATUM 241 */
/* BEGIN STRATUM 242 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.51(51,"v0,v1","Rule","years,v1,v0","writer,v1,v0","genre(v0,v1) :- 
   Rule(52),
   years(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_245_genre_info_51->insert(RamDomain(51),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(16),RamDomain(76));
}();
/* END STRATUM 242 */
/* BEGIN STRATUM 243 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.52(52,"v0,v1","Rule","years,v1,v0","writer,v0,v1","genre(v0,v1) :- 
   Rule(53),
   years(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_246_genre_info_52->insert(RamDomain(52),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(14),RamDomain(77));
}();
/* END STRATUM 243 */
/* BEGIN STRATUM 244 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.53(53,"v0,v1","Rule","years,v2,v1","writer,v0,v2","genre(v0,v1) :- 
   Rule(54),
   years(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_247_genre_info_53->insert(RamDomain(53),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(78),RamDomain(79));
}();
/* END STRATUM 244 */
/* BEGIN STRATUM 245 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.54(54,"v0,v1","Rule","years,v1,v2","writer,v2,v0","genre(v0,v1) :- 
   Rule(55),
   years(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_248_genre_info_54->insert(RamDomain(54),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(80),RamDomain(81));
}();
/* END STRATUM 245 */
/* BEGIN STRATUM 246 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.55(55,"v0,v1","Rule","years,v2,v0","writer,v1,v2","genre(v0,v1) :- 
   Rule(56),
   years(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_249_genre_info_55->insert(RamDomain(55),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(82),RamDomain(83));
}();
/* END STRATUM 246 */
/* BEGIN STRATUM 247 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.56(56,"v0,v1","Rule","years,v2,v0","writer,v2,v1","genre(v0,v1) :- 
   Rule(57),
   years(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_250_genre_info_56->insert(RamDomain(56),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(84),RamDomain(85));
}();
/* END STRATUM 247 */
/* BEGIN STRATUM 248 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.57(57,"v0,v1","Rule","years,v0,v2","writer,v1,v2","genre(v0,v1) :- 
   Rule(58),
   years(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_251_genre_info_57->insert(RamDomain(57),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(82),RamDomain(86));
}();
/* END STRATUM 248 */
/* BEGIN STRATUM 249 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.58(58,"v0,v1","Rule","years,v0,v2","writer,v2,v1","genre(v0,v1) :- 
   Rule(59),
   years(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_252_genre_info_58->insert(RamDomain(58),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(84),RamDomain(87));
}();
/* END STRATUM 249 */
/* BEGIN STRATUM 250 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.59(59,"v0,v1","Rule","years,v2,v1","writer,v2,v0","genre(v0,v1) :- 
   Rule(60),
   years(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_253_genre_info_59->insert(RamDomain(59),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(80),RamDomain(88));
}();
/* END STRATUM 250 */
/* BEGIN STRATUM 251 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.6(6,"v0,v1","Rule","year,v1,v0","genre(v0,v1) :- 
   Rule(5),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_254_genre_info_6->insert(RamDomain(6),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(13));
}();
/* END STRATUM 251 */
/* BEGIN STRATUM 252 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.60(60,"v0,v1","Rule","years,v1,v2","writer,v0,v2","genre(v0,v1) :- 
   Rule(61),
   years(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_255_genre_info_60->insert(RamDomain(60),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(78),RamDomain(89));
}();
/* END STRATUM 252 */
/* BEGIN STRATUM 253 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.61(61,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(62),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_256_genre_info_61->insert(RamDomain(61),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(18),RamDomain(90));
}();
/* END STRATUM 253 */
/* BEGIN STRATUM 254 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.62(62,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(63),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_257_genre_info_62->insert(RamDomain(62),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(20),RamDomain(91));
}();
/* END STRATUM 254 */
/* BEGIN STRATUM 255 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.63(63,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v1,v0","genre(v0,v1) :- 
   Rule(64),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_258_genre_info_63->insert(RamDomain(63),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(20),RamDomain(92));
}();
/* END STRATUM 255 */
/* BEGIN STRATUM 256 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.64(64,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(65),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_259_genre_info_64->insert(RamDomain(64),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(18),RamDomain(93));
}();
/* END STRATUM 256 */
/* BEGIN STRATUM 257 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.65(65,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(66),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_260_genre_info_65->insert(RamDomain(65),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(94),RamDomain(95));
}();
/* END STRATUM 257 */
/* BEGIN STRATUM 258 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.66(66,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(67),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_261_genre_info_66->insert(RamDomain(66),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(96),RamDomain(97));
}();
/* END STRATUM 258 */
/* BEGIN STRATUM 259 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.67(67,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(68),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_262_genre_info_67->insert(RamDomain(67),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(98),RamDomain(99));
}();
/* END STRATUM 259 */
/* BEGIN STRATUM 260 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.68(68,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(69),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_263_genre_info_68->insert(RamDomain(68),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(100),RamDomain(101));
}();
/* END STRATUM 260 */
/* BEGIN STRATUM 261 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.69(69,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v1,v2","genre(v0,v1) :- 
   Rule(70),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_264_genre_info_69->insert(RamDomain(69),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(98),RamDomain(102));
}();
/* END STRATUM 261 */
/* BEGIN STRATUM 262 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.7(7,"v0,v1","Rule","writer,v0,v1","genre(v0,v1) :- 
   Rule(6),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_265_genre_info_7->insert(RamDomain(7),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(15));
}();
/* END STRATUM 262 */
/* BEGIN STRATUM 263 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.70(70,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v2,v1","genre(v0,v1) :- 
   Rule(71),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_266_genre_info_70->insert(RamDomain(70),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(100),RamDomain(103));
}();
/* END STRATUM 263 */
/* BEGIN STRATUM 264 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.71(71,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v2,v0","genre(v0,v1) :- 
   Rule(72),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_267_genre_info_71->insert(RamDomain(71),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(96),RamDomain(104));
}();
/* END STRATUM 264 */
/* BEGIN STRATUM 265 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.72(72,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v0,v2","genre(v0,v1) :- 
   Rule(73),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_268_genre_info_72->insert(RamDomain(72),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(94),RamDomain(105));
}();
/* END STRATUM 265 */
/* BEGIN STRATUM 266 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.73(73,"v0,v1","Rule","years,v0,v1","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(75),
   years(v0,v1),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_269_genre_info_73->insert(RamDomain(73),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(22),RamDomain(106));
}();
/* END STRATUM 266 */
/* BEGIN STRATUM 267 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.74(74,"v0,v1","Rule","years,v1,v0","Igenre,v1,v0","genre(v0,v1) :- 
   Rule(76),
   years(v1,v0),
   Igenre(v1,v0).").
in file  [0:0-0:0])_");
rel_270_genre_info_74->insert(RamDomain(74),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(22),RamDomain(107));
}();
/* END STRATUM 267 */
/* BEGIN STRATUM 268 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.75(75,"v0,v1","Rule","years,v1,v2","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(79),
   years(v1,v2),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_271_genre_info_75->insert(RamDomain(75),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(108),RamDomain(109));
}();
/* END STRATUM 268 */
/* BEGIN STRATUM 269 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.76(76,"v0,v1","Rule","years,v2,v0","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(80),
   years(v2,v0),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_272_genre_info_76->insert(RamDomain(76),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(110),RamDomain(111));
}();
/* END STRATUM 269 */
/* BEGIN STRATUM 270 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.77(77,"v0,v1","Rule","years,v2,v0","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(81),
   years(v2,v0),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_273_genre_info_77->insert(RamDomain(77),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(112),RamDomain(113));
}();
/* END STRATUM 270 */
/* BEGIN STRATUM 271 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.78(78,"v0,v1","Rule","years,v0,v2","Igenre,v1,v2","genre(v0,v1) :- 
   Rule(82),
   years(v0,v2),
   Igenre(v1,v2).").
in file  [0:0-0:0])_");
rel_274_genre_info_78->insert(RamDomain(78),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(110),RamDomain(114));
}();
/* END STRATUM 271 */
/* BEGIN STRATUM 272 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.79(79,"v0,v1","Rule","years,v0,v2","Igenre,v2,v1","genre(v0,v1) :- 
   Rule(83),
   years(v0,v2),
   Igenre(v2,v1).").
in file  [0:0-0:0])_");
rel_275_genre_info_79->insert(RamDomain(79),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(112),RamDomain(115));
}();
/* END STRATUM 272 */
/* BEGIN STRATUM 273 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.8(8,"v0,v1","Rule","writer,v1,v0","genre(v0,v1) :- 
   Rule(7),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_276_genre_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(17));
}();
/* END STRATUM 273 */
/* BEGIN STRATUM 274 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.80(80,"v0,v1","Rule","years,v2,v1","Igenre,v2,v0","genre(v0,v1) :- 
   Rule(84),
   years(v2,v1),
   Igenre(v2,v0).").
in file  [0:0-0:0])_");
rel_277_genre_info_80->insert(RamDomain(80),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(108),RamDomain(116));
}();
/* END STRATUM 274 */
/* BEGIN STRATUM 275 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.81(81,"v0,v1","Rule","years,v0,v1","genre,v1,v0","genre(v0,v1) :- 
   Rule(87),
   years(v0,v1),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_278_genre_info_81->insert(RamDomain(81),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(24),RamDomain(117));
}();
/* END STRATUM 275 */
/* BEGIN STRATUM 276 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.82(82,"v0,v1","Rule","years,v1,v0","genre,v1,v0","genre(v0,v1) :- 
   Rule(88),
   years(v1,v0),
   genre(v1,v0).").
in file  [0:0-0:0])_");
rel_279_genre_info_82->insert(RamDomain(82),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(24),RamDomain(118));
}();
/* END STRATUM 276 */
/* BEGIN STRATUM 277 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.83(83,"v0,v1","Rule","years,v1,v2","genre,v2,v0","genre(v0,v1) :- 
   Rule(91),
   years(v1,v2),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_280_genre_info_83->insert(RamDomain(83),RamDomain(0),RamDomain(1),RamDomain(33),RamDomain(119),RamDomain(120));
}();
/* END STRATUM 277 */
/* BEGIN STRATUM 278 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.84(84,"v0,v1","Rule","years,v2,v0","genre,v1,v2","genre(v0,v1) :- 
   Rule(92),
   years(v2,v0),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_281_genre_info_84->insert(RamDomain(84),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(121),RamDomain(122));
}();
/* END STRATUM 278 */
/* BEGIN STRATUM 279 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.85(85,"v0,v1","Rule","years,v2,v0","genre,v2,v1","genre(v0,v1) :- 
   Rule(93),
   years(v2,v0),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_282_genre_info_85->insert(RamDomain(85),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(123),RamDomain(124));
}();
/* END STRATUM 279 */
/* BEGIN STRATUM 280 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.86(86,"v0,v1","Rule","years,v0,v2","genre,v1,v2","genre(v0,v1) :- 
   Rule(94),
   years(v0,v2),
   genre(v1,v2).").
in file  [0:0-0:0])_");
rel_283_genre_info_86->insert(RamDomain(86),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(121),RamDomain(125));
}();
/* END STRATUM 280 */
/* BEGIN STRATUM 281 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.87(87,"v0,v1","Rule","years,v0,v2","genre,v2,v1","genre(v0,v1) :- 
   Rule(95),
   years(v0,v2),
   genre(v2,v1).").
in file  [0:0-0:0])_");
rel_284_genre_info_87->insert(RamDomain(87),RamDomain(0),RamDomain(1),RamDomain(31),RamDomain(123),RamDomain(126));
}();
/* END STRATUM 281 */
/* BEGIN STRATUM 282 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.88(88,"v0,v1","Rule","years,v2,v1","genre,v2,v0","genre(v0,v1) :- 
   Rule(96),
   years(v2,v1),
   genre(v2,v0).").
in file  [0:0-0:0])_");
rel_285_genre_info_88->insert(RamDomain(88),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(119),RamDomain(127));
}();
/* END STRATUM 282 */
/* BEGIN STRATUM 283 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.89(89,"v0,v1","Rule","yearOfRelease,v0,v1","genre(v0,v1) :- 
   Rule(98),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_286_genre_info_89->insert(RamDomain(89),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(128));
}();
/* END STRATUM 283 */
/* BEGIN STRATUM 284 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.9(9,"v0,v1","Rule","wikisourcelangProperty,v0,v1","genre(v0,v1) :- 
   Rule(8),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_287_genre_info_9->insert(RamDomain(9),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(19));
}();
/* END STRATUM 284 */
/* BEGIN STRATUM 285 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.90(90,"v0,v1","Rule","yearOfRelease,v0,v1","yearOfRelease,v1,v0","genre(v0,v1) :- 
   Rule(99),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_288_genre_info_90->insert(RamDomain(90),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(8),RamDomain(129));
}();
/* END STRATUM 285 */
/* BEGIN STRATUM 286 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.91(91,"v0,v1","Rule","yearOfRelease,v1,v0","genre(v0,v1) :- 
   Rule(100),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_289_genre_info_91->insert(RamDomain(91),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(130));
}();
/* END STRATUM 286 */
/* BEGIN STRATUM 287 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.92(92,"v0,v1","Rule","yearOfRelease,v1,v0","yearOfRelease,v0,v1","genre(v0,v1) :- 
   Rule(101),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_290_genre_info_92->insert(RamDomain(92),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(6),RamDomain(131));
}();
/* END STRATUM 287 */
/* BEGIN STRATUM 288 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.93(93,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v0,v2","genre(v0,v1) :- 
   Rule(102),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_291_genre_info_93->insert(RamDomain(93),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(46),RamDomain(132));
}();
/* END STRATUM 288 */
/* BEGIN STRATUM 289 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.94(94,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v2,v0","genre(v0,v1) :- 
   Rule(103),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_292_genre_info_94->insert(RamDomain(94),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(48),RamDomain(133));
}();
/* END STRATUM 289 */
/* BEGIN STRATUM 290 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.95(95,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v1,v2","genre(v0,v1) :- 
   Rule(104),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_293_genre_info_95->insert(RamDomain(95),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(50),RamDomain(134));
}();
/* END STRATUM 290 */
/* BEGIN STRATUM 291 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.96(96,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v2,v1","genre(v0,v1) :- 
   Rule(105),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_294_genre_info_96->insert(RamDomain(96),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(52),RamDomain(135));
}();
/* END STRATUM 291 */
/* BEGIN STRATUM 292 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.97(97,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v1,v2","genre(v0,v1) :- 
   Rule(106),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_295_genre_info_97->insert(RamDomain(97),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(50),RamDomain(136));
}();
/* END STRATUM 292 */
/* BEGIN STRATUM 293 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.98(98,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v2,v1","genre(v0,v1) :- 
   Rule(107),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_296_genre_info_98->insert(RamDomain(98),RamDomain(0),RamDomain(1),RamDomain(46),RamDomain(52),RamDomain(137));
}();
/* END STRATUM 293 */
/* BEGIN STRATUM 294 */
[&]() {
SignalHandler::instance()->setMsg(R"_(genre.@info.99(99,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v2,v0","genre(v0,v1) :- 
   Rule(108),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_297_genre_info_99->insert(RamDomain(99),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(48),RamDomain(138));
}();
/* END STRATUM 294 */

// -- relation hint statistics --
if(isHintsProfilingEnabled()) {
std::cout << " -- Operation Hint Statistics --\n";
std::cout << "Relation rel_1_Igenre:\n";
rel_1_Igenre->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_2_Rule:\n";
rel_2_Rule->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_3_wikisourcelangProperty:\n";
rel_3_wikisourcelangProperty->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_4_writer:\n";
rel_4_writer->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_5_year:\n";
rel_5_year->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_6_yearOfRelease:\n";
rel_6_yearOfRelease->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_7_years:\n";
rel_7_years->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_8_genre:\n";
rel_8_genre->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_9_delta_genre:\n";
rel_9_delta_genre->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_10_new_genre:\n";
rel_10_new_genre->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_11_genre_info_1:\n";
rel_11_genre_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_12_genre_info_10:\n";
rel_12_genre_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_13_genre_info_100:\n";
rel_13_genre_info_100->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_14_genre_info_101:\n";
rel_14_genre_info_101->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_15_genre_info_102:\n";
rel_15_genre_info_102->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_16_genre_info_103:\n";
rel_16_genre_info_103->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_17_genre_info_104:\n";
rel_17_genre_info_104->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_18_genre_info_105:\n";
rel_18_genre_info_105->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_19_genre_info_106:\n";
rel_19_genre_info_106->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_20_genre_info_107:\n";
rel_20_genre_info_107->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_21_genre_info_108:\n";
rel_21_genre_info_108->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_22_genre_info_109:\n";
rel_22_genre_info_109->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_23_genre_info_11:\n";
rel_23_genre_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_24_genre_info_110:\n";
rel_24_genre_info_110->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_25_genre_info_111:\n";
rel_25_genre_info_111->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_26_genre_info_112:\n";
rel_26_genre_info_112->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_27_genre_info_113:\n";
rel_27_genre_info_113->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_28_genre_info_114:\n";
rel_28_genre_info_114->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_29_genre_info_115:\n";
rel_29_genre_info_115->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_30_genre_info_116:\n";
rel_30_genre_info_116->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_31_genre_info_117:\n";
rel_31_genre_info_117->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_32_genre_info_118:\n";
rel_32_genre_info_118->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_33_genre_info_119:\n";
rel_33_genre_info_119->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_34_genre_info_12:\n";
rel_34_genre_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_35_genre_info_120:\n";
rel_35_genre_info_120->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_36_genre_info_121:\n";
rel_36_genre_info_121->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_37_genre_info_122:\n";
rel_37_genre_info_122->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_38_genre_info_123:\n";
rel_38_genre_info_123->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_39_genre_info_124:\n";
rel_39_genre_info_124->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_40_genre_info_125:\n";
rel_40_genre_info_125->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_41_genre_info_126:\n";
rel_41_genre_info_126->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_42_genre_info_127:\n";
rel_42_genre_info_127->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_43_genre_info_128:\n";
rel_43_genre_info_128->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_44_genre_info_129:\n";
rel_44_genre_info_129->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_45_genre_info_13:\n";
rel_45_genre_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_46_genre_info_130:\n";
rel_46_genre_info_130->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_47_genre_info_131:\n";
rel_47_genre_info_131->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_48_genre_info_132:\n";
rel_48_genre_info_132->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_49_genre_info_133:\n";
rel_49_genre_info_133->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_50_genre_info_134:\n";
rel_50_genre_info_134->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_51_genre_info_135:\n";
rel_51_genre_info_135->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_52_genre_info_136:\n";
rel_52_genre_info_136->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_53_genre_info_137:\n";
rel_53_genre_info_137->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_54_genre_info_138:\n";
rel_54_genre_info_138->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_55_genre_info_139:\n";
rel_55_genre_info_139->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_56_genre_info_14:\n";
rel_56_genre_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_57_genre_info_140:\n";
rel_57_genre_info_140->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_58_genre_info_141:\n";
rel_58_genre_info_141->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_59_genre_info_142:\n";
rel_59_genre_info_142->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_60_genre_info_143:\n";
rel_60_genre_info_143->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_61_genre_info_144:\n";
rel_61_genre_info_144->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_62_genre_info_145:\n";
rel_62_genre_info_145->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_63_genre_info_146:\n";
rel_63_genre_info_146->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_64_genre_info_147:\n";
rel_64_genre_info_147->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_65_genre_info_148:\n";
rel_65_genre_info_148->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_66_genre_info_149:\n";
rel_66_genre_info_149->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_67_genre_info_15:\n";
rel_67_genre_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_68_genre_info_150:\n";
rel_68_genre_info_150->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_69_genre_info_151:\n";
rel_69_genre_info_151->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_70_genre_info_152:\n";
rel_70_genre_info_152->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_71_genre_info_153:\n";
rel_71_genre_info_153->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_72_genre_info_154:\n";
rel_72_genre_info_154->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_73_genre_info_155:\n";
rel_73_genre_info_155->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_74_genre_info_156:\n";
rel_74_genre_info_156->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_75_genre_info_157:\n";
rel_75_genre_info_157->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_76_genre_info_158:\n";
rel_76_genre_info_158->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_77_genre_info_159:\n";
rel_77_genre_info_159->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_78_genre_info_16:\n";
rel_78_genre_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_79_genre_info_160:\n";
rel_79_genre_info_160->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_80_genre_info_161:\n";
rel_80_genre_info_161->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_81_genre_info_162:\n";
rel_81_genre_info_162->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_82_genre_info_163:\n";
rel_82_genre_info_163->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_83_genre_info_164:\n";
rel_83_genre_info_164->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_84_genre_info_165:\n";
rel_84_genre_info_165->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_85_genre_info_166:\n";
rel_85_genre_info_166->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_86_genre_info_167:\n";
rel_86_genre_info_167->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_87_genre_info_168:\n";
rel_87_genre_info_168->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_88_genre_info_169:\n";
rel_88_genre_info_169->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_89_genre_info_17:\n";
rel_89_genre_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_90_genre_info_170:\n";
rel_90_genre_info_170->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_91_genre_info_171:\n";
rel_91_genre_info_171->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_92_genre_info_172:\n";
rel_92_genre_info_172->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_93_genre_info_173:\n";
rel_93_genre_info_173->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_94_genre_info_174:\n";
rel_94_genre_info_174->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_95_genre_info_175:\n";
rel_95_genre_info_175->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_96_genre_info_176:\n";
rel_96_genre_info_176->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_97_genre_info_177:\n";
rel_97_genre_info_177->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_98_genre_info_178:\n";
rel_98_genre_info_178->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_99_genre_info_179:\n";
rel_99_genre_info_179->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_100_genre_info_18:\n";
rel_100_genre_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_101_genre_info_180:\n";
rel_101_genre_info_180->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_102_genre_info_181:\n";
rel_102_genre_info_181->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_103_genre_info_182:\n";
rel_103_genre_info_182->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_104_genre_info_183:\n";
rel_104_genre_info_183->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_105_genre_info_184:\n";
rel_105_genre_info_184->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_106_genre_info_185:\n";
rel_106_genre_info_185->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_107_genre_info_186:\n";
rel_107_genre_info_186->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_108_genre_info_187:\n";
rel_108_genre_info_187->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_109_genre_info_188:\n";
rel_109_genre_info_188->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_110_genre_info_189:\n";
rel_110_genre_info_189->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_111_genre_info_19:\n";
rel_111_genre_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_112_genre_info_190:\n";
rel_112_genre_info_190->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_113_genre_info_191:\n";
rel_113_genre_info_191->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_114_genre_info_192:\n";
rel_114_genre_info_192->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_115_genre_info_193:\n";
rel_115_genre_info_193->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_116_genre_info_194:\n";
rel_116_genre_info_194->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_117_genre_info_195:\n";
rel_117_genre_info_195->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_118_genre_info_196:\n";
rel_118_genre_info_196->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_119_genre_info_197:\n";
rel_119_genre_info_197->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_120_genre_info_198:\n";
rel_120_genre_info_198->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_121_genre_info_199:\n";
rel_121_genre_info_199->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_122_genre_info_2:\n";
rel_122_genre_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_123_genre_info_20:\n";
rel_123_genre_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_124_genre_info_200:\n";
rel_124_genre_info_200->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_125_genre_info_201:\n";
rel_125_genre_info_201->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_126_genre_info_202:\n";
rel_126_genre_info_202->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_127_genre_info_203:\n";
rel_127_genre_info_203->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_128_genre_info_204:\n";
rel_128_genre_info_204->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_129_genre_info_205:\n";
rel_129_genre_info_205->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_130_genre_info_206:\n";
rel_130_genre_info_206->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_131_genre_info_207:\n";
rel_131_genre_info_207->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_132_genre_info_208:\n";
rel_132_genre_info_208->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_133_genre_info_209:\n";
rel_133_genre_info_209->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_134_genre_info_21:\n";
rel_134_genre_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_135_genre_info_210:\n";
rel_135_genre_info_210->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_136_genre_info_211:\n";
rel_136_genre_info_211->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_137_genre_info_212:\n";
rel_137_genre_info_212->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_138_genre_info_213:\n";
rel_138_genre_info_213->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_139_genre_info_214:\n";
rel_139_genre_info_214->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_140_genre_info_215:\n";
rel_140_genre_info_215->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_141_genre_info_216:\n";
rel_141_genre_info_216->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_142_genre_info_217:\n";
rel_142_genre_info_217->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_143_genre_info_218:\n";
rel_143_genre_info_218->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_144_genre_info_219:\n";
rel_144_genre_info_219->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_145_genre_info_22:\n";
rel_145_genre_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_146_genre_info_220:\n";
rel_146_genre_info_220->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_147_genre_info_221:\n";
rel_147_genre_info_221->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_148_genre_info_222:\n";
rel_148_genre_info_222->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_149_genre_info_223:\n";
rel_149_genre_info_223->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_150_genre_info_224:\n";
rel_150_genre_info_224->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_151_genre_info_225:\n";
rel_151_genre_info_225->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_152_genre_info_226:\n";
rel_152_genre_info_226->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_153_genre_info_227:\n";
rel_153_genre_info_227->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_154_genre_info_228:\n";
rel_154_genre_info_228->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_155_genre_info_229:\n";
rel_155_genre_info_229->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_156_genre_info_23:\n";
rel_156_genre_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_157_genre_info_230:\n";
rel_157_genre_info_230->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_158_genre_info_231:\n";
rel_158_genre_info_231->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_159_genre_info_232:\n";
rel_159_genre_info_232->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_160_genre_info_233:\n";
rel_160_genre_info_233->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_161_genre_info_234:\n";
rel_161_genre_info_234->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_162_genre_info_235:\n";
rel_162_genre_info_235->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_163_genre_info_236:\n";
rel_163_genre_info_236->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_164_genre_info_237:\n";
rel_164_genre_info_237->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_165_genre_info_238:\n";
rel_165_genre_info_238->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_166_genre_info_239:\n";
rel_166_genre_info_239->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_167_genre_info_24:\n";
rel_167_genre_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_168_genre_info_240:\n";
rel_168_genre_info_240->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_169_genre_info_241:\n";
rel_169_genre_info_241->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_170_genre_info_242:\n";
rel_170_genre_info_242->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_171_genre_info_243:\n";
rel_171_genre_info_243->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_172_genre_info_244:\n";
rel_172_genre_info_244->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_173_genre_info_245:\n";
rel_173_genre_info_245->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_174_genre_info_246:\n";
rel_174_genre_info_246->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_175_genre_info_247:\n";
rel_175_genre_info_247->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_176_genre_info_248:\n";
rel_176_genre_info_248->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_177_genre_info_249:\n";
rel_177_genre_info_249->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_178_genre_info_25:\n";
rel_178_genre_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_179_genre_info_250:\n";
rel_179_genre_info_250->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_180_genre_info_251:\n";
rel_180_genre_info_251->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_181_genre_info_252:\n";
rel_181_genre_info_252->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_182_genre_info_253:\n";
rel_182_genre_info_253->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_183_genre_info_254:\n";
rel_183_genre_info_254->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_184_genre_info_255:\n";
rel_184_genre_info_255->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_185_genre_info_256:\n";
rel_185_genre_info_256->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_186_genre_info_257:\n";
rel_186_genre_info_257->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_187_genre_info_258:\n";
rel_187_genre_info_258->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_188_genre_info_259:\n";
rel_188_genre_info_259->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_189_genre_info_26:\n";
rel_189_genre_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_190_genre_info_260:\n";
rel_190_genre_info_260->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_191_genre_info_261:\n";
rel_191_genre_info_261->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_192_genre_info_262:\n";
rel_192_genre_info_262->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_193_genre_info_263:\n";
rel_193_genre_info_263->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_194_genre_info_264:\n";
rel_194_genre_info_264->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_195_genre_info_265:\n";
rel_195_genre_info_265->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_196_genre_info_266:\n";
rel_196_genre_info_266->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_197_genre_info_267:\n";
rel_197_genre_info_267->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_198_genre_info_268:\n";
rel_198_genre_info_268->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_199_genre_info_269:\n";
rel_199_genre_info_269->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_200_genre_info_27:\n";
rel_200_genre_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_201_genre_info_270:\n";
rel_201_genre_info_270->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_202_genre_info_271:\n";
rel_202_genre_info_271->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_203_genre_info_272:\n";
rel_203_genre_info_272->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_204_genre_info_273:\n";
rel_204_genre_info_273->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_205_genre_info_274:\n";
rel_205_genre_info_274->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_206_genre_info_275:\n";
rel_206_genre_info_275->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_207_genre_info_276:\n";
rel_207_genre_info_276->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_208_genre_info_277:\n";
rel_208_genre_info_277->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_209_genre_info_278:\n";
rel_209_genre_info_278->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_210_genre_info_279:\n";
rel_210_genre_info_279->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_211_genre_info_28:\n";
rel_211_genre_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_212_genre_info_280:\n";
rel_212_genre_info_280->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_213_genre_info_281:\n";
rel_213_genre_info_281->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_214_genre_info_282:\n";
rel_214_genre_info_282->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_215_genre_info_283:\n";
rel_215_genre_info_283->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_216_genre_info_284:\n";
rel_216_genre_info_284->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_217_genre_info_285:\n";
rel_217_genre_info_285->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_218_genre_info_286:\n";
rel_218_genre_info_286->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_219_genre_info_287:\n";
rel_219_genre_info_287->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_220_genre_info_29:\n";
rel_220_genre_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_221_genre_info_3:\n";
rel_221_genre_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_222_genre_info_30:\n";
rel_222_genre_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_223_genre_info_31:\n";
rel_223_genre_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_224_genre_info_32:\n";
rel_224_genre_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_225_genre_info_33:\n";
rel_225_genre_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_226_genre_info_34:\n";
rel_226_genre_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_227_genre_info_35:\n";
rel_227_genre_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_228_genre_info_36:\n";
rel_228_genre_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_229_genre_info_37:\n";
rel_229_genre_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_230_genre_info_38:\n";
rel_230_genre_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_231_genre_info_39:\n";
rel_231_genre_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_232_genre_info_4:\n";
rel_232_genre_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_233_genre_info_40:\n";
rel_233_genre_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_234_genre_info_41:\n";
rel_234_genre_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_235_genre_info_42:\n";
rel_235_genre_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_236_genre_info_43:\n";
rel_236_genre_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_237_genre_info_44:\n";
rel_237_genre_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_238_genre_info_45:\n";
rel_238_genre_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_239_genre_info_46:\n";
rel_239_genre_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_240_genre_info_47:\n";
rel_240_genre_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_241_genre_info_48:\n";
rel_241_genre_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_242_genre_info_49:\n";
rel_242_genre_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_243_genre_info_5:\n";
rel_243_genre_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_244_genre_info_50:\n";
rel_244_genre_info_50->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_245_genre_info_51:\n";
rel_245_genre_info_51->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_246_genre_info_52:\n";
rel_246_genre_info_52->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_247_genre_info_53:\n";
rel_247_genre_info_53->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_248_genre_info_54:\n";
rel_248_genre_info_54->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_249_genre_info_55:\n";
rel_249_genre_info_55->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_250_genre_info_56:\n";
rel_250_genre_info_56->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_251_genre_info_57:\n";
rel_251_genre_info_57->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_252_genre_info_58:\n";
rel_252_genre_info_58->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_253_genre_info_59:\n";
rel_253_genre_info_59->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_254_genre_info_6:\n";
rel_254_genre_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_255_genre_info_60:\n";
rel_255_genre_info_60->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_256_genre_info_61:\n";
rel_256_genre_info_61->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_257_genre_info_62:\n";
rel_257_genre_info_62->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_258_genre_info_63:\n";
rel_258_genre_info_63->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_259_genre_info_64:\n";
rel_259_genre_info_64->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_260_genre_info_65:\n";
rel_260_genre_info_65->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_261_genre_info_66:\n";
rel_261_genre_info_66->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_262_genre_info_67:\n";
rel_262_genre_info_67->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_263_genre_info_68:\n";
rel_263_genre_info_68->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_264_genre_info_69:\n";
rel_264_genre_info_69->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_265_genre_info_7:\n";
rel_265_genre_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_266_genre_info_70:\n";
rel_266_genre_info_70->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_267_genre_info_71:\n";
rel_267_genre_info_71->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_268_genre_info_72:\n";
rel_268_genre_info_72->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_269_genre_info_73:\n";
rel_269_genre_info_73->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_270_genre_info_74:\n";
rel_270_genre_info_74->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_271_genre_info_75:\n";
rel_271_genre_info_75->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_272_genre_info_76:\n";
rel_272_genre_info_76->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_273_genre_info_77:\n";
rel_273_genre_info_77->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_274_genre_info_78:\n";
rel_274_genre_info_78->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_275_genre_info_79:\n";
rel_275_genre_info_79->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_276_genre_info_8:\n";
rel_276_genre_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_277_genre_info_80:\n";
rel_277_genre_info_80->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_278_genre_info_81:\n";
rel_278_genre_info_81->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_279_genre_info_82:\n";
rel_279_genre_info_82->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_280_genre_info_83:\n";
rel_280_genre_info_83->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_281_genre_info_84:\n";
rel_281_genre_info_84->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_282_genre_info_85:\n";
rel_282_genre_info_85->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_283_genre_info_86:\n";
rel_283_genre_info_86->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_284_genre_info_87:\n";
rel_284_genre_info_87->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_285_genre_info_88:\n";
rel_285_genre_info_88->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_286_genre_info_89:\n";
rel_286_genre_info_89->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_287_genre_info_9:\n";
rel_287_genre_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_288_genre_info_90:\n";
rel_288_genre_info_90->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_289_genre_info_91:\n";
rel_289_genre_info_91->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_290_genre_info_92:\n";
rel_290_genre_info_92->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_291_genre_info_93:\n";
rel_291_genre_info_93->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_292_genre_info_94:\n";
rel_292_genre_info_94->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_293_genre_info_95:\n";
rel_293_genre_info_95->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_294_genre_info_96:\n";
rel_294_genre_info_96->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_295_genre_info_97:\n";
rel_295_genre_info_97->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_296_genre_info_98:\n";
rel_296_genre_info_98->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_297_genre_info_99:\n";
rel_297_genre_info_99->printHintStatistics(std::cout,"  ");
std::cout << "\n";
}
SignalHandler::instance()->reset();
}
public:
void run(size_t stratumIndex = (size_t) -1) override { runFunction(".", ".", stratumIndex, false); }
public:
void runAll(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1) override { runFunction(inputDirectory, outputDirectory, stratumIndex, true);
}
public:
void printAll(std::string outputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./genre.csv"},{"name","genre"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_8_genre);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Igenre.facts"},{"name","Igenre"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Igenre);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./wikisourcelangProperty.facts"},{"name","wikisourcelangProperty"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./writer.facts"},{"name","writer"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_writer);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./year.facts"},{"name","year"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_year);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./yearOfRelease.facts"},{"name","yearOfRelease"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_6_yearOfRelease);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./years.facts"},{"name","years"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_7_years);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
public:
void dumpInputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_1_Igenre");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_1_Igenre);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_2_Rule");
IOSystem::getInstance().getWriter(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->writeAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_3_wikisourcelangProperty");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_4_writer");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_4_writer);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_5_year");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_5_year);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_6_yearOfRelease");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_yearOfRelease);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_7_years");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_7_years);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_8_genre");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_8_genre);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
SymbolTable& getSymbolTable() override {
return symTable;
}
void executeSubroutine(std::string name, const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) override {
if (name == "genre_100_negation_subproof") {
subproof_0(args, ret, err);
}
if (name == "genre_100_subproof") {
subproof_1(args, ret, err);
}
if (name == "genre_101_negation_subproof") {
subproof_2(args, ret, err);
}
if (name == "genre_101_subproof") {
subproof_3(args, ret, err);
}
if (name == "genre_102_negation_subproof") {
subproof_4(args, ret, err);
}
if (name == "genre_102_subproof") {
subproof_5(args, ret, err);
}
if (name == "genre_103_negation_subproof") {
subproof_6(args, ret, err);
}
if (name == "genre_103_subproof") {
subproof_7(args, ret, err);
}
if (name == "genre_104_negation_subproof") {
subproof_8(args, ret, err);
}
if (name == "genre_104_subproof") {
subproof_9(args, ret, err);
}
if (name == "genre_105_negation_subproof") {
subproof_10(args, ret, err);
}
if (name == "genre_105_subproof") {
subproof_11(args, ret, err);
}
if (name == "genre_106_negation_subproof") {
subproof_12(args, ret, err);
}
if (name == "genre_106_subproof") {
subproof_13(args, ret, err);
}
if (name == "genre_107_negation_subproof") {
subproof_14(args, ret, err);
}
if (name == "genre_107_subproof") {
subproof_15(args, ret, err);
}
if (name == "genre_108_negation_subproof") {
subproof_16(args, ret, err);
}
if (name == "genre_108_subproof") {
subproof_17(args, ret, err);
}
if (name == "genre_109_negation_subproof") {
subproof_18(args, ret, err);
}
if (name == "genre_109_subproof") {
subproof_19(args, ret, err);
}
if (name == "genre_10_negation_subproof") {
subproof_20(args, ret, err);
}
if (name == "genre_10_subproof") {
subproof_21(args, ret, err);
}
if (name == "genre_110_negation_subproof") {
subproof_22(args, ret, err);
}
if (name == "genre_110_subproof") {
subproof_23(args, ret, err);
}
if (name == "genre_111_negation_subproof") {
subproof_24(args, ret, err);
}
if (name == "genre_111_subproof") {
subproof_25(args, ret, err);
}
if (name == "genre_112_negation_subproof") {
subproof_26(args, ret, err);
}
if (name == "genre_112_subproof") {
subproof_27(args, ret, err);
}
if (name == "genre_113_negation_subproof") {
subproof_28(args, ret, err);
}
if (name == "genre_113_subproof") {
subproof_29(args, ret, err);
}
if (name == "genre_114_negation_subproof") {
subproof_30(args, ret, err);
}
if (name == "genre_114_subproof") {
subproof_31(args, ret, err);
}
if (name == "genre_115_negation_subproof") {
subproof_32(args, ret, err);
}
if (name == "genre_115_subproof") {
subproof_33(args, ret, err);
}
if (name == "genre_116_negation_subproof") {
subproof_34(args, ret, err);
}
if (name == "genre_116_subproof") {
subproof_35(args, ret, err);
}
if (name == "genre_117_negation_subproof") {
subproof_36(args, ret, err);
}
if (name == "genre_117_subproof") {
subproof_37(args, ret, err);
}
if (name == "genre_118_negation_subproof") {
subproof_38(args, ret, err);
}
if (name == "genre_118_subproof") {
subproof_39(args, ret, err);
}
if (name == "genre_119_negation_subproof") {
subproof_40(args, ret, err);
}
if (name == "genre_119_subproof") {
subproof_41(args, ret, err);
}
if (name == "genre_11_negation_subproof") {
subproof_42(args, ret, err);
}
if (name == "genre_11_subproof") {
subproof_43(args, ret, err);
}
if (name == "genre_120_negation_subproof") {
subproof_44(args, ret, err);
}
if (name == "genre_120_subproof") {
subproof_45(args, ret, err);
}
if (name == "genre_121_negation_subproof") {
subproof_46(args, ret, err);
}
if (name == "genre_121_subproof") {
subproof_47(args, ret, err);
}
if (name == "genre_122_negation_subproof") {
subproof_48(args, ret, err);
}
if (name == "genre_122_subproof") {
subproof_49(args, ret, err);
}
if (name == "genre_123_negation_subproof") {
subproof_50(args, ret, err);
}
if (name == "genre_123_subproof") {
subproof_51(args, ret, err);
}
if (name == "genre_124_negation_subproof") {
subproof_52(args, ret, err);
}
if (name == "genre_124_subproof") {
subproof_53(args, ret, err);
}
if (name == "genre_125_negation_subproof") {
subproof_54(args, ret, err);
}
if (name == "genre_125_subproof") {
subproof_55(args, ret, err);
}
if (name == "genre_126_negation_subproof") {
subproof_56(args, ret, err);
}
if (name == "genre_126_subproof") {
subproof_57(args, ret, err);
}
if (name == "genre_127_negation_subproof") {
subproof_58(args, ret, err);
}
if (name == "genre_127_subproof") {
subproof_59(args, ret, err);
}
if (name == "genre_128_negation_subproof") {
subproof_60(args, ret, err);
}
if (name == "genre_128_subproof") {
subproof_61(args, ret, err);
}
if (name == "genre_129_negation_subproof") {
subproof_62(args, ret, err);
}
if (name == "genre_129_subproof") {
subproof_63(args, ret, err);
}
if (name == "genre_12_negation_subproof") {
subproof_64(args, ret, err);
}
if (name == "genre_12_subproof") {
subproof_65(args, ret, err);
}
if (name == "genre_130_negation_subproof") {
subproof_66(args, ret, err);
}
if (name == "genre_130_subproof") {
subproof_67(args, ret, err);
}
if (name == "genre_131_negation_subproof") {
subproof_68(args, ret, err);
}
if (name == "genre_131_subproof") {
subproof_69(args, ret, err);
}
if (name == "genre_132_negation_subproof") {
subproof_70(args, ret, err);
}
if (name == "genre_132_subproof") {
subproof_71(args, ret, err);
}
if (name == "genre_133_negation_subproof") {
subproof_72(args, ret, err);
}
if (name == "genre_133_subproof") {
subproof_73(args, ret, err);
}
if (name == "genre_134_negation_subproof") {
subproof_74(args, ret, err);
}
if (name == "genre_134_subproof") {
subproof_75(args, ret, err);
}
if (name == "genre_135_negation_subproof") {
subproof_76(args, ret, err);
}
if (name == "genre_135_subproof") {
subproof_77(args, ret, err);
}
if (name == "genre_136_negation_subproof") {
subproof_78(args, ret, err);
}
if (name == "genre_136_subproof") {
subproof_79(args, ret, err);
}
if (name == "genre_137_negation_subproof") {
subproof_80(args, ret, err);
}
if (name == "genre_137_subproof") {
subproof_81(args, ret, err);
}
if (name == "genre_138_negation_subproof") {
subproof_82(args, ret, err);
}
if (name == "genre_138_subproof") {
subproof_83(args, ret, err);
}
if (name == "genre_139_negation_subproof") {
subproof_84(args, ret, err);
}
if (name == "genre_139_subproof") {
subproof_85(args, ret, err);
}
if (name == "genre_13_negation_subproof") {
subproof_86(args, ret, err);
}
if (name == "genre_13_subproof") {
subproof_87(args, ret, err);
}
if (name == "genre_140_negation_subproof") {
subproof_88(args, ret, err);
}
if (name == "genre_140_subproof") {
subproof_89(args, ret, err);
}
if (name == "genre_141_negation_subproof") {
subproof_90(args, ret, err);
}
if (name == "genre_141_subproof") {
subproof_91(args, ret, err);
}
if (name == "genre_142_negation_subproof") {
subproof_92(args, ret, err);
}
if (name == "genre_142_subproof") {
subproof_93(args, ret, err);
}
if (name == "genre_143_negation_subproof") {
subproof_94(args, ret, err);
}
if (name == "genre_143_subproof") {
subproof_95(args, ret, err);
}
if (name == "genre_144_negation_subproof") {
subproof_96(args, ret, err);
}
if (name == "genre_144_subproof") {
subproof_97(args, ret, err);
}
if (name == "genre_145_negation_subproof") {
subproof_98(args, ret, err);
}
if (name == "genre_145_subproof") {
subproof_99(args, ret, err);
}
if (name == "genre_146_negation_subproof") {
subproof_100(args, ret, err);
}
if (name == "genre_146_subproof") {
subproof_101(args, ret, err);
}
if (name == "genre_147_negation_subproof") {
subproof_102(args, ret, err);
}
if (name == "genre_147_subproof") {
subproof_103(args, ret, err);
}
if (name == "genre_148_negation_subproof") {
subproof_104(args, ret, err);
}
if (name == "genre_148_subproof") {
subproof_105(args, ret, err);
}
if (name == "genre_149_negation_subproof") {
subproof_106(args, ret, err);
}
if (name == "genre_149_subproof") {
subproof_107(args, ret, err);
}
if (name == "genre_14_negation_subproof") {
subproof_108(args, ret, err);
}
if (name == "genre_14_subproof") {
subproof_109(args, ret, err);
}
if (name == "genre_150_negation_subproof") {
subproof_110(args, ret, err);
}
if (name == "genre_150_subproof") {
subproof_111(args, ret, err);
}
if (name == "genre_151_negation_subproof") {
subproof_112(args, ret, err);
}
if (name == "genre_151_subproof") {
subproof_113(args, ret, err);
}
if (name == "genre_152_negation_subproof") {
subproof_114(args, ret, err);
}
if (name == "genre_152_subproof") {
subproof_115(args, ret, err);
}
if (name == "genre_153_negation_subproof") {
subproof_116(args, ret, err);
}
if (name == "genre_153_subproof") {
subproof_117(args, ret, err);
}
if (name == "genre_154_negation_subproof") {
subproof_118(args, ret, err);
}
if (name == "genre_154_subproof") {
subproof_119(args, ret, err);
}
if (name == "genre_155_negation_subproof") {
subproof_120(args, ret, err);
}
if (name == "genre_155_subproof") {
subproof_121(args, ret, err);
}
if (name == "genre_156_negation_subproof") {
subproof_122(args, ret, err);
}
if (name == "genre_156_subproof") {
subproof_123(args, ret, err);
}
if (name == "genre_157_negation_subproof") {
subproof_124(args, ret, err);
}
if (name == "genre_157_subproof") {
subproof_125(args, ret, err);
}
if (name == "genre_158_negation_subproof") {
subproof_126(args, ret, err);
}
if (name == "genre_158_subproof") {
subproof_127(args, ret, err);
}
if (name == "genre_159_negation_subproof") {
subproof_128(args, ret, err);
}
if (name == "genre_159_subproof") {
subproof_129(args, ret, err);
}
if (name == "genre_15_negation_subproof") {
subproof_130(args, ret, err);
}
if (name == "genre_15_subproof") {
subproof_131(args, ret, err);
}
if (name == "genre_160_negation_subproof") {
subproof_132(args, ret, err);
}
if (name == "genre_160_subproof") {
subproof_133(args, ret, err);
}
if (name == "genre_161_negation_subproof") {
subproof_134(args, ret, err);
}
if (name == "genre_161_subproof") {
subproof_135(args, ret, err);
}
if (name == "genre_162_negation_subproof") {
subproof_136(args, ret, err);
}
if (name == "genre_162_subproof") {
subproof_137(args, ret, err);
}
if (name == "genre_163_negation_subproof") {
subproof_138(args, ret, err);
}
if (name == "genre_163_subproof") {
subproof_139(args, ret, err);
}
if (name == "genre_164_negation_subproof") {
subproof_140(args, ret, err);
}
if (name == "genre_164_subproof") {
subproof_141(args, ret, err);
}
if (name == "genre_165_negation_subproof") {
subproof_142(args, ret, err);
}
if (name == "genre_165_subproof") {
subproof_143(args, ret, err);
}
if (name == "genre_166_negation_subproof") {
subproof_144(args, ret, err);
}
if (name == "genre_166_subproof") {
subproof_145(args, ret, err);
}
if (name == "genre_167_negation_subproof") {
subproof_146(args, ret, err);
}
if (name == "genre_167_subproof") {
subproof_147(args, ret, err);
}
if (name == "genre_168_negation_subproof") {
subproof_148(args, ret, err);
}
if (name == "genre_168_subproof") {
subproof_149(args, ret, err);
}
if (name == "genre_169_negation_subproof") {
subproof_150(args, ret, err);
}
if (name == "genre_169_subproof") {
subproof_151(args, ret, err);
}
if (name == "genre_16_negation_subproof") {
subproof_152(args, ret, err);
}
if (name == "genre_16_subproof") {
subproof_153(args, ret, err);
}
if (name == "genre_170_negation_subproof") {
subproof_154(args, ret, err);
}
if (name == "genre_170_subproof") {
subproof_155(args, ret, err);
}
if (name == "genre_171_negation_subproof") {
subproof_156(args, ret, err);
}
if (name == "genre_171_subproof") {
subproof_157(args, ret, err);
}
if (name == "genre_172_negation_subproof") {
subproof_158(args, ret, err);
}
if (name == "genre_172_subproof") {
subproof_159(args, ret, err);
}
if (name == "genre_173_negation_subproof") {
subproof_160(args, ret, err);
}
if (name == "genre_173_subproof") {
subproof_161(args, ret, err);
}
if (name == "genre_174_negation_subproof") {
subproof_162(args, ret, err);
}
if (name == "genre_174_subproof") {
subproof_163(args, ret, err);
}
if (name == "genre_175_negation_subproof") {
subproof_164(args, ret, err);
}
if (name == "genre_175_subproof") {
subproof_165(args, ret, err);
}
if (name == "genre_176_negation_subproof") {
subproof_166(args, ret, err);
}
if (name == "genre_176_subproof") {
subproof_167(args, ret, err);
}
if (name == "genre_177_negation_subproof") {
subproof_168(args, ret, err);
}
if (name == "genre_177_subproof") {
subproof_169(args, ret, err);
}
if (name == "genre_178_negation_subproof") {
subproof_170(args, ret, err);
}
if (name == "genre_178_subproof") {
subproof_171(args, ret, err);
}
if (name == "genre_179_negation_subproof") {
subproof_172(args, ret, err);
}
if (name == "genre_179_subproof") {
subproof_173(args, ret, err);
}
if (name == "genre_17_negation_subproof") {
subproof_174(args, ret, err);
}
if (name == "genre_17_subproof") {
subproof_175(args, ret, err);
}
if (name == "genre_180_negation_subproof") {
subproof_176(args, ret, err);
}
if (name == "genre_180_subproof") {
subproof_177(args, ret, err);
}
if (name == "genre_181_negation_subproof") {
subproof_178(args, ret, err);
}
if (name == "genre_181_subproof") {
subproof_179(args, ret, err);
}
if (name == "genre_182_negation_subproof") {
subproof_180(args, ret, err);
}
if (name == "genre_182_subproof") {
subproof_181(args, ret, err);
}
if (name == "genre_183_negation_subproof") {
subproof_182(args, ret, err);
}
if (name == "genre_183_subproof") {
subproof_183(args, ret, err);
}
if (name == "genre_184_negation_subproof") {
subproof_184(args, ret, err);
}
if (name == "genre_184_subproof") {
subproof_185(args, ret, err);
}
if (name == "genre_185_negation_subproof") {
subproof_186(args, ret, err);
}
if (name == "genre_185_subproof") {
subproof_187(args, ret, err);
}
if (name == "genre_186_negation_subproof") {
subproof_188(args, ret, err);
}
if (name == "genre_186_subproof") {
subproof_189(args, ret, err);
}
if (name == "genre_187_negation_subproof") {
subproof_190(args, ret, err);
}
if (name == "genre_187_subproof") {
subproof_191(args, ret, err);
}
if (name == "genre_188_negation_subproof") {
subproof_192(args, ret, err);
}
if (name == "genre_188_subproof") {
subproof_193(args, ret, err);
}
if (name == "genre_189_negation_subproof") {
subproof_194(args, ret, err);
}
if (name == "genre_189_subproof") {
subproof_195(args, ret, err);
}
if (name == "genre_18_negation_subproof") {
subproof_196(args, ret, err);
}
if (name == "genre_18_subproof") {
subproof_197(args, ret, err);
}
if (name == "genre_190_negation_subproof") {
subproof_198(args, ret, err);
}
if (name == "genre_190_subproof") {
subproof_199(args, ret, err);
}
if (name == "genre_191_negation_subproof") {
subproof_200(args, ret, err);
}
if (name == "genre_191_subproof") {
subproof_201(args, ret, err);
}
if (name == "genre_192_negation_subproof") {
subproof_202(args, ret, err);
}
if (name == "genre_192_subproof") {
subproof_203(args, ret, err);
}
if (name == "genre_193_negation_subproof") {
subproof_204(args, ret, err);
}
if (name == "genre_193_subproof") {
subproof_205(args, ret, err);
}
if (name == "genre_194_negation_subproof") {
subproof_206(args, ret, err);
}
if (name == "genre_194_subproof") {
subproof_207(args, ret, err);
}
if (name == "genre_195_negation_subproof") {
subproof_208(args, ret, err);
}
if (name == "genre_195_subproof") {
subproof_209(args, ret, err);
}
if (name == "genre_196_negation_subproof") {
subproof_210(args, ret, err);
}
if (name == "genre_196_subproof") {
subproof_211(args, ret, err);
}
if (name == "genre_197_negation_subproof") {
subproof_212(args, ret, err);
}
if (name == "genre_197_subproof") {
subproof_213(args, ret, err);
}
if (name == "genre_198_negation_subproof") {
subproof_214(args, ret, err);
}
if (name == "genre_198_subproof") {
subproof_215(args, ret, err);
}
if (name == "genre_199_negation_subproof") {
subproof_216(args, ret, err);
}
if (name == "genre_199_subproof") {
subproof_217(args, ret, err);
}
if (name == "genre_19_negation_subproof") {
subproof_218(args, ret, err);
}
if (name == "genre_19_subproof") {
subproof_219(args, ret, err);
}
if (name == "genre_1_negation_subproof") {
subproof_220(args, ret, err);
}
if (name == "genre_1_subproof") {
subproof_221(args, ret, err);
}
if (name == "genre_200_negation_subproof") {
subproof_222(args, ret, err);
}
if (name == "genre_200_subproof") {
subproof_223(args, ret, err);
}
if (name == "genre_201_negation_subproof") {
subproof_224(args, ret, err);
}
if (name == "genre_201_subproof") {
subproof_225(args, ret, err);
}
if (name == "genre_202_negation_subproof") {
subproof_226(args, ret, err);
}
if (name == "genre_202_subproof") {
subproof_227(args, ret, err);
}
if (name == "genre_203_negation_subproof") {
subproof_228(args, ret, err);
}
if (name == "genre_203_subproof") {
subproof_229(args, ret, err);
}
if (name == "genre_204_negation_subproof") {
subproof_230(args, ret, err);
}
if (name == "genre_204_subproof") {
subproof_231(args, ret, err);
}
if (name == "genre_205_negation_subproof") {
subproof_232(args, ret, err);
}
if (name == "genre_205_subproof") {
subproof_233(args, ret, err);
}
if (name == "genre_206_negation_subproof") {
subproof_234(args, ret, err);
}
if (name == "genre_206_subproof") {
subproof_235(args, ret, err);
}
if (name == "genre_207_negation_subproof") {
subproof_236(args, ret, err);
}
if (name == "genre_207_subproof") {
subproof_237(args, ret, err);
}
if (name == "genre_208_negation_subproof") {
subproof_238(args, ret, err);
}
if (name == "genre_208_subproof") {
subproof_239(args, ret, err);
}
if (name == "genre_209_negation_subproof") {
subproof_240(args, ret, err);
}
if (name == "genre_209_subproof") {
subproof_241(args, ret, err);
}
if (name == "genre_20_negation_subproof") {
subproof_242(args, ret, err);
}
if (name == "genre_20_subproof") {
subproof_243(args, ret, err);
}
if (name == "genre_210_negation_subproof") {
subproof_244(args, ret, err);
}
if (name == "genre_210_subproof") {
subproof_245(args, ret, err);
}
if (name == "genre_211_negation_subproof") {
subproof_246(args, ret, err);
}
if (name == "genre_211_subproof") {
subproof_247(args, ret, err);
}
if (name == "genre_212_negation_subproof") {
subproof_248(args, ret, err);
}
if (name == "genre_212_subproof") {
subproof_249(args, ret, err);
}
if (name == "genre_213_negation_subproof") {
subproof_250(args, ret, err);
}
if (name == "genre_213_subproof") {
subproof_251(args, ret, err);
}
if (name == "genre_214_negation_subproof") {
subproof_252(args, ret, err);
}
if (name == "genre_214_subproof") {
subproof_253(args, ret, err);
}
if (name == "genre_215_negation_subproof") {
subproof_254(args, ret, err);
}
if (name == "genre_215_subproof") {
subproof_255(args, ret, err);
}
if (name == "genre_216_negation_subproof") {
subproof_256(args, ret, err);
}
if (name == "genre_216_subproof") {
subproof_257(args, ret, err);
}
if (name == "genre_217_negation_subproof") {
subproof_258(args, ret, err);
}
if (name == "genre_217_subproof") {
subproof_259(args, ret, err);
}
if (name == "genre_218_negation_subproof") {
subproof_260(args, ret, err);
}
if (name == "genre_218_subproof") {
subproof_261(args, ret, err);
}
if (name == "genre_219_negation_subproof") {
subproof_262(args, ret, err);
}
if (name == "genre_219_subproof") {
subproof_263(args, ret, err);
}
if (name == "genre_21_negation_subproof") {
subproof_264(args, ret, err);
}
if (name == "genre_21_subproof") {
subproof_265(args, ret, err);
}
if (name == "genre_220_negation_subproof") {
subproof_266(args, ret, err);
}
if (name == "genre_220_subproof") {
subproof_267(args, ret, err);
}
if (name == "genre_221_negation_subproof") {
subproof_268(args, ret, err);
}
if (name == "genre_221_subproof") {
subproof_269(args, ret, err);
}
if (name == "genre_222_negation_subproof") {
subproof_270(args, ret, err);
}
if (name == "genre_222_subproof") {
subproof_271(args, ret, err);
}
if (name == "genre_223_negation_subproof") {
subproof_272(args, ret, err);
}
if (name == "genre_223_subproof") {
subproof_273(args, ret, err);
}
if (name == "genre_224_negation_subproof") {
subproof_274(args, ret, err);
}
if (name == "genre_224_subproof") {
subproof_275(args, ret, err);
}
if (name == "genre_225_negation_subproof") {
subproof_276(args, ret, err);
}
if (name == "genre_225_subproof") {
subproof_277(args, ret, err);
}
if (name == "genre_226_negation_subproof") {
subproof_278(args, ret, err);
}
if (name == "genre_226_subproof") {
subproof_279(args, ret, err);
}
if (name == "genre_227_negation_subproof") {
subproof_280(args, ret, err);
}
if (name == "genre_227_subproof") {
subproof_281(args, ret, err);
}
if (name == "genre_228_negation_subproof") {
subproof_282(args, ret, err);
}
if (name == "genre_228_subproof") {
subproof_283(args, ret, err);
}
if (name == "genre_229_negation_subproof") {
subproof_284(args, ret, err);
}
if (name == "genre_229_subproof") {
subproof_285(args, ret, err);
}
if (name == "genre_22_negation_subproof") {
subproof_286(args, ret, err);
}
if (name == "genre_22_subproof") {
subproof_287(args, ret, err);
}
if (name == "genre_230_negation_subproof") {
subproof_288(args, ret, err);
}
if (name == "genre_230_subproof") {
subproof_289(args, ret, err);
}
if (name == "genre_231_negation_subproof") {
subproof_290(args, ret, err);
}
if (name == "genre_231_subproof") {
subproof_291(args, ret, err);
}
if (name == "genre_232_negation_subproof") {
subproof_292(args, ret, err);
}
if (name == "genre_232_subproof") {
subproof_293(args, ret, err);
}
if (name == "genre_233_negation_subproof") {
subproof_294(args, ret, err);
}
if (name == "genre_233_subproof") {
subproof_295(args, ret, err);
}
if (name == "genre_234_negation_subproof") {
subproof_296(args, ret, err);
}
if (name == "genre_234_subproof") {
subproof_297(args, ret, err);
}
if (name == "genre_235_negation_subproof") {
subproof_298(args, ret, err);
}
if (name == "genre_235_subproof") {
subproof_299(args, ret, err);
}
if (name == "genre_236_negation_subproof") {
subproof_300(args, ret, err);
}
if (name == "genre_236_subproof") {
subproof_301(args, ret, err);
}
if (name == "genre_237_negation_subproof") {
subproof_302(args, ret, err);
}
if (name == "genre_237_subproof") {
subproof_303(args, ret, err);
}
if (name == "genre_238_negation_subproof") {
subproof_304(args, ret, err);
}
if (name == "genre_238_subproof") {
subproof_305(args, ret, err);
}
if (name == "genre_239_negation_subproof") {
subproof_306(args, ret, err);
}
if (name == "genre_239_subproof") {
subproof_307(args, ret, err);
}
if (name == "genre_23_negation_subproof") {
subproof_308(args, ret, err);
}
if (name == "genre_23_subproof") {
subproof_309(args, ret, err);
}
if (name == "genre_240_negation_subproof") {
subproof_310(args, ret, err);
}
if (name == "genre_240_subproof") {
subproof_311(args, ret, err);
}
if (name == "genre_241_negation_subproof") {
subproof_312(args, ret, err);
}
if (name == "genre_241_subproof") {
subproof_313(args, ret, err);
}
if (name == "genre_242_negation_subproof") {
subproof_314(args, ret, err);
}
if (name == "genre_242_subproof") {
subproof_315(args, ret, err);
}
if (name == "genre_243_negation_subproof") {
subproof_316(args, ret, err);
}
if (name == "genre_243_subproof") {
subproof_317(args, ret, err);
}
if (name == "genre_244_negation_subproof") {
subproof_318(args, ret, err);
}
if (name == "genre_244_subproof") {
subproof_319(args, ret, err);
}
if (name == "genre_245_negation_subproof") {
subproof_320(args, ret, err);
}
if (name == "genre_245_subproof") {
subproof_321(args, ret, err);
}
if (name == "genre_246_negation_subproof") {
subproof_322(args, ret, err);
}
if (name == "genre_246_subproof") {
subproof_323(args, ret, err);
}
if (name == "genre_247_negation_subproof") {
subproof_324(args, ret, err);
}
if (name == "genre_247_subproof") {
subproof_325(args, ret, err);
}
if (name == "genre_248_negation_subproof") {
subproof_326(args, ret, err);
}
if (name == "genre_248_subproof") {
subproof_327(args, ret, err);
}
if (name == "genre_249_negation_subproof") {
subproof_328(args, ret, err);
}
if (name == "genre_249_subproof") {
subproof_329(args, ret, err);
}
if (name == "genre_24_negation_subproof") {
subproof_330(args, ret, err);
}
if (name == "genre_24_subproof") {
subproof_331(args, ret, err);
}
if (name == "genre_250_negation_subproof") {
subproof_332(args, ret, err);
}
if (name == "genre_250_subproof") {
subproof_333(args, ret, err);
}
if (name == "genre_251_negation_subproof") {
subproof_334(args, ret, err);
}
if (name == "genre_251_subproof") {
subproof_335(args, ret, err);
}
if (name == "genre_252_negation_subproof") {
subproof_336(args, ret, err);
}
if (name == "genre_252_subproof") {
subproof_337(args, ret, err);
}
if (name == "genre_253_negation_subproof") {
subproof_338(args, ret, err);
}
if (name == "genre_253_subproof") {
subproof_339(args, ret, err);
}
if (name == "genre_254_negation_subproof") {
subproof_340(args, ret, err);
}
if (name == "genre_254_subproof") {
subproof_341(args, ret, err);
}
if (name == "genre_255_negation_subproof") {
subproof_342(args, ret, err);
}
if (name == "genre_255_subproof") {
subproof_343(args, ret, err);
}
if (name == "genre_256_negation_subproof") {
subproof_344(args, ret, err);
}
if (name == "genre_256_subproof") {
subproof_345(args, ret, err);
}
if (name == "genre_257_negation_subproof") {
subproof_346(args, ret, err);
}
if (name == "genre_257_subproof") {
subproof_347(args, ret, err);
}
if (name == "genre_258_negation_subproof") {
subproof_348(args, ret, err);
}
if (name == "genre_258_subproof") {
subproof_349(args, ret, err);
}
if (name == "genre_259_negation_subproof") {
subproof_350(args, ret, err);
}
if (name == "genre_259_subproof") {
subproof_351(args, ret, err);
}
if (name == "genre_25_negation_subproof") {
subproof_352(args, ret, err);
}
if (name == "genre_25_subproof") {
subproof_353(args, ret, err);
}
if (name == "genre_260_negation_subproof") {
subproof_354(args, ret, err);
}
if (name == "genre_260_subproof") {
subproof_355(args, ret, err);
}
if (name == "genre_261_negation_subproof") {
subproof_356(args, ret, err);
}
if (name == "genre_261_subproof") {
subproof_357(args, ret, err);
}
if (name == "genre_262_negation_subproof") {
subproof_358(args, ret, err);
}
if (name == "genre_262_subproof") {
subproof_359(args, ret, err);
}
if (name == "genre_263_negation_subproof") {
subproof_360(args, ret, err);
}
if (name == "genre_263_subproof") {
subproof_361(args, ret, err);
}
if (name == "genre_264_negation_subproof") {
subproof_362(args, ret, err);
}
if (name == "genre_264_subproof") {
subproof_363(args, ret, err);
}
if (name == "genre_265_negation_subproof") {
subproof_364(args, ret, err);
}
if (name == "genre_265_subproof") {
subproof_365(args, ret, err);
}
if (name == "genre_266_negation_subproof") {
subproof_366(args, ret, err);
}
if (name == "genre_266_subproof") {
subproof_367(args, ret, err);
}
if (name == "genre_267_negation_subproof") {
subproof_368(args, ret, err);
}
if (name == "genre_267_subproof") {
subproof_369(args, ret, err);
}
if (name == "genre_268_negation_subproof") {
subproof_370(args, ret, err);
}
if (name == "genre_268_subproof") {
subproof_371(args, ret, err);
}
if (name == "genre_269_negation_subproof") {
subproof_372(args, ret, err);
}
if (name == "genre_269_subproof") {
subproof_373(args, ret, err);
}
if (name == "genre_26_negation_subproof") {
subproof_374(args, ret, err);
}
if (name == "genre_26_subproof") {
subproof_375(args, ret, err);
}
if (name == "genre_270_negation_subproof") {
subproof_376(args, ret, err);
}
if (name == "genre_270_subproof") {
subproof_377(args, ret, err);
}
if (name == "genre_271_negation_subproof") {
subproof_378(args, ret, err);
}
if (name == "genre_271_subproof") {
subproof_379(args, ret, err);
}
if (name == "genre_272_negation_subproof") {
subproof_380(args, ret, err);
}
if (name == "genre_272_subproof") {
subproof_381(args, ret, err);
}
if (name == "genre_273_negation_subproof") {
subproof_382(args, ret, err);
}
if (name == "genre_273_subproof") {
subproof_383(args, ret, err);
}
if (name == "genre_274_negation_subproof") {
subproof_384(args, ret, err);
}
if (name == "genre_274_subproof") {
subproof_385(args, ret, err);
}
if (name == "genre_275_negation_subproof") {
subproof_386(args, ret, err);
}
if (name == "genre_275_subproof") {
subproof_387(args, ret, err);
}
if (name == "genre_276_negation_subproof") {
subproof_388(args, ret, err);
}
if (name == "genre_276_subproof") {
subproof_389(args, ret, err);
}
if (name == "genre_277_negation_subproof") {
subproof_390(args, ret, err);
}
if (name == "genre_277_subproof") {
subproof_391(args, ret, err);
}
if (name == "genre_278_negation_subproof") {
subproof_392(args, ret, err);
}
if (name == "genre_278_subproof") {
subproof_393(args, ret, err);
}
if (name == "genre_279_negation_subproof") {
subproof_394(args, ret, err);
}
if (name == "genre_279_subproof") {
subproof_395(args, ret, err);
}
if (name == "genre_27_negation_subproof") {
subproof_396(args, ret, err);
}
if (name == "genre_27_subproof") {
subproof_397(args, ret, err);
}
if (name == "genre_280_negation_subproof") {
subproof_398(args, ret, err);
}
if (name == "genre_280_subproof") {
subproof_399(args, ret, err);
}
if (name == "genre_281_negation_subproof") {
subproof_400(args, ret, err);
}
if (name == "genre_281_subproof") {
subproof_401(args, ret, err);
}
if (name == "genre_282_negation_subproof") {
subproof_402(args, ret, err);
}
if (name == "genre_282_subproof") {
subproof_403(args, ret, err);
}
if (name == "genre_283_negation_subproof") {
subproof_404(args, ret, err);
}
if (name == "genre_283_subproof") {
subproof_405(args, ret, err);
}
if (name == "genre_284_negation_subproof") {
subproof_406(args, ret, err);
}
if (name == "genre_284_subproof") {
subproof_407(args, ret, err);
}
if (name == "genre_285_negation_subproof") {
subproof_408(args, ret, err);
}
if (name == "genre_285_subproof") {
subproof_409(args, ret, err);
}
if (name == "genre_286_negation_subproof") {
subproof_410(args, ret, err);
}
if (name == "genre_286_subproof") {
subproof_411(args, ret, err);
}
if (name == "genre_287_negation_subproof") {
subproof_412(args, ret, err);
}
if (name == "genre_287_subproof") {
subproof_413(args, ret, err);
}
if (name == "genre_28_negation_subproof") {
subproof_414(args, ret, err);
}
if (name == "genre_28_subproof") {
subproof_415(args, ret, err);
}
if (name == "genre_29_negation_subproof") {
subproof_416(args, ret, err);
}
if (name == "genre_29_subproof") {
subproof_417(args, ret, err);
}
if (name == "genre_2_negation_subproof") {
subproof_418(args, ret, err);
}
if (name == "genre_2_subproof") {
subproof_419(args, ret, err);
}
if (name == "genre_30_negation_subproof") {
subproof_420(args, ret, err);
}
if (name == "genre_30_subproof") {
subproof_421(args, ret, err);
}
if (name == "genre_31_negation_subproof") {
subproof_422(args, ret, err);
}
if (name == "genre_31_subproof") {
subproof_423(args, ret, err);
}
if (name == "genre_32_negation_subproof") {
subproof_424(args, ret, err);
}
if (name == "genre_32_subproof") {
subproof_425(args, ret, err);
}
if (name == "genre_33_negation_subproof") {
subproof_426(args, ret, err);
}
if (name == "genre_33_subproof") {
subproof_427(args, ret, err);
}
if (name == "genre_34_negation_subproof") {
subproof_428(args, ret, err);
}
if (name == "genre_34_subproof") {
subproof_429(args, ret, err);
}
if (name == "genre_35_negation_subproof") {
subproof_430(args, ret, err);
}
if (name == "genre_35_subproof") {
subproof_431(args, ret, err);
}
if (name == "genre_36_negation_subproof") {
subproof_432(args, ret, err);
}
if (name == "genre_36_subproof") {
subproof_433(args, ret, err);
}
if (name == "genre_37_negation_subproof") {
subproof_434(args, ret, err);
}
if (name == "genre_37_subproof") {
subproof_435(args, ret, err);
}
if (name == "genre_38_negation_subproof") {
subproof_436(args, ret, err);
}
if (name == "genre_38_subproof") {
subproof_437(args, ret, err);
}
if (name == "genre_39_negation_subproof") {
subproof_438(args, ret, err);
}
if (name == "genre_39_subproof") {
subproof_439(args, ret, err);
}
if (name == "genre_3_negation_subproof") {
subproof_440(args, ret, err);
}
if (name == "genre_3_subproof") {
subproof_441(args, ret, err);
}
if (name == "genre_40_negation_subproof") {
subproof_442(args, ret, err);
}
if (name == "genre_40_subproof") {
subproof_443(args, ret, err);
}
if (name == "genre_41_negation_subproof") {
subproof_444(args, ret, err);
}
if (name == "genre_41_subproof") {
subproof_445(args, ret, err);
}
if (name == "genre_42_negation_subproof") {
subproof_446(args, ret, err);
}
if (name == "genre_42_subproof") {
subproof_447(args, ret, err);
}
if (name == "genre_43_negation_subproof") {
subproof_448(args, ret, err);
}
if (name == "genre_43_subproof") {
subproof_449(args, ret, err);
}
if (name == "genre_44_negation_subproof") {
subproof_450(args, ret, err);
}
if (name == "genre_44_subproof") {
subproof_451(args, ret, err);
}
if (name == "genre_45_negation_subproof") {
subproof_452(args, ret, err);
}
if (name == "genre_45_subproof") {
subproof_453(args, ret, err);
}
if (name == "genre_46_negation_subproof") {
subproof_454(args, ret, err);
}
if (name == "genre_46_subproof") {
subproof_455(args, ret, err);
}
if (name == "genre_47_negation_subproof") {
subproof_456(args, ret, err);
}
if (name == "genre_47_subproof") {
subproof_457(args, ret, err);
}
if (name == "genre_48_negation_subproof") {
subproof_458(args, ret, err);
}
if (name == "genre_48_subproof") {
subproof_459(args, ret, err);
}
if (name == "genre_49_negation_subproof") {
subproof_460(args, ret, err);
}
if (name == "genre_49_subproof") {
subproof_461(args, ret, err);
}
if (name == "genre_4_negation_subproof") {
subproof_462(args, ret, err);
}
if (name == "genre_4_subproof") {
subproof_463(args, ret, err);
}
if (name == "genre_50_negation_subproof") {
subproof_464(args, ret, err);
}
if (name == "genre_50_subproof") {
subproof_465(args, ret, err);
}
if (name == "genre_51_negation_subproof") {
subproof_466(args, ret, err);
}
if (name == "genre_51_subproof") {
subproof_467(args, ret, err);
}
if (name == "genre_52_negation_subproof") {
subproof_468(args, ret, err);
}
if (name == "genre_52_subproof") {
subproof_469(args, ret, err);
}
if (name == "genre_53_negation_subproof") {
subproof_470(args, ret, err);
}
if (name == "genre_53_subproof") {
subproof_471(args, ret, err);
}
if (name == "genre_54_negation_subproof") {
subproof_472(args, ret, err);
}
if (name == "genre_54_subproof") {
subproof_473(args, ret, err);
}
if (name == "genre_55_negation_subproof") {
subproof_474(args, ret, err);
}
if (name == "genre_55_subproof") {
subproof_475(args, ret, err);
}
if (name == "genre_56_negation_subproof") {
subproof_476(args, ret, err);
}
if (name == "genre_56_subproof") {
subproof_477(args, ret, err);
}
if (name == "genre_57_negation_subproof") {
subproof_478(args, ret, err);
}
if (name == "genre_57_subproof") {
subproof_479(args, ret, err);
}
if (name == "genre_58_negation_subproof") {
subproof_480(args, ret, err);
}
if (name == "genre_58_subproof") {
subproof_481(args, ret, err);
}
if (name == "genre_59_negation_subproof") {
subproof_482(args, ret, err);
}
if (name == "genre_59_subproof") {
subproof_483(args, ret, err);
}
if (name == "genre_5_negation_subproof") {
subproof_484(args, ret, err);
}
if (name == "genre_5_subproof") {
subproof_485(args, ret, err);
}
if (name == "genre_60_negation_subproof") {
subproof_486(args, ret, err);
}
if (name == "genre_60_subproof") {
subproof_487(args, ret, err);
}
if (name == "genre_61_negation_subproof") {
subproof_488(args, ret, err);
}
if (name == "genre_61_subproof") {
subproof_489(args, ret, err);
}
if (name == "genre_62_negation_subproof") {
subproof_490(args, ret, err);
}
if (name == "genre_62_subproof") {
subproof_491(args, ret, err);
}
if (name == "genre_63_negation_subproof") {
subproof_492(args, ret, err);
}
if (name == "genre_63_subproof") {
subproof_493(args, ret, err);
}
if (name == "genre_64_negation_subproof") {
subproof_494(args, ret, err);
}
if (name == "genre_64_subproof") {
subproof_495(args, ret, err);
}
if (name == "genre_65_negation_subproof") {
subproof_496(args, ret, err);
}
if (name == "genre_65_subproof") {
subproof_497(args, ret, err);
}
if (name == "genre_66_negation_subproof") {
subproof_498(args, ret, err);
}
if (name == "genre_66_subproof") {
subproof_499(args, ret, err);
}
if (name == "genre_67_negation_subproof") {
subproof_500(args, ret, err);
}
if (name == "genre_67_subproof") {
subproof_501(args, ret, err);
}
if (name == "genre_68_negation_subproof") {
subproof_502(args, ret, err);
}
if (name == "genre_68_subproof") {
subproof_503(args, ret, err);
}
if (name == "genre_69_negation_subproof") {
subproof_504(args, ret, err);
}
if (name == "genre_69_subproof") {
subproof_505(args, ret, err);
}
if (name == "genre_6_negation_subproof") {
subproof_506(args, ret, err);
}
if (name == "genre_6_subproof") {
subproof_507(args, ret, err);
}
if (name == "genre_70_negation_subproof") {
subproof_508(args, ret, err);
}
if (name == "genre_70_subproof") {
subproof_509(args, ret, err);
}
if (name == "genre_71_negation_subproof") {
subproof_510(args, ret, err);
}
if (name == "genre_71_subproof") {
subproof_511(args, ret, err);
}
if (name == "genre_72_negation_subproof") {
subproof_512(args, ret, err);
}
if (name == "genre_72_subproof") {
subproof_513(args, ret, err);
}
if (name == "genre_73_negation_subproof") {
subproof_514(args, ret, err);
}
if (name == "genre_73_subproof") {
subproof_515(args, ret, err);
}
if (name == "genre_74_negation_subproof") {
subproof_516(args, ret, err);
}
if (name == "genre_74_subproof") {
subproof_517(args, ret, err);
}
if (name == "genre_75_negation_subproof") {
subproof_518(args, ret, err);
}
if (name == "genre_75_subproof") {
subproof_519(args, ret, err);
}
if (name == "genre_76_negation_subproof") {
subproof_520(args, ret, err);
}
if (name == "genre_76_subproof") {
subproof_521(args, ret, err);
}
if (name == "genre_77_negation_subproof") {
subproof_522(args, ret, err);
}
if (name == "genre_77_subproof") {
subproof_523(args, ret, err);
}
if (name == "genre_78_negation_subproof") {
subproof_524(args, ret, err);
}
if (name == "genre_78_subproof") {
subproof_525(args, ret, err);
}
if (name == "genre_79_negation_subproof") {
subproof_526(args, ret, err);
}
if (name == "genre_79_subproof") {
subproof_527(args, ret, err);
}
if (name == "genre_7_negation_subproof") {
subproof_528(args, ret, err);
}
if (name == "genre_7_subproof") {
subproof_529(args, ret, err);
}
if (name == "genre_80_negation_subproof") {
subproof_530(args, ret, err);
}
if (name == "genre_80_subproof") {
subproof_531(args, ret, err);
}
if (name == "genre_81_negation_subproof") {
subproof_532(args, ret, err);
}
if (name == "genre_81_subproof") {
subproof_533(args, ret, err);
}
if (name == "genre_82_negation_subproof") {
subproof_534(args, ret, err);
}
if (name == "genre_82_subproof") {
subproof_535(args, ret, err);
}
if (name == "genre_83_negation_subproof") {
subproof_536(args, ret, err);
}
if (name == "genre_83_subproof") {
subproof_537(args, ret, err);
}
if (name == "genre_84_negation_subproof") {
subproof_538(args, ret, err);
}
if (name == "genre_84_subproof") {
subproof_539(args, ret, err);
}
if (name == "genre_85_negation_subproof") {
subproof_540(args, ret, err);
}
if (name == "genre_85_subproof") {
subproof_541(args, ret, err);
}
if (name == "genre_86_negation_subproof") {
subproof_542(args, ret, err);
}
if (name == "genre_86_subproof") {
subproof_543(args, ret, err);
}
if (name == "genre_87_negation_subproof") {
subproof_544(args, ret, err);
}
if (name == "genre_87_subproof") {
subproof_545(args, ret, err);
}
if (name == "genre_88_negation_subproof") {
subproof_546(args, ret, err);
}
if (name == "genre_88_subproof") {
subproof_547(args, ret, err);
}
if (name == "genre_89_negation_subproof") {
subproof_548(args, ret, err);
}
if (name == "genre_89_subproof") {
subproof_549(args, ret, err);
}
if (name == "genre_8_negation_subproof") {
subproof_550(args, ret, err);
}
if (name == "genre_8_subproof") {
subproof_551(args, ret, err);
}
if (name == "genre_90_negation_subproof") {
subproof_552(args, ret, err);
}
if (name == "genre_90_subproof") {
subproof_553(args, ret, err);
}
if (name == "genre_91_negation_subproof") {
subproof_554(args, ret, err);
}
if (name == "genre_91_subproof") {
subproof_555(args, ret, err);
}
if (name == "genre_92_negation_subproof") {
subproof_556(args, ret, err);
}
if (name == "genre_92_subproof") {
subproof_557(args, ret, err);
}
if (name == "genre_93_negation_subproof") {
subproof_558(args, ret, err);
}
if (name == "genre_93_subproof") {
subproof_559(args, ret, err);
}
if (name == "genre_94_negation_subproof") {
subproof_560(args, ret, err);
}
if (name == "genre_94_subproof") {
subproof_561(args, ret, err);
}
if (name == "genre_95_negation_subproof") {
subproof_562(args, ret, err);
}
if (name == "genre_95_subproof") {
subproof_563(args, ret, err);
}
if (name == "genre_96_negation_subproof") {
subproof_564(args, ret, err);
}
if (name == "genre_96_subproof") {
subproof_565(args, ret, err);
}
if (name == "genre_97_negation_subproof") {
subproof_566(args, ret, err);
}
if (name == "genre_97_subproof") {
subproof_567(args, ret, err);
}
if (name == "genre_98_negation_subproof") {
subproof_568(args, ret, err);
}
if (name == "genre_98_subproof") {
subproof_569(args, ret, err);
}
if (name == "genre_99_negation_subproof") {
subproof_570(args, ret, err);
}
if (name == "genre_99_subproof") {
subproof_571(args, ret, err);
}
if (name == "genre_9_negation_subproof") {
subproof_572(args, ret, err);
}
if (name == "genre_9_subproof") {
subproof_573(args, ret, err);
}
}
void subproof_0(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(109),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(109));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(109),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(109));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_2(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(110),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(110));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_3(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(110),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(110));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_4(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(111),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(111));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_5(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(111),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(111));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_6(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(112),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(112));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_7(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(112),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(112));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_8(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(113),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(113));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_9(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(113),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(113));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_10(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(114),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(114));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_11(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(114),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(114));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_12(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(115),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(115));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_13(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(115),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(115));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_14(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(116),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(116));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_15(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(116),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(116));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_16(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(117),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(117));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_17(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(117));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_18(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(118),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(118));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_19(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(118));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_20(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_21(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_22(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(119),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(119));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_23(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(119),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(119));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_24(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(120),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(120));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_25(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(120),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(120));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_26(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(121),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(121));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_27(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(121),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(121));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_28(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(122),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(122));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_29(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(122),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(122));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_30(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(123),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(123));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_31(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(123),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(123));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_32(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(124),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(124));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_33(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(124),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(124));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_34(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(125),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(125));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_35(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(125),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(125));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_36(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(126),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(126));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_37(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(126),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(126));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_38(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(127),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(127));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_39(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(127),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(127));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_40(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(128),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(128));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_41(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(128),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(128));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_42(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_43(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_44(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(129),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(129));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_45(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(129),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(129));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_46(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(130),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(130));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_47(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(130));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_48(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(131),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(131));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_49(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(131),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(131));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_50(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(132),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(132));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_51(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(132),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(132));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_52(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(133),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(133));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_53(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(133),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(133));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_54(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(134),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(134));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_55(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(134),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(134));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_56(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(135),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(135));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_57(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(135),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(135));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_58(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(136),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(136));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_59(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(136),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(136));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_60(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(137),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(137));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_61(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(137),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(137));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_62(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(138),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(138));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_63(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(138),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(138));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_64(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(13),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(13));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_65(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(13),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(13));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_66(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(139),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(139));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_67(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(139),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(139));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_68(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(140),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(140));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_69(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(140),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(140));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_70(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(141),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(141));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_71(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(141),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(141));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_72(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(142),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(142));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_73(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(142),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(142));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_74(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(143),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(143));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_75(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(143),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(143));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_76(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(144),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(144));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_77(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(144),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(144));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_78(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(145),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(145));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_79(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(145),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(145));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_80(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(147),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(147));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_81(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(147),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(147));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_82(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(148),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(148));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_83(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(148));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_84(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(151),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(151));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_85(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(151),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(151));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_86(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(14),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(14));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_87(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(14),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(14));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_88(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(152),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(152));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_89(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(152),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(152));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_90(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(153),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(153));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_91(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(153),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(153));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_92(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(154),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(154));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_93(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(154),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(154));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_94(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(155),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(155));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_95(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(155),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(155));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_96(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(156),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(156));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_97(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(156),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(156));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_98(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(159),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(159));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_99(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(159),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(159));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(160),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(160));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(160),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(160));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(163),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(163));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(163),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(163));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(164),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(164));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(164),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(164));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(165),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(165));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(165),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(165));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(15),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(166),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(166));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(166),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(166));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(167),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(167));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(167));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(168),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(168));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(168),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(168));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(170),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(170));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(170));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(171),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(171));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(171),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(171));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(172),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(172));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(172),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(172));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(173),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(173));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(173),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(173));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(174),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(174));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(174),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(174));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(175),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(175));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(175),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(175));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(176),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(176));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(176),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(176));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(16),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(16));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(16),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(16));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(177),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(177));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(177),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(177));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(178),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(178));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(178),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(178));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(179),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(179));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(179),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(179));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(180),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(180));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(180),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(180));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(181),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(181));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(181),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(181));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(182),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(182));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(182),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(182));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(183),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(183));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(183),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(183));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(184),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(184));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(184),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(184));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(185),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(185));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(185),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(185));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(186),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(186));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(186),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(186));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(17),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(17));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(17),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(17));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(187),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(187));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(187),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(187));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(188),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(188));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(188),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(188));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(189),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(189));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(189),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(189));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(190),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(190));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(190),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(190));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(191),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(191));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(191),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(191));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(192),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(192));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(192),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(192));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(193),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(193));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(193),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(193));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(194),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(194));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(194),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(194));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(195),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(195));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(195),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(195));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(196),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(196));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(196),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(196));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(18),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(18));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(18),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(18));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(197),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(197));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(197),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(197));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(198),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(198));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(198),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(198));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(199),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(199));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(199),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(199));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(200),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(200));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(200),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(200));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(201),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(201));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(201),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(201));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(202),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(202));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(202),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(202));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(203),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(203));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(203),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(203));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(204),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(204));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(204),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(204));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(205),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(205));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(205),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(205));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(207),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(207));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(207),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(207));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(19),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(208),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(208));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(208),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(208));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(211),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(211));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(211),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(211));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(212),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(212));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(212),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(212));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(213),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(213));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(213),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(213));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(214),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(214));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(214),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(214));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(215),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(215));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(215),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(215));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(216),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(216));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(216),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(216));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(219),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(219));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(219));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(220),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(220));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(220),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(220));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(223),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(223));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(223),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(223));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(20),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(20));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(20),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(20));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(0),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(0));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(224),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(224));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(224),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(224));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(225),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(225));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(225),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(225));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(226),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(226));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(226),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(226));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_228(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(227),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(227));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_229(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(227),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_year->equalRange_1(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(227));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_230(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(228),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(228));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_231(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(228),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_year->equalRange_2(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(228));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_232(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(230),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(230));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_233(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(230));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_234(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(231),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(231));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_235(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(231),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(231));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_236(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(232),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(232));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_237(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(232),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(232));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_238(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(233),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(233));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_239(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(233),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(233));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_240(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(234),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(234));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_241(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(234),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(234));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_242(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_243(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(21),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_244(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(235),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(235));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_245(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(235),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(235));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_246(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(236),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(236));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_247(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(236),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(236));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_248(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(237),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(237));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_249(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(237),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(237));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_250(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(238),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(238));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_251(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(238),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(238));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_252(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(239),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(239));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_253(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(239),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(239));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_254(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(240),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(240));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_255(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(240),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(240));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_256(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(241),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(241));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_257(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(241),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(241));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_258(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(242),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(242));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_259(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(242),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(242));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_260(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(243),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(243));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_261(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(243),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(243));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_262(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(244),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(244));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_263(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(244),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(244));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_264(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_265(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(22),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_266(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(245),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(245));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_267(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(245),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(245));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_268(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(246),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(246));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_269(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(246),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(246));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_270(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(247),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(247));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_271(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(247));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_272(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(248),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(248));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_273(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(248),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(248));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_274(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(249),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(249));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_275(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(249),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(249));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_276(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(250),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(250));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_277(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(250),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(250));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_278(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(251),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(251));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_279(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(251),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(251));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_280(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(252),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(252));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_281(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(252),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(252));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_282(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(253),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(253));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_283(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(253),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(253));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_284(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(255),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(255));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_285(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(255),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(255));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_286(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_287(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_288(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(256),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(256));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_289(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(256),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(256));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_290(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(259),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(259));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_291(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(259),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(259));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_292(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(260),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(260));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_293(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(260),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(260));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_294(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(261),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(261));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_295(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(261),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(261));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_296(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(262),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(262));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_297(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(262),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(262));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_298(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(263),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(263));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_299(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(263),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(263));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_300(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(264),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(264));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_301(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(264),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(264));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_302(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(267),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(267));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_303(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(267),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(267));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_304(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(268),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(268));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_305(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(268));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_306(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(271),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(271));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_307(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(271),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(271));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_308(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(24),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(24));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_309(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(24),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(24));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_310(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(272),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(272));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_311(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(272),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(272));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_312(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(273),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(273));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_313(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(273),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(273));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_314(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(274),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(274));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_315(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(274),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(274));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_316(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(275),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(275));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_317(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(275),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_writer->equalRange_1(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(275));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_318(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(276),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(276));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_319(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(276),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_writer->equalRange_2(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(276));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_320(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(278),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(278));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_321(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(278),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(278));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_322(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(279),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(279));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_323(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(279),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(279));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_324(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(280),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(280));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_325(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(280),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(280));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_326(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(281),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(281));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_327(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(281),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(281));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_328(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(282),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(282));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_329(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(282),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(282));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_330(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_331(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(25),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_332(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(283),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(283));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_333(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(283),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(283));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_334(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(284),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(284));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_335(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(284),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(284));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_336(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(285),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(285));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_337(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(285),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(285));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_338(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(286),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(286));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_339(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(286),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(286));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_340(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(287),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(287));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_341(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(287),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(287));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_342(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(288),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(288));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_343(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(288),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(288));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_344(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(289),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(289));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_345(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(289),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(289));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_346(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(291),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(291));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_347(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(291),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(291));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_348(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(292),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(292));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_349(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(292),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(292));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_350(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(295),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(295));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_351(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(295),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(295));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_352(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(26),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(26));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_353(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(26),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(26));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_354(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(296),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(296));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_355(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(296));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_356(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(297),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(297));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_357(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(297),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(297));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_358(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(298),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(298));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_359(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(298),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(298));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_360(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(299),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(299));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_361(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(299));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_362(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(300),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(300));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_363(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(300),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(300));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_364(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(303),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(303));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_365(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(303),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(303));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_366(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(304),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(304));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_367(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(304),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(304));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_368(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(307),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(307));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_369(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(307));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_370(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(308),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(308));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_371(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(308),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(308));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_372(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(309),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(309));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_373(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(309),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(309));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_374(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(27),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(27));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_375(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(27),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(27));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_376(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(310),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(310));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_377(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(310),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(310));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_378(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(311),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(311));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_379(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(311),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(311));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_380(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(312),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(312));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_381(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(312),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(312));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_382(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(316),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(316));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_383(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(316),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(316));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_384(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(319),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(319));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_385(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(319),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(319));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_386(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(320),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(320));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_387(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(320),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(320));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_388(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(321),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(321));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_389(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(321),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(321));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_390(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(324),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(324));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_391(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(324),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(324));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_392(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(328),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(328));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_393(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(328),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(328));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_394(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(331),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(331));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_395(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(331),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Igenre->equalRange_1(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(331));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_396(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_397(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(28),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_398(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(332),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(332));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_399(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(332),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(332));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_400(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(333),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(333));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_401(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(333),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(333));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_402(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(336),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(336));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_403(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_1_Igenre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(336),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_2(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(336));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_404(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(340),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(340));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_405(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(340),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(340));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_406(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(343),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(343));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_407(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(343),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_8_genre->equalRange_1(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(343));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_408(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(344),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(344));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_409(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(344),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_8_genre->equalRange_2(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(344));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_410(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(345),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(345));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_411(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(345),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_8_genre->equalRange_2(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(345));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_412(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(348),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(348));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_413(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_8_genre->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(348),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_8_genre->equalRange_2(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(348));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_414(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(29),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(29));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_415(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(29),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(29));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_416(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_417(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(30),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_418(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_419(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_420(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(31),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(31));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_421(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(31),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(31));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_422(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_423(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(32),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_424(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_425(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(33),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_426(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_427(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(34),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_428(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_429(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(35),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_430(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_431(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_432(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_433(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(37),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_434(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_435(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(38),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_436(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_437(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(39),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_438(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_439(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(40),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_440(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_441(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_442(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_443(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(41),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_444(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_445(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_446(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_447(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(43),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_448(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(44),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(44));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_449(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(44),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(44));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_450(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(45),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(45));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_451(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(45),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(45));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_452(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(46),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(46));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_453(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(46),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(46));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_454(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_455(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(47),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_456(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(48),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(48));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_457(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(48),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(48));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_458(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(49),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(49));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_459(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(49),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(49));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_460(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_461(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(50),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_462(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_463(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_464(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_465(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(51),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_466(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(52),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(52));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_467(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(52),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(52));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_468(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(53),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(53));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_469(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(53),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(53));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_470(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_471(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(54),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_472(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(55),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(55));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_473(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(55),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(55));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_474(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_475(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(56),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_476(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_477(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(57),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_478(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_479(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(58),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_480(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_481(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(59),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_482(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(60),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(60));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_483(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(60),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(60));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_484(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(4),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(4));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_485(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(4));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_486(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_487(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(61),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_488(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_489(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(62),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_490(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_491(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(63),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_492(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_493(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(64),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_494(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_495(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(65),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_496(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(66),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(66));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_497(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(66));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_498(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_499(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(67),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_500(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_501(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(68),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_502(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_503(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(69),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_504(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_505(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(70),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_506(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(5),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(5));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
if(!rel_5_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_507(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_year->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_year_op_ctxt,rel_5_year->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_year->equalRange_3(key,READ_OP_CONTEXT(rel_5_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(5));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_508(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(71),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(71));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_509(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(71),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(71));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_510(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_511(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(72),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_512(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_513(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(73),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_514(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_515(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(75),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_516(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(76),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(76));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_517(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(76),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(76));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_518(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_519(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(79),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_520(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(80),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(80));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_521(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(80),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(80));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_522(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(81),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(81));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_523(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(81),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(81));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_524(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_525(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(82),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_526(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(83),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(83));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_527(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(83),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(83));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_528(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_529(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_530(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(84),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(84));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
if(!rel_1_Igenre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Igenre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_531(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_1_Igenre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(84),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_1_Igenre_op_ctxt,rel_1_Igenre->createContext());
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Igenre->equalRange_3(key,READ_OP_CONTEXT(rel_1_Igenre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(84));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_532(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(87),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(87));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_533(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(87),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(87));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_534(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_535(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(88),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_years->equalRange_3(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_536(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(91),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(91));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_537(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(91),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(91));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_538(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(92),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(92));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_539(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(92),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(92));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_540(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(93),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(93));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_541(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(93),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(93));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_542(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(94),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(94));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_543(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(94),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(94));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_544(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(95),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(95));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_545(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(95),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_years->equalRange_1(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(95));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_546(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(96),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(96));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
if(!rel_7_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
if(!rel_8_genre->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_genre_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_547(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_8_genre->empty()) && !(rel_7_years->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(96),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_years_op_ctxt,rel_7_years->createContext());
CREATE_OP_CONTEXT(rel_8_genre_op_ctxt,rel_8_genre->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_years->equalRange_2(key,READ_OP_CONTEXT(rel_7_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_8_genre->equalRange_3(key,READ_OP_CONTEXT(rel_8_genre_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(96));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_548(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(98),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(98));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_549(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(98),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(98));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_550(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
if(!rel_4_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_551(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_writer->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_writer_op_ctxt,rel_4_writer->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_writer->equalRange_3(key,READ_OP_CONTEXT(rel_4_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_552(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(99),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(99));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_553(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(99));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_554(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(100),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(100));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_555(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(100),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(100));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_556(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(101),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(101));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_557(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(101),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(101));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_558(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(102),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(102));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_559(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(102),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(102));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_560(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(103),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(103));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_561(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(103),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(103));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_562(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(104),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(104));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_563(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(104),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(104));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_564(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(105),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(105));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_565(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(105));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_566(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(106),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(106));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_567(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(106),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(106));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_568(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(107),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(107));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_569(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(107));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_570(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(108),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(108));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
if(!rel_6_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_571(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_yearOfRelease->empty()) && !(rel_6_yearOfRelease->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(108),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt,rel_6_yearOfRelease->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_6_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(108));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
void subproof_572(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
if(!rel_3_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_573(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_wikisourcelangProperty->empty()) && !(rel_2_Rule->empty())) {
[&](){
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_2_Rule->equalRange_1(key);
auto part = range.partition();
PARALLEL_START;
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt,rel_3_wikisourcelangProperty->createContext());
pfor(auto it = part.begin(); it<part.end(); ++it) { 
try{
for(const auto& env0 : *it) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_3_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
} catch(std::exception &e) { SignalHandler::instance()->error(e.what());}
}
PARALLEL_END;
}
();}
return;
}
};
SouffleProgram *newInstance_test(){return new Sf_test;}
SymbolTable *getST_test(SouffleProgram *p){return &reinterpret_cast<Sf_test*>(p)->symTable;}

#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_test: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_test();
};
public:
factory_Sf_test() : ProgramFactory("test"){}
};
static factory_Sf_test __factory_Sf_test_instance;
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(kg/rules.dl)",
R"(.)",
R"(.)",
false,
R"()",
2,
-1);
if (!opt.parse(argc,argv)) return 1;
souffle::Sf_test obj;
#if defined(_OPENMP) 
obj.setNumThreads(opt.getNumJobs());

#endif
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir(), opt.getStratumIndex());
explain(obj, false);
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}

#endif

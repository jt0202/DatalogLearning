
#include "souffle/CompiledSouffle.h"
#include <mutex>
#include "souffle/Explain.h"

extern "C" {
}

namespace souffle {
using namespace ram;
struct t_btree_3__0_1_2__1__7 {
using t_tuple = Tuple<RamDomain, 3>;
struct updater_t_btree_3__0_1_2__1__7 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[1] = new_t[1];
old_t[2] = new_t[2];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0>, updater_t_btree_3__0_1_2__1__7>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_3__0_1_2__1__7& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 3 direct b-tree index [0,1,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,3,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,0,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,3,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [1,0,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__31 {
using t_tuple = Tuple<RamDomain, 5>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_6__0_1_2_3_4_5__63 {
using t_tuple = Tuple<RamDomain, 6>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4,5>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_6__0_1_2_3_4_5__63& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t) const {
context h;
return equalRange_63(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 6 direct b-tree index [0,1,2,3,4,5]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};

class Sf_souffle_small : public SouffleProgram {
private:
static inline bool regex_wrapper(const std::string& pattern, const std::string& text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\").\n";
}
   return result;
}
private:
static inline std::string substr_wrapper(const std::string& str, size_t idx, size_t len) {
   std::string result; 
   try { result = str.substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
private:
static inline RamDomain wrapper_tonumber(const std::string& str) {
   RamDomain result=0; 
   try { result = stord(str); } catch(...) { 
     std::cerr << "error: wrong string provided by to_number(\"";
     std::cerr << str << "\") functor.\n";
     raise(SIGFPE);
   } return result;
}
public:
// -- initialize symbol table --
SymbolTable symTable
{
	R"_(v0,v1)_",
	R"_(Rule)_",
	R"_(years,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(264),
   years(v0,v1).)_",
	R"_(years,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(265),
   years(v1,v0).)_",
	R"_(yearOfRelease,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(266),
   yearOfRelease(v0,v1).)_",
	R"_(yearOfRelease,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(267),
   yearOfRelease(v1,v0).)_",
	R"_(year,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(268),
   year(v0,v1).)_",
	R"_(year,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(269),
   year(v1,v0).)_",
	R"_(writer,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(270),
   writer(v0,v1).)_",
	R"_(writer,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(271),
   writer(v1,v0).)_",
	R"_(wikisourcelangProperty,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(272),
   wikisourcelangProperty(v0,v1).)_",
	R"_(wikisourcelangProperty,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(273),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(274),
   livesIn(v0,v1).)_",
	R"_(livesIn,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(275),
   livesIn(v1,v0).)_",
	R"_(inv_0,v0,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(276),
   inv_0(v0,v1).)_",
	R"_(inv_0,v1,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(277),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(278),
   years(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(279),
   years(v0,v1),
   years(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(280),
   years(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(281),
   years(v1,v0),
   years(v0,v1).)_",
	R"_(years,v2,v1)_",
	R"_(years,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(282),
   years(v2,v1),
   years(v0,v2).)_",
	R"_(years,v1,v2)_",
	R"_(years,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(283),
   years(v1,v2),
   years(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(284),
   years(v2,v0),
   years(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(285),
   years(v2,v0),
   years(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(286),
   years(v0,v2),
   years(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(287),
   years(v0,v2),
   years(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(288),
   years(v2,v1),
   years(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(289),
   years(v1,v2),
   years(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(290),
   years(v0,v1),
   yearOfRelease(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(291),
   years(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(292),
   years(v1,v0),
   yearOfRelease(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(293),
   years(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(yearOfRelease,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(294),
   years(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(yearOfRelease,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(295),
   years(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(yearOfRelease,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(296),
   years(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(yearOfRelease,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(297),
   years(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(298),
   years(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(299),
   years(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(300),
   years(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(301),
   years(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(302),
   years(v0,v1),
   year(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(303),
   years(v0,v1),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(304),
   years(v1,v0),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(305),
   years(v1,v0),
   year(v0,v1).)_",
	R"_(year,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(306),
   years(v2,v1),
   year(v0,v2).)_",
	R"_(year,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(307),
   years(v1,v2),
   year(v2,v0).)_",
	R"_(year,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(308),
   years(v2,v0),
   year(v1,v2).)_",
	R"_(year,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(309),
   years(v2,v0),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(310),
   years(v0,v2),
   year(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(311),
   years(v0,v2),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(312),
   years(v2,v1),
   year(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(313),
   years(v1,v2),
   year(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(314),
   years(v0,v1),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(315),
   years(v0,v1),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(316),
   years(v1,v0),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(317),
   years(v1,v0),
   writer(v0,v1).)_",
	R"_(writer,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(318),
   years(v2,v1),
   writer(v0,v2).)_",
	R"_(writer,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(319),
   years(v1,v2),
   writer(v2,v0).)_",
	R"_(writer,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(320),
   years(v2,v0),
   writer(v1,v2).)_",
	R"_(writer,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(321),
   years(v2,v0),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(322),
   years(v0,v2),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(323),
   years(v0,v2),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(324),
   years(v2,v1),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(325),
   years(v1,v2),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(326),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(327),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(328),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(329),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(wikisourcelangProperty,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(330),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(wikisourcelangProperty,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(331),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(wikisourcelangProperty,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(332),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(wikisourcelangProperty,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(333),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(334),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(335),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(336),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(337),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(338),
   years(v0,v1),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(339),
   years(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(340),
   years(v1,v0),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(341),
   years(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(342),
   years(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(343),
   years(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(344),
   years(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(345),
   years(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(346),
   years(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(347),
   years(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(348),
   years(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(349),
   years(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(350),
   years(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(351),
   years(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(352),
   years(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(353),
   years(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0,v0,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(354),
   years(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0,v2,v0)_",
	R"_(inv_0(v0,v1) :- 
   Rule(355),
   years(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0,v1,v2)_",
	R"_(inv_0(v0,v1) :- 
   Rule(356),
   years(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0,v2,v1)_",
	R"_(inv_0(v0,v1) :- 
   Rule(357),
   years(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(358),
   years(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(359),
   years(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(360),
   years(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(361),
   years(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(362),
   yearOfRelease(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(363),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(364),
   yearOfRelease(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(365),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(366),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(367),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(368),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(369),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(370),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(371),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(372),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(373),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(374),
   yearOfRelease(v0,v1),
   year(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(375),
   yearOfRelease(v0,v1),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(376),
   yearOfRelease(v1,v0),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(377),
   yearOfRelease(v1,v0),
   year(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(378),
   yearOfRelease(v2,v1),
   year(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(379),
   yearOfRelease(v1,v2),
   year(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(380),
   yearOfRelease(v2,v0),
   year(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(381),
   yearOfRelease(v2,v0),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(382),
   yearOfRelease(v0,v2),
   year(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(383),
   yearOfRelease(v0,v2),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(384),
   yearOfRelease(v2,v1),
   year(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(385),
   yearOfRelease(v1,v2),
   year(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(386),
   yearOfRelease(v0,v1),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(387),
   yearOfRelease(v0,v1),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(388),
   yearOfRelease(v1,v0),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(389),
   yearOfRelease(v1,v0),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(390),
   yearOfRelease(v2,v1),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(391),
   yearOfRelease(v1,v2),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(392),
   yearOfRelease(v2,v0),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(393),
   yearOfRelease(v2,v0),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(394),
   yearOfRelease(v0,v2),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(395),
   yearOfRelease(v0,v2),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(396),
   yearOfRelease(v2,v1),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(397),
   yearOfRelease(v1,v2),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(398),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(399),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(400),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(401),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(402),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(403),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(404),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(405),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(406),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(407),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(408),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(409),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(410),
   yearOfRelease(v0,v1),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(411),
   yearOfRelease(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(412),
   yearOfRelease(v1,v0),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(413),
   yearOfRelease(v1,v0),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(414),
   yearOfRelease(v2,v1),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(415),
   yearOfRelease(v1,v2),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(416),
   yearOfRelease(v2,v0),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(417),
   yearOfRelease(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(418),
   yearOfRelease(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(419),
   yearOfRelease(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(420),
   yearOfRelease(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(421),
   yearOfRelease(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(422),
   yearOfRelease(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(423),
   yearOfRelease(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(424),
   yearOfRelease(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(425),
   yearOfRelease(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(426),
   yearOfRelease(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(427),
   yearOfRelease(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(428),
   yearOfRelease(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(429),
   yearOfRelease(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(430),
   yearOfRelease(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(431),
   yearOfRelease(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(432),
   yearOfRelease(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(433),
   yearOfRelease(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(434),
   year(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(435),
   year(v0,v1),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(436),
   year(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(437),
   year(v1,v0),
   year(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(438),
   year(v2,v1),
   year(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(439),
   year(v1,v2),
   year(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(440),
   year(v2,v0),
   year(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(441),
   year(v2,v0),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(442),
   year(v0,v2),
   year(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(443),
   year(v0,v2),
   year(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(444),
   year(v2,v1),
   year(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(445),
   year(v1,v2),
   year(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(446),
   year(v0,v1),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(447),
   year(v0,v1),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(448),
   year(v1,v0),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(449),
   year(v1,v0),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(450),
   year(v2,v1),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(451),
   year(v1,v2),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(452),
   year(v2,v0),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(453),
   year(v2,v0),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(454),
   year(v0,v2),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(455),
   year(v0,v2),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(456),
   year(v2,v1),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(457),
   year(v1,v2),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(458),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(459),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(460),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(461),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(462),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(463),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(464),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(465),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(466),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(467),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(468),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(469),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(470),
   year(v0,v1),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(471),
   year(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(472),
   year(v1,v0),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(473),
   year(v1,v0),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(474),
   year(v2,v1),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(475),
   year(v1,v2),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(476),
   year(v2,v0),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(477),
   year(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(478),
   year(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(479),
   year(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(480),
   year(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(481),
   year(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(482),
   year(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(483),
   year(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(484),
   year(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(485),
   year(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(486),
   year(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(487),
   year(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(488),
   year(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(489),
   year(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(490),
   year(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(491),
   year(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(492),
   year(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(493),
   year(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(494),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(495),
   writer(v0,v1),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(496),
   writer(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(497),
   writer(v1,v0),
   writer(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(498),
   writer(v2,v1),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(499),
   writer(v1,v2),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(500),
   writer(v2,v0),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(501),
   writer(v2,v0),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(502),
   writer(v0,v2),
   writer(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(503),
   writer(v0,v2),
   writer(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(504),
   writer(v2,v1),
   writer(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(505),
   writer(v1,v2),
   writer(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(506),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(507),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(508),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(509),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(510),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(511),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(512),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(513),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(514),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(515),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(516),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(517),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(518),
   writer(v0,v1),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(519),
   writer(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(520),
   writer(v1,v0),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(521),
   writer(v1,v0),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(522),
   writer(v2,v1),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(523),
   writer(v1,v2),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(524),
   writer(v2,v0),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(525),
   writer(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(526),
   writer(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(527),
   writer(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(528),
   writer(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(529),
   writer(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(530),
   writer(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(531),
   writer(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(532),
   writer(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(533),
   writer(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(534),
   writer(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(535),
   writer(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(536),
   writer(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(537),
   writer(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(538),
   writer(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(539),
   writer(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(540),
   writer(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(541),
   writer(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(542),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(543),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(544),
   wikisourcelangProperty(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(545),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(546),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(547),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(548),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(549),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(550),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(551),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(552),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(553),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(554),
   wikisourcelangProperty(v0,v1),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(555),
   wikisourcelangProperty(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(556),
   wikisourcelangProperty(v1,v0),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(557),
   wikisourcelangProperty(v1,v0),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(558),
   wikisourcelangProperty(v2,v1),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(559),
   wikisourcelangProperty(v1,v2),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(560),
   wikisourcelangProperty(v2,v0),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(561),
   wikisourcelangProperty(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(562),
   wikisourcelangProperty(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(563),
   wikisourcelangProperty(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(564),
   wikisourcelangProperty(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(565),
   wikisourcelangProperty(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(566),
   wikisourcelangProperty(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(567),
   wikisourcelangProperty(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(568),
   wikisourcelangProperty(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(569),
   wikisourcelangProperty(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(570),
   wikisourcelangProperty(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(571),
   wikisourcelangProperty(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(572),
   wikisourcelangProperty(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(573),
   wikisourcelangProperty(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(574),
   wikisourcelangProperty(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(575),
   wikisourcelangProperty(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(576),
   wikisourcelangProperty(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(577),
   wikisourcelangProperty(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(578),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(579),
   livesIn(v0,v1),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(580),
   livesIn(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(581),
   livesIn(v1,v0),
   livesIn(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(582),
   livesIn(v2,v1),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(583),
   livesIn(v1,v2),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(584),
   livesIn(v2,v0),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(585),
   livesIn(v2,v0),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(586),
   livesIn(v0,v2),
   livesIn(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(587),
   livesIn(v0,v2),
   livesIn(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(588),
   livesIn(v2,v1),
   livesIn(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(589),
   livesIn(v1,v2),
   livesIn(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(590),
   livesIn(v0,v1),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(591),
   livesIn(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(592),
   livesIn(v1,v0),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(593),
   livesIn(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(594),
   livesIn(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(595),
   livesIn(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(596),
   livesIn(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(597),
   livesIn(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(598),
   livesIn(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(599),
   livesIn(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(600),
   livesIn(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(601),
   livesIn(v1,v2),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(602),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(603),
   inv_0(v0,v1),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(604),
   inv_0(v1,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(605),
   inv_0(v1,v0),
   inv_0(v0,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(606),
   inv_0(v2,v1),
   inv_0(v0,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(607),
   inv_0(v1,v2),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(608),
   inv_0(v2,v0),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(609),
   inv_0(v2,v0),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(610),
   inv_0(v0,v2),
   inv_0(v1,v2).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(611),
   inv_0(v0,v2),
   inv_0(v2,v1).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(612),
   inv_0(v2,v1),
   inv_0(v2,v0).)_",
	R"_(inv_0(v0,v1) :- 
   Rule(613),
   inv_0(v1,v2),
   inv_0(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(0),
   years(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(1),
   years(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(2),
   yearOfRelease(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(3),
   yearOfRelease(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(4),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(5),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(6),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(7),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(8),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(9),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(10),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(11),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(12),
   years(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(13),
   years(v0,v1),
   years(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(14),
   years(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(15),
   years(v1,v0),
   years(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(16),
   years(v2,v1),
   years(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(17),
   years(v1,v2),
   years(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(18),
   years(v2,v0),
   years(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(19),
   years(v2,v0),
   years(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(20),
   years(v0,v2),
   years(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(21),
   years(v0,v2),
   years(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(22),
   years(v2,v1),
   years(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(23),
   years(v1,v2),
   years(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(24),
   years(v0,v1),
   yearOfRelease(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(25),
   years(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(26),
   years(v1,v0),
   yearOfRelease(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(27),
   years(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(28),
   years(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(29),
   years(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(30),
   years(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(31),
   years(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(32),
   years(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(33),
   years(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(34),
   years(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(35),
   years(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(36),
   years(v0,v1),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(37),
   years(v0,v1),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(38),
   years(v1,v0),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(39),
   years(v1,v0),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(40),
   years(v2,v1),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(41),
   years(v1,v2),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(42),
   years(v2,v0),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(43),
   years(v2,v0),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(44),
   years(v0,v2),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(45),
   years(v0,v2),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(46),
   years(v2,v1),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(47),
   years(v1,v2),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(48),
   years(v0,v1),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(49),
   years(v0,v1),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(50),
   years(v1,v0),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(51),
   years(v1,v0),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(52),
   years(v2,v1),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(53),
   years(v1,v2),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(54),
   years(v2,v0),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(55),
   years(v2,v0),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(56),
   years(v0,v2),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(57),
   years(v0,v2),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(58),
   years(v2,v1),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(59),
   years(v1,v2),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(60),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(61),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(62),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(63),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(64),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(65),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(66),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(67),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(68),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(69),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(70),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(71),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(72),
   years(v0,v1),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(73),
   years(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(74),
   years(v1,v0),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(75),
   years(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(76),
   years(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(77),
   years(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(78),
   years(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(79),
   years(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(80),
   years(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(81),
   years(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(82),
   years(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(83),
   years(v1,v2),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(84),
   yearOfRelease(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(85),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(86),
   yearOfRelease(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(87),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(88),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(89),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(90),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(91),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(92),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(93),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(94),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(95),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(96),
   yearOfRelease(v0,v1),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(97),
   yearOfRelease(v0,v1),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(98),
   yearOfRelease(v1,v0),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(99),
   yearOfRelease(v1,v0),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(100),
   yearOfRelease(v2,v1),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(101),
   yearOfRelease(v1,v2),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(102),
   yearOfRelease(v2,v0),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(103),
   yearOfRelease(v2,v0),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(104),
   yearOfRelease(v0,v2),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(105),
   yearOfRelease(v0,v2),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(106),
   yearOfRelease(v2,v1),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(107),
   yearOfRelease(v1,v2),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(108),
   yearOfRelease(v0,v1),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(109),
   yearOfRelease(v0,v1),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(110),
   yearOfRelease(v1,v0),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(111),
   yearOfRelease(v1,v0),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(112),
   yearOfRelease(v2,v1),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(113),
   yearOfRelease(v1,v2),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(114),
   yearOfRelease(v2,v0),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(115),
   yearOfRelease(v2,v0),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(116),
   yearOfRelease(v0,v2),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(117),
   yearOfRelease(v0,v2),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(118),
   yearOfRelease(v2,v1),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(119),
   yearOfRelease(v1,v2),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(120),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(121),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(122),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(123),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(124),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(125),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(126),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(127),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(128),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(129),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(130),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(131),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(132),
   yearOfRelease(v0,v1),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(133),
   yearOfRelease(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(134),
   yearOfRelease(v1,v0),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(135),
   yearOfRelease(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(136),
   yearOfRelease(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(137),
   yearOfRelease(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(138),
   yearOfRelease(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(139),
   yearOfRelease(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(140),
   yearOfRelease(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(141),
   yearOfRelease(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(142),
   yearOfRelease(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(143),
   yearOfRelease(v1,v2),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(144),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(145),
   year(v0,v1),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(146),
   year(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(147),
   year(v1,v0),
   year(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(148),
   year(v2,v1),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(149),
   year(v1,v2),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(150),
   year(v2,v0),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(151),
   year(v2,v0),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(152),
   year(v0,v2),
   year(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(153),
   year(v0,v2),
   year(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(154),
   year(v2,v1),
   year(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(155),
   year(v1,v2),
   year(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(156),
   year(v0,v1),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(157),
   year(v0,v1),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(158),
   year(v1,v0),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(159),
   year(v1,v0),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(160),
   year(v2,v1),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(161),
   year(v1,v2),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(162),
   year(v2,v0),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(163),
   year(v2,v0),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(164),
   year(v0,v2),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(165),
   year(v0,v2),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(166),
   year(v2,v1),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(167),
   year(v1,v2),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(168),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(169),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(170),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(171),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(172),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(173),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(174),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(175),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(176),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(177),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(178),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(179),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(180),
   year(v0,v1),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(181),
   year(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(182),
   year(v1,v0),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(183),
   year(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(184),
   year(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(185),
   year(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(186),
   year(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(187),
   year(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(188),
   year(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(189),
   year(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(190),
   year(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(191),
   year(v1,v2),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(192),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(193),
   writer(v0,v1),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(194),
   writer(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(195),
   writer(v1,v0),
   writer(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(196),
   writer(v2,v1),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(197),
   writer(v1,v2),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(198),
   writer(v2,v0),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(199),
   writer(v2,v0),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(200),
   writer(v0,v2),
   writer(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(201),
   writer(v0,v2),
   writer(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(202),
   writer(v2,v1),
   writer(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(203),
   writer(v1,v2),
   writer(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(204),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(205),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(206),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(207),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(208),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(209),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(210),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(211),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(212),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(213),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(214),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(215),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(216),
   writer(v0,v1),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(217),
   writer(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(218),
   writer(v1,v0),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(219),
   writer(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(220),
   writer(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(221),
   writer(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(222),
   writer(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(223),
   writer(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(224),
   writer(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(225),
   writer(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(226),
   writer(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(227),
   writer(v1,v2),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(228),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(229),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(230),
   wikisourcelangProperty(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(231),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(232),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(233),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(234),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(235),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(236),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(237),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(238),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(239),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(240),
   wikisourcelangProperty(v0,v1),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(241),
   wikisourcelangProperty(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(242),
   wikisourcelangProperty(v1,v0),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(243),
   wikisourcelangProperty(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(244),
   wikisourcelangProperty(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(245),
   wikisourcelangProperty(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(246),
   wikisourcelangProperty(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(247),
   wikisourcelangProperty(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(248),
   wikisourcelangProperty(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(249),
   wikisourcelangProperty(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(250),
   wikisourcelangProperty(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(251),
   wikisourcelangProperty(v1,v2),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(252),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(253),
   livesIn(v0,v1),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(254),
   livesIn(v1,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(255),
   livesIn(v1,v0),
   livesIn(v0,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(256),
   livesIn(v2,v1),
   livesIn(v0,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(257),
   livesIn(v1,v2),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(258),
   livesIn(v2,v0),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(259),
   livesIn(v2,v0),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(260),
   livesIn(v0,v2),
   livesIn(v1,v2).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(261),
   livesIn(v0,v2),
   livesIn(v2,v1).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(262),
   livesIn(v2,v1),
   livesIn(v2,v0).)_",
	R"_(livesIn(v0,v1) :- 
   Rule(263),
   livesIn(v1,v2),
   livesIn(v0,v2).)_",
};// -- Table: Rule
std::unique_ptr<t_btree_3__0_1_2__1__7> rel_1_Rule = std::make_unique<t_btree_3__0_1_2__1__7>();
souffle::RelationWrapper<0,t_btree_3__0_1_2__1__7,Tuple<RamDomain,3>,3> wrapper_rel_1_Rule;
// -- Table: wikisourcelangProperty
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_2_wikisourcelangProperty = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<1,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_2_wikisourcelangProperty;
// -- Table: writer
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_3_writer = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<2,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_3_writer;
// -- Table: year
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_4_year = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<3,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_4_year;
// -- Table: yearOfRelease
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_5_yearOfRelease = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<4,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_5_yearOfRelease;
// -- Table: years
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_6_years = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<5,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_6_years;
// -- Table: livesIn
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_7_livesIn = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<6,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_7_livesIn;
// -- Table: @delta_livesIn
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_8_delta_livesIn = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: @new_livesIn
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_9_new_livesIn = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: inv_0
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_10_inv_0 = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<7,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_10_inv_0;
// -- Table: @delta_inv_0
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_11_delta_inv_0 = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: @new_inv_0
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_12_new_inv_0 = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: inv_0.@info.1
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_13_inv_0_info_1 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<8,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_13_inv_0_info_1;
// -- Table: inv_0.@info.10
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_14_inv_0_info_10 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<9,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_14_inv_0_info_10;
// -- Table: inv_0.@info.100
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_15_inv_0_info_100 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<10,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_15_inv_0_info_100;
// -- Table: inv_0.@info.101
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_16_inv_0_info_101 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<11,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_16_inv_0_info_101;
// -- Table: inv_0.@info.102
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_17_inv_0_info_102 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<12,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_17_inv_0_info_102;
// -- Table: inv_0.@info.103
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_18_inv_0_info_103 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<13,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_18_inv_0_info_103;
// -- Table: inv_0.@info.104
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_19_inv_0_info_104 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<14,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_19_inv_0_info_104;
// -- Table: inv_0.@info.105
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_20_inv_0_info_105 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<15,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_20_inv_0_info_105;
// -- Table: inv_0.@info.106
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_21_inv_0_info_106 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<16,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_21_inv_0_info_106;
// -- Table: inv_0.@info.107
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_22_inv_0_info_107 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<17,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_22_inv_0_info_107;
// -- Table: inv_0.@info.108
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_23_inv_0_info_108 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<18,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_23_inv_0_info_108;
// -- Table: inv_0.@info.109
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_24_inv_0_info_109 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<19,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_24_inv_0_info_109;
// -- Table: inv_0.@info.11
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_25_inv_0_info_11 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<20,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_25_inv_0_info_11;
// -- Table: inv_0.@info.110
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_26_inv_0_info_110 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<21,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_26_inv_0_info_110;
// -- Table: inv_0.@info.111
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_27_inv_0_info_111 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<22,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_27_inv_0_info_111;
// -- Table: inv_0.@info.112
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_28_inv_0_info_112 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<23,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_28_inv_0_info_112;
// -- Table: inv_0.@info.113
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_29_inv_0_info_113 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<24,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_29_inv_0_info_113;
// -- Table: inv_0.@info.114
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_30_inv_0_info_114 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<25,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_30_inv_0_info_114;
// -- Table: inv_0.@info.115
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_31_inv_0_info_115 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<26,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_31_inv_0_info_115;
// -- Table: inv_0.@info.116
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_32_inv_0_info_116 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<27,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_32_inv_0_info_116;
// -- Table: inv_0.@info.117
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_33_inv_0_info_117 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<28,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_33_inv_0_info_117;
// -- Table: inv_0.@info.118
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_34_inv_0_info_118 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<29,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_34_inv_0_info_118;
// -- Table: inv_0.@info.119
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_35_inv_0_info_119 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<30,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_35_inv_0_info_119;
// -- Table: inv_0.@info.12
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_36_inv_0_info_12 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<31,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_36_inv_0_info_12;
// -- Table: inv_0.@info.120
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_37_inv_0_info_120 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<32,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_37_inv_0_info_120;
// -- Table: inv_0.@info.121
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_38_inv_0_info_121 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<33,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_38_inv_0_info_121;
// -- Table: inv_0.@info.122
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_39_inv_0_info_122 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<34,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_39_inv_0_info_122;
// -- Table: inv_0.@info.123
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_40_inv_0_info_123 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<35,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_40_inv_0_info_123;
// -- Table: inv_0.@info.124
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_41_inv_0_info_124 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<36,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_41_inv_0_info_124;
// -- Table: inv_0.@info.125
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_42_inv_0_info_125 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<37,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_42_inv_0_info_125;
// -- Table: inv_0.@info.126
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_43_inv_0_info_126 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<38,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_43_inv_0_info_126;
// -- Table: inv_0.@info.127
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_44_inv_0_info_127 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<39,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_44_inv_0_info_127;
// -- Table: inv_0.@info.128
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_45_inv_0_info_128 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<40,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_45_inv_0_info_128;
// -- Table: inv_0.@info.129
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_46_inv_0_info_129 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<41,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_46_inv_0_info_129;
// -- Table: inv_0.@info.13
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_47_inv_0_info_13 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<42,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_47_inv_0_info_13;
// -- Table: inv_0.@info.130
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_48_inv_0_info_130 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<43,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_48_inv_0_info_130;
// -- Table: inv_0.@info.131
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_49_inv_0_info_131 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<44,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_49_inv_0_info_131;
// -- Table: inv_0.@info.132
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_50_inv_0_info_132 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<45,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_50_inv_0_info_132;
// -- Table: inv_0.@info.133
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_51_inv_0_info_133 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<46,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_51_inv_0_info_133;
// -- Table: inv_0.@info.134
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_52_inv_0_info_134 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<47,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_52_inv_0_info_134;
// -- Table: inv_0.@info.135
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_53_inv_0_info_135 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<48,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_53_inv_0_info_135;
// -- Table: inv_0.@info.136
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_54_inv_0_info_136 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<49,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_54_inv_0_info_136;
// -- Table: inv_0.@info.137
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_55_inv_0_info_137 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<50,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_55_inv_0_info_137;
// -- Table: inv_0.@info.138
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_56_inv_0_info_138 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<51,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_56_inv_0_info_138;
// -- Table: inv_0.@info.139
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_57_inv_0_info_139 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<52,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_57_inv_0_info_139;
// -- Table: inv_0.@info.14
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_58_inv_0_info_14 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<53,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_58_inv_0_info_14;
// -- Table: inv_0.@info.140
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_59_inv_0_info_140 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<54,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_59_inv_0_info_140;
// -- Table: inv_0.@info.141
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_60_inv_0_info_141 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<55,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_60_inv_0_info_141;
// -- Table: inv_0.@info.142
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_61_inv_0_info_142 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<56,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_61_inv_0_info_142;
// -- Table: inv_0.@info.143
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_62_inv_0_info_143 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<57,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_62_inv_0_info_143;
// -- Table: inv_0.@info.144
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_63_inv_0_info_144 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<58,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_63_inv_0_info_144;
// -- Table: inv_0.@info.145
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_64_inv_0_info_145 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<59,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_64_inv_0_info_145;
// -- Table: inv_0.@info.146
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_65_inv_0_info_146 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<60,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_65_inv_0_info_146;
// -- Table: inv_0.@info.147
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_66_inv_0_info_147 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<61,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_66_inv_0_info_147;
// -- Table: inv_0.@info.148
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_67_inv_0_info_148 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<62,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_67_inv_0_info_148;
// -- Table: inv_0.@info.149
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_68_inv_0_info_149 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<63,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_68_inv_0_info_149;
// -- Table: inv_0.@info.15
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_69_inv_0_info_15 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<64,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_69_inv_0_info_15;
// -- Table: inv_0.@info.150
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_70_inv_0_info_150 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<65,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_70_inv_0_info_150;
// -- Table: inv_0.@info.151
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_71_inv_0_info_151 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<66,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_71_inv_0_info_151;
// -- Table: inv_0.@info.152
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_72_inv_0_info_152 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<67,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_72_inv_0_info_152;
// -- Table: inv_0.@info.153
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_73_inv_0_info_153 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<68,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_73_inv_0_info_153;
// -- Table: inv_0.@info.154
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_74_inv_0_info_154 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<69,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_74_inv_0_info_154;
// -- Table: inv_0.@info.155
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_75_inv_0_info_155 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<70,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_75_inv_0_info_155;
// -- Table: inv_0.@info.156
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_76_inv_0_info_156 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<71,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_76_inv_0_info_156;
// -- Table: inv_0.@info.157
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_77_inv_0_info_157 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<72,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_77_inv_0_info_157;
// -- Table: inv_0.@info.158
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_78_inv_0_info_158 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<73,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_78_inv_0_info_158;
// -- Table: inv_0.@info.159
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_79_inv_0_info_159 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<74,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_79_inv_0_info_159;
// -- Table: inv_0.@info.16
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_80_inv_0_info_16 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<75,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_80_inv_0_info_16;
// -- Table: inv_0.@info.160
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_81_inv_0_info_160 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<76,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_81_inv_0_info_160;
// -- Table: inv_0.@info.161
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_82_inv_0_info_161 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<77,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_82_inv_0_info_161;
// -- Table: inv_0.@info.162
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_83_inv_0_info_162 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<78,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_83_inv_0_info_162;
// -- Table: inv_0.@info.163
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_84_inv_0_info_163 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<79,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_84_inv_0_info_163;
// -- Table: inv_0.@info.164
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_85_inv_0_info_164 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<80,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_85_inv_0_info_164;
// -- Table: inv_0.@info.165
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_86_inv_0_info_165 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<81,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_86_inv_0_info_165;
// -- Table: inv_0.@info.166
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_87_inv_0_info_166 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<82,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_87_inv_0_info_166;
// -- Table: inv_0.@info.167
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_88_inv_0_info_167 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<83,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_88_inv_0_info_167;
// -- Table: inv_0.@info.168
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_89_inv_0_info_168 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<84,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_89_inv_0_info_168;
// -- Table: inv_0.@info.169
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_90_inv_0_info_169 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<85,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_90_inv_0_info_169;
// -- Table: inv_0.@info.17
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_91_inv_0_info_17 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<86,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_91_inv_0_info_17;
// -- Table: inv_0.@info.170
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_92_inv_0_info_170 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<87,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_92_inv_0_info_170;
// -- Table: inv_0.@info.171
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_93_inv_0_info_171 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<88,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_93_inv_0_info_171;
// -- Table: inv_0.@info.172
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_94_inv_0_info_172 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<89,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_94_inv_0_info_172;
// -- Table: inv_0.@info.173
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_95_inv_0_info_173 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<90,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_95_inv_0_info_173;
// -- Table: inv_0.@info.174
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_96_inv_0_info_174 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<91,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_96_inv_0_info_174;
// -- Table: inv_0.@info.175
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_97_inv_0_info_175 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<92,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_97_inv_0_info_175;
// -- Table: inv_0.@info.176
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_98_inv_0_info_176 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<93,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_98_inv_0_info_176;
// -- Table: inv_0.@info.177
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_99_inv_0_info_177 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<94,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_99_inv_0_info_177;
// -- Table: inv_0.@info.178
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_100_inv_0_info_178 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<95,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_100_inv_0_info_178;
// -- Table: inv_0.@info.179
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_101_inv_0_info_179 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<96,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_101_inv_0_info_179;
// -- Table: inv_0.@info.18
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_102_inv_0_info_18 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<97,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_102_inv_0_info_18;
// -- Table: inv_0.@info.180
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_103_inv_0_info_180 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<98,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_103_inv_0_info_180;
// -- Table: inv_0.@info.181
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_104_inv_0_info_181 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<99,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_104_inv_0_info_181;
// -- Table: inv_0.@info.182
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_105_inv_0_info_182 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<100,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_105_inv_0_info_182;
// -- Table: inv_0.@info.183
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_106_inv_0_info_183 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<101,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_106_inv_0_info_183;
// -- Table: inv_0.@info.184
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_107_inv_0_info_184 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<102,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_107_inv_0_info_184;
// -- Table: inv_0.@info.185
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_108_inv_0_info_185 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<103,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_108_inv_0_info_185;
// -- Table: inv_0.@info.186
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_109_inv_0_info_186 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<104,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_109_inv_0_info_186;
// -- Table: inv_0.@info.187
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_110_inv_0_info_187 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<105,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_110_inv_0_info_187;
// -- Table: inv_0.@info.188
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_111_inv_0_info_188 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<106,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_111_inv_0_info_188;
// -- Table: inv_0.@info.189
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_112_inv_0_info_189 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<107,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_112_inv_0_info_189;
// -- Table: inv_0.@info.19
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_113_inv_0_info_19 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<108,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_113_inv_0_info_19;
// -- Table: inv_0.@info.190
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_114_inv_0_info_190 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<109,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_114_inv_0_info_190;
// -- Table: inv_0.@info.191
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_115_inv_0_info_191 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<110,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_115_inv_0_info_191;
// -- Table: inv_0.@info.192
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_116_inv_0_info_192 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<111,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_116_inv_0_info_192;
// -- Table: inv_0.@info.193
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_117_inv_0_info_193 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<112,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_117_inv_0_info_193;
// -- Table: inv_0.@info.194
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_118_inv_0_info_194 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<113,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_118_inv_0_info_194;
// -- Table: inv_0.@info.195
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_119_inv_0_info_195 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<114,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_119_inv_0_info_195;
// -- Table: inv_0.@info.196
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_120_inv_0_info_196 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<115,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_120_inv_0_info_196;
// -- Table: inv_0.@info.197
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_121_inv_0_info_197 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<116,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_121_inv_0_info_197;
// -- Table: inv_0.@info.198
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_122_inv_0_info_198 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<117,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_122_inv_0_info_198;
// -- Table: inv_0.@info.199
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_123_inv_0_info_199 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<118,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_123_inv_0_info_199;
// -- Table: inv_0.@info.2
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_124_inv_0_info_2 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<119,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_124_inv_0_info_2;
// -- Table: inv_0.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_125_inv_0_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<120,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_125_inv_0_info_20;
// -- Table: inv_0.@info.200
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_126_inv_0_info_200 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<121,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_126_inv_0_info_200;
// -- Table: inv_0.@info.201
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_127_inv_0_info_201 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<122,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_127_inv_0_info_201;
// -- Table: inv_0.@info.202
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_128_inv_0_info_202 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<123,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_128_inv_0_info_202;
// -- Table: inv_0.@info.203
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_129_inv_0_info_203 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<124,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_129_inv_0_info_203;
// -- Table: inv_0.@info.204
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_130_inv_0_info_204 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<125,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_130_inv_0_info_204;
// -- Table: inv_0.@info.205
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_131_inv_0_info_205 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<126,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_131_inv_0_info_205;
// -- Table: inv_0.@info.206
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_132_inv_0_info_206 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<127,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_132_inv_0_info_206;
// -- Table: inv_0.@info.207
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_133_inv_0_info_207 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<128,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_133_inv_0_info_207;
// -- Table: inv_0.@info.208
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_134_inv_0_info_208 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<129,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_134_inv_0_info_208;
// -- Table: inv_0.@info.209
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_135_inv_0_info_209 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<130,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_135_inv_0_info_209;
// -- Table: inv_0.@info.21
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_136_inv_0_info_21 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<131,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_136_inv_0_info_21;
// -- Table: inv_0.@info.210
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_137_inv_0_info_210 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<132,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_137_inv_0_info_210;
// -- Table: inv_0.@info.211
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_138_inv_0_info_211 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<133,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_138_inv_0_info_211;
// -- Table: inv_0.@info.212
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_139_inv_0_info_212 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<134,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_139_inv_0_info_212;
// -- Table: inv_0.@info.213
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_140_inv_0_info_213 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<135,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_140_inv_0_info_213;
// -- Table: inv_0.@info.214
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_141_inv_0_info_214 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<136,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_141_inv_0_info_214;
// -- Table: inv_0.@info.215
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_142_inv_0_info_215 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<137,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_142_inv_0_info_215;
// -- Table: inv_0.@info.216
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_143_inv_0_info_216 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<138,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_143_inv_0_info_216;
// -- Table: inv_0.@info.217
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_144_inv_0_info_217 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<139,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_144_inv_0_info_217;
// -- Table: inv_0.@info.218
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_145_inv_0_info_218 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<140,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_145_inv_0_info_218;
// -- Table: inv_0.@info.219
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_146_inv_0_info_219 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<141,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_146_inv_0_info_219;
// -- Table: inv_0.@info.22
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_147_inv_0_info_22 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<142,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_147_inv_0_info_22;
// -- Table: inv_0.@info.220
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_148_inv_0_info_220 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<143,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_148_inv_0_info_220;
// -- Table: inv_0.@info.221
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_149_inv_0_info_221 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<144,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_149_inv_0_info_221;
// -- Table: inv_0.@info.222
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_150_inv_0_info_222 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<145,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_150_inv_0_info_222;
// -- Table: inv_0.@info.223
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_151_inv_0_info_223 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<146,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_151_inv_0_info_223;
// -- Table: inv_0.@info.224
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_152_inv_0_info_224 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<147,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_152_inv_0_info_224;
// -- Table: inv_0.@info.225
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_153_inv_0_info_225 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<148,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_153_inv_0_info_225;
// -- Table: inv_0.@info.226
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_154_inv_0_info_226 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<149,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_154_inv_0_info_226;
// -- Table: inv_0.@info.227
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_155_inv_0_info_227 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<150,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_155_inv_0_info_227;
// -- Table: inv_0.@info.228
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_156_inv_0_info_228 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<151,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_156_inv_0_info_228;
// -- Table: inv_0.@info.229
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_157_inv_0_info_229 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<152,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_157_inv_0_info_229;
// -- Table: inv_0.@info.23
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_158_inv_0_info_23 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<153,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_158_inv_0_info_23;
// -- Table: inv_0.@info.230
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_159_inv_0_info_230 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<154,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_159_inv_0_info_230;
// -- Table: inv_0.@info.231
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_160_inv_0_info_231 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<155,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_160_inv_0_info_231;
// -- Table: inv_0.@info.232
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_161_inv_0_info_232 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<156,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_161_inv_0_info_232;
// -- Table: inv_0.@info.233
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_162_inv_0_info_233 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<157,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_162_inv_0_info_233;
// -- Table: inv_0.@info.234
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_163_inv_0_info_234 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<158,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_163_inv_0_info_234;
// -- Table: inv_0.@info.235
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_164_inv_0_info_235 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<159,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_164_inv_0_info_235;
// -- Table: inv_0.@info.236
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_165_inv_0_info_236 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<160,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_165_inv_0_info_236;
// -- Table: inv_0.@info.237
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_166_inv_0_info_237 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<161,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_166_inv_0_info_237;
// -- Table: inv_0.@info.238
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_167_inv_0_info_238 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<162,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_167_inv_0_info_238;
// -- Table: inv_0.@info.239
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_168_inv_0_info_239 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<163,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_168_inv_0_info_239;
// -- Table: inv_0.@info.24
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_169_inv_0_info_24 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<164,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_169_inv_0_info_24;
// -- Table: inv_0.@info.240
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_170_inv_0_info_240 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<165,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_170_inv_0_info_240;
// -- Table: inv_0.@info.241
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_171_inv_0_info_241 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<166,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_171_inv_0_info_241;
// -- Table: inv_0.@info.242
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_172_inv_0_info_242 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<167,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_172_inv_0_info_242;
// -- Table: inv_0.@info.243
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_173_inv_0_info_243 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<168,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_173_inv_0_info_243;
// -- Table: inv_0.@info.244
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_174_inv_0_info_244 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<169,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_174_inv_0_info_244;
// -- Table: inv_0.@info.245
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_175_inv_0_info_245 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<170,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_175_inv_0_info_245;
// -- Table: inv_0.@info.246
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_176_inv_0_info_246 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<171,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_176_inv_0_info_246;
// -- Table: inv_0.@info.247
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_177_inv_0_info_247 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<172,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_177_inv_0_info_247;
// -- Table: inv_0.@info.248
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_178_inv_0_info_248 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<173,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_178_inv_0_info_248;
// -- Table: inv_0.@info.249
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_179_inv_0_info_249 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<174,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_179_inv_0_info_249;
// -- Table: inv_0.@info.25
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_180_inv_0_info_25 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<175,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_180_inv_0_info_25;
// -- Table: inv_0.@info.250
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_181_inv_0_info_250 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<176,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_181_inv_0_info_250;
// -- Table: inv_0.@info.251
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_182_inv_0_info_251 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<177,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_182_inv_0_info_251;
// -- Table: inv_0.@info.252
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_183_inv_0_info_252 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<178,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_183_inv_0_info_252;
// -- Table: inv_0.@info.253
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_184_inv_0_info_253 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<179,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_184_inv_0_info_253;
// -- Table: inv_0.@info.254
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_185_inv_0_info_254 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<180,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_185_inv_0_info_254;
// -- Table: inv_0.@info.255
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_186_inv_0_info_255 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<181,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_186_inv_0_info_255;
// -- Table: inv_0.@info.256
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_187_inv_0_info_256 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<182,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_187_inv_0_info_256;
// -- Table: inv_0.@info.257
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_188_inv_0_info_257 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<183,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_188_inv_0_info_257;
// -- Table: inv_0.@info.258
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_189_inv_0_info_258 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<184,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_189_inv_0_info_258;
// -- Table: inv_0.@info.259
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_190_inv_0_info_259 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<185,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_190_inv_0_info_259;
// -- Table: inv_0.@info.26
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_191_inv_0_info_26 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<186,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_191_inv_0_info_26;
// -- Table: inv_0.@info.260
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_192_inv_0_info_260 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<187,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_192_inv_0_info_260;
// -- Table: inv_0.@info.261
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_193_inv_0_info_261 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<188,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_193_inv_0_info_261;
// -- Table: inv_0.@info.262
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_194_inv_0_info_262 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<189,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_194_inv_0_info_262;
// -- Table: inv_0.@info.263
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_195_inv_0_info_263 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<190,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_195_inv_0_info_263;
// -- Table: inv_0.@info.264
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_196_inv_0_info_264 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<191,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_196_inv_0_info_264;
// -- Table: inv_0.@info.265
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_197_inv_0_info_265 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<192,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_197_inv_0_info_265;
// -- Table: inv_0.@info.266
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_198_inv_0_info_266 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<193,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_198_inv_0_info_266;
// -- Table: inv_0.@info.267
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_199_inv_0_info_267 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<194,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_199_inv_0_info_267;
// -- Table: inv_0.@info.268
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_200_inv_0_info_268 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<195,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_200_inv_0_info_268;
// -- Table: inv_0.@info.269
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_201_inv_0_info_269 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<196,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_201_inv_0_info_269;
// -- Table: inv_0.@info.27
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_202_inv_0_info_27 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<197,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_202_inv_0_info_27;
// -- Table: inv_0.@info.270
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_203_inv_0_info_270 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<198,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_203_inv_0_info_270;
// -- Table: inv_0.@info.271
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_204_inv_0_info_271 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<199,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_204_inv_0_info_271;
// -- Table: inv_0.@info.272
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_205_inv_0_info_272 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<200,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_205_inv_0_info_272;
// -- Table: inv_0.@info.273
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_206_inv_0_info_273 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<201,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_206_inv_0_info_273;
// -- Table: inv_0.@info.274
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_207_inv_0_info_274 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<202,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_207_inv_0_info_274;
// -- Table: inv_0.@info.275
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_208_inv_0_info_275 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<203,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_208_inv_0_info_275;
// -- Table: inv_0.@info.276
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_209_inv_0_info_276 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<204,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_209_inv_0_info_276;
// -- Table: inv_0.@info.277
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_210_inv_0_info_277 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<205,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_210_inv_0_info_277;
// -- Table: inv_0.@info.278
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_211_inv_0_info_278 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<206,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_211_inv_0_info_278;
// -- Table: inv_0.@info.279
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_212_inv_0_info_279 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<207,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_212_inv_0_info_279;
// -- Table: inv_0.@info.28
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_213_inv_0_info_28 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<208,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_213_inv_0_info_28;
// -- Table: inv_0.@info.280
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_214_inv_0_info_280 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<209,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_214_inv_0_info_280;
// -- Table: inv_0.@info.281
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_215_inv_0_info_281 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<210,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_215_inv_0_info_281;
// -- Table: inv_0.@info.282
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_216_inv_0_info_282 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<211,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_216_inv_0_info_282;
// -- Table: inv_0.@info.283
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_217_inv_0_info_283 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<212,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_217_inv_0_info_283;
// -- Table: inv_0.@info.284
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_218_inv_0_info_284 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<213,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_218_inv_0_info_284;
// -- Table: inv_0.@info.285
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_219_inv_0_info_285 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<214,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_219_inv_0_info_285;
// -- Table: inv_0.@info.286
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_220_inv_0_info_286 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<215,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_220_inv_0_info_286;
// -- Table: inv_0.@info.287
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_221_inv_0_info_287 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<216,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_221_inv_0_info_287;
// -- Table: inv_0.@info.288
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_222_inv_0_info_288 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<217,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_222_inv_0_info_288;
// -- Table: inv_0.@info.289
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_223_inv_0_info_289 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<218,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_223_inv_0_info_289;
// -- Table: inv_0.@info.29
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_224_inv_0_info_29 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<219,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_224_inv_0_info_29;
// -- Table: inv_0.@info.290
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_225_inv_0_info_290 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<220,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_225_inv_0_info_290;
// -- Table: inv_0.@info.291
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_226_inv_0_info_291 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<221,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_226_inv_0_info_291;
// -- Table: inv_0.@info.292
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_227_inv_0_info_292 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<222,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_227_inv_0_info_292;
// -- Table: inv_0.@info.293
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_228_inv_0_info_293 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<223,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_228_inv_0_info_293;
// -- Table: inv_0.@info.294
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_229_inv_0_info_294 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<224,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_229_inv_0_info_294;
// -- Table: inv_0.@info.295
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_230_inv_0_info_295 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<225,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_230_inv_0_info_295;
// -- Table: inv_0.@info.296
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_231_inv_0_info_296 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<226,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_231_inv_0_info_296;
// -- Table: inv_0.@info.297
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_232_inv_0_info_297 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<227,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_232_inv_0_info_297;
// -- Table: inv_0.@info.298
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_233_inv_0_info_298 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<228,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_233_inv_0_info_298;
// -- Table: inv_0.@info.299
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_234_inv_0_info_299 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<229,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_234_inv_0_info_299;
// -- Table: inv_0.@info.3
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_235_inv_0_info_3 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<230,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_235_inv_0_info_3;
// -- Table: inv_0.@info.30
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_236_inv_0_info_30 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<231,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_236_inv_0_info_30;
// -- Table: inv_0.@info.300
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_237_inv_0_info_300 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<232,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_237_inv_0_info_300;
// -- Table: inv_0.@info.301
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_238_inv_0_info_301 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<233,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_238_inv_0_info_301;
// -- Table: inv_0.@info.302
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_239_inv_0_info_302 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<234,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_239_inv_0_info_302;
// -- Table: inv_0.@info.303
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_240_inv_0_info_303 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<235,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_240_inv_0_info_303;
// -- Table: inv_0.@info.304
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_241_inv_0_info_304 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<236,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_241_inv_0_info_304;
// -- Table: inv_0.@info.305
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_242_inv_0_info_305 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<237,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_242_inv_0_info_305;
// -- Table: inv_0.@info.306
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_243_inv_0_info_306 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<238,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_243_inv_0_info_306;
// -- Table: inv_0.@info.307
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_244_inv_0_info_307 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<239,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_244_inv_0_info_307;
// -- Table: inv_0.@info.308
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_245_inv_0_info_308 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<240,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_245_inv_0_info_308;
// -- Table: inv_0.@info.309
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_246_inv_0_info_309 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<241,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_246_inv_0_info_309;
// -- Table: inv_0.@info.31
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_247_inv_0_info_31 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<242,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_247_inv_0_info_31;
// -- Table: inv_0.@info.310
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_248_inv_0_info_310 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<243,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_248_inv_0_info_310;
// -- Table: inv_0.@info.311
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_249_inv_0_info_311 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<244,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_249_inv_0_info_311;
// -- Table: inv_0.@info.312
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_250_inv_0_info_312 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<245,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_250_inv_0_info_312;
// -- Table: inv_0.@info.313
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_251_inv_0_info_313 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<246,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_251_inv_0_info_313;
// -- Table: inv_0.@info.314
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_252_inv_0_info_314 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<247,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_252_inv_0_info_314;
// -- Table: inv_0.@info.315
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_253_inv_0_info_315 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<248,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_253_inv_0_info_315;
// -- Table: inv_0.@info.316
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_254_inv_0_info_316 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<249,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_254_inv_0_info_316;
// -- Table: inv_0.@info.317
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_255_inv_0_info_317 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<250,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_255_inv_0_info_317;
// -- Table: inv_0.@info.318
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_256_inv_0_info_318 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<251,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_256_inv_0_info_318;
// -- Table: inv_0.@info.319
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_257_inv_0_info_319 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<252,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_257_inv_0_info_319;
// -- Table: inv_0.@info.32
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_258_inv_0_info_32 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<253,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_258_inv_0_info_32;
// -- Table: inv_0.@info.320
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_259_inv_0_info_320 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<254,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_259_inv_0_info_320;
// -- Table: inv_0.@info.321
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_260_inv_0_info_321 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<255,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_260_inv_0_info_321;
// -- Table: inv_0.@info.322
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_261_inv_0_info_322 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<256,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_261_inv_0_info_322;
// -- Table: inv_0.@info.323
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_262_inv_0_info_323 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<257,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_262_inv_0_info_323;
// -- Table: inv_0.@info.324
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_263_inv_0_info_324 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<258,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_263_inv_0_info_324;
// -- Table: inv_0.@info.325
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_264_inv_0_info_325 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<259,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_264_inv_0_info_325;
// -- Table: inv_0.@info.326
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_265_inv_0_info_326 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<260,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_265_inv_0_info_326;
// -- Table: inv_0.@info.327
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_266_inv_0_info_327 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<261,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_266_inv_0_info_327;
// -- Table: inv_0.@info.328
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_267_inv_0_info_328 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<262,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_267_inv_0_info_328;
// -- Table: inv_0.@info.329
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_268_inv_0_info_329 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<263,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_268_inv_0_info_329;
// -- Table: inv_0.@info.33
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_269_inv_0_info_33 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<264,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_269_inv_0_info_33;
// -- Table: inv_0.@info.330
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_270_inv_0_info_330 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<265,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_270_inv_0_info_330;
// -- Table: inv_0.@info.331
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_271_inv_0_info_331 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<266,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_271_inv_0_info_331;
// -- Table: inv_0.@info.332
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_272_inv_0_info_332 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<267,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_272_inv_0_info_332;
// -- Table: inv_0.@info.333
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_273_inv_0_info_333 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<268,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_273_inv_0_info_333;
// -- Table: inv_0.@info.334
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_274_inv_0_info_334 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<269,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_274_inv_0_info_334;
// -- Table: inv_0.@info.335
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_275_inv_0_info_335 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<270,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_275_inv_0_info_335;
// -- Table: inv_0.@info.336
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_276_inv_0_info_336 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<271,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_276_inv_0_info_336;
// -- Table: inv_0.@info.337
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_277_inv_0_info_337 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<272,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_277_inv_0_info_337;
// -- Table: inv_0.@info.338
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_278_inv_0_info_338 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<273,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_278_inv_0_info_338;
// -- Table: inv_0.@info.339
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_279_inv_0_info_339 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<274,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_279_inv_0_info_339;
// -- Table: inv_0.@info.34
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_280_inv_0_info_34 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<275,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_280_inv_0_info_34;
// -- Table: inv_0.@info.340
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_281_inv_0_info_340 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<276,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_281_inv_0_info_340;
// -- Table: inv_0.@info.341
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_282_inv_0_info_341 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<277,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_282_inv_0_info_341;
// -- Table: inv_0.@info.342
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_283_inv_0_info_342 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<278,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_283_inv_0_info_342;
// -- Table: inv_0.@info.343
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_284_inv_0_info_343 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<279,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_284_inv_0_info_343;
// -- Table: inv_0.@info.344
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_285_inv_0_info_344 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<280,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_285_inv_0_info_344;
// -- Table: inv_0.@info.345
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_286_inv_0_info_345 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<281,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_286_inv_0_info_345;
// -- Table: inv_0.@info.346
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_287_inv_0_info_346 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<282,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_287_inv_0_info_346;
// -- Table: inv_0.@info.347
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_288_inv_0_info_347 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<283,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_288_inv_0_info_347;
// -- Table: inv_0.@info.348
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_289_inv_0_info_348 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<284,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_289_inv_0_info_348;
// -- Table: inv_0.@info.349
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_290_inv_0_info_349 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<285,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_290_inv_0_info_349;
// -- Table: inv_0.@info.35
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_291_inv_0_info_35 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<286,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_291_inv_0_info_35;
// -- Table: inv_0.@info.350
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_292_inv_0_info_350 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<287,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_292_inv_0_info_350;
// -- Table: inv_0.@info.36
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_293_inv_0_info_36 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<288,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_293_inv_0_info_36;
// -- Table: inv_0.@info.37
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_294_inv_0_info_37 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<289,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_294_inv_0_info_37;
// -- Table: inv_0.@info.38
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_295_inv_0_info_38 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<290,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_295_inv_0_info_38;
// -- Table: inv_0.@info.39
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_296_inv_0_info_39 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<291,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_296_inv_0_info_39;
// -- Table: inv_0.@info.4
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_297_inv_0_info_4 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<292,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_297_inv_0_info_4;
// -- Table: inv_0.@info.40
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_298_inv_0_info_40 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<293,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_298_inv_0_info_40;
// -- Table: inv_0.@info.41
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_299_inv_0_info_41 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<294,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_299_inv_0_info_41;
// -- Table: inv_0.@info.42
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_300_inv_0_info_42 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<295,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_300_inv_0_info_42;
// -- Table: inv_0.@info.43
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_301_inv_0_info_43 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<296,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_301_inv_0_info_43;
// -- Table: inv_0.@info.44
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_302_inv_0_info_44 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<297,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_302_inv_0_info_44;
// -- Table: inv_0.@info.45
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_303_inv_0_info_45 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<298,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_303_inv_0_info_45;
// -- Table: inv_0.@info.46
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_304_inv_0_info_46 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<299,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_304_inv_0_info_46;
// -- Table: inv_0.@info.47
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_305_inv_0_info_47 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<300,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_305_inv_0_info_47;
// -- Table: inv_0.@info.48
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_306_inv_0_info_48 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<301,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_306_inv_0_info_48;
// -- Table: inv_0.@info.49
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_307_inv_0_info_49 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<302,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_307_inv_0_info_49;
// -- Table: inv_0.@info.5
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_308_inv_0_info_5 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<303,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_308_inv_0_info_5;
// -- Table: inv_0.@info.50
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_309_inv_0_info_50 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<304,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_309_inv_0_info_50;
// -- Table: inv_0.@info.51
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_310_inv_0_info_51 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<305,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_310_inv_0_info_51;
// -- Table: inv_0.@info.52
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_311_inv_0_info_52 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<306,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_311_inv_0_info_52;
// -- Table: inv_0.@info.53
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_312_inv_0_info_53 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<307,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_312_inv_0_info_53;
// -- Table: inv_0.@info.54
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_313_inv_0_info_54 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<308,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_313_inv_0_info_54;
// -- Table: inv_0.@info.55
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_314_inv_0_info_55 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<309,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_314_inv_0_info_55;
// -- Table: inv_0.@info.56
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_315_inv_0_info_56 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<310,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_315_inv_0_info_56;
// -- Table: inv_0.@info.57
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_316_inv_0_info_57 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<311,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_316_inv_0_info_57;
// -- Table: inv_0.@info.58
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_317_inv_0_info_58 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<312,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_317_inv_0_info_58;
// -- Table: inv_0.@info.59
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_318_inv_0_info_59 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<313,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_318_inv_0_info_59;
// -- Table: inv_0.@info.6
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_319_inv_0_info_6 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<314,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_319_inv_0_info_6;
// -- Table: inv_0.@info.60
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_320_inv_0_info_60 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<315,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_320_inv_0_info_60;
// -- Table: inv_0.@info.61
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_321_inv_0_info_61 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<316,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_321_inv_0_info_61;
// -- Table: inv_0.@info.62
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_322_inv_0_info_62 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<317,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_322_inv_0_info_62;
// -- Table: inv_0.@info.63
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_323_inv_0_info_63 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<318,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_323_inv_0_info_63;
// -- Table: inv_0.@info.64
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_324_inv_0_info_64 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<319,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_324_inv_0_info_64;
// -- Table: inv_0.@info.65
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_325_inv_0_info_65 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<320,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_325_inv_0_info_65;
// -- Table: inv_0.@info.66
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_326_inv_0_info_66 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<321,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_326_inv_0_info_66;
// -- Table: inv_0.@info.67
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_327_inv_0_info_67 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<322,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_327_inv_0_info_67;
// -- Table: inv_0.@info.68
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_328_inv_0_info_68 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<323,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_328_inv_0_info_68;
// -- Table: inv_0.@info.69
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_329_inv_0_info_69 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<324,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_329_inv_0_info_69;
// -- Table: inv_0.@info.7
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_330_inv_0_info_7 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<325,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_330_inv_0_info_7;
// -- Table: inv_0.@info.70
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_331_inv_0_info_70 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<326,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_331_inv_0_info_70;
// -- Table: inv_0.@info.71
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_332_inv_0_info_71 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<327,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_332_inv_0_info_71;
// -- Table: inv_0.@info.72
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_333_inv_0_info_72 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<328,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_333_inv_0_info_72;
// -- Table: inv_0.@info.73
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_334_inv_0_info_73 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<329,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_334_inv_0_info_73;
// -- Table: inv_0.@info.74
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_335_inv_0_info_74 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<330,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_335_inv_0_info_74;
// -- Table: inv_0.@info.75
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_336_inv_0_info_75 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<331,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_336_inv_0_info_75;
// -- Table: inv_0.@info.76
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_337_inv_0_info_76 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<332,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_337_inv_0_info_76;
// -- Table: inv_0.@info.77
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_338_inv_0_info_77 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<333,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_338_inv_0_info_77;
// -- Table: inv_0.@info.78
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_339_inv_0_info_78 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<334,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_339_inv_0_info_78;
// -- Table: inv_0.@info.79
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_340_inv_0_info_79 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<335,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_340_inv_0_info_79;
// -- Table: inv_0.@info.8
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_341_inv_0_info_8 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<336,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_341_inv_0_info_8;
// -- Table: inv_0.@info.80
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_342_inv_0_info_80 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<337,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_342_inv_0_info_80;
// -- Table: inv_0.@info.81
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_343_inv_0_info_81 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<338,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_343_inv_0_info_81;
// -- Table: inv_0.@info.82
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_344_inv_0_info_82 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<339,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_344_inv_0_info_82;
// -- Table: inv_0.@info.83
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_345_inv_0_info_83 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<340,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_345_inv_0_info_83;
// -- Table: inv_0.@info.84
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_346_inv_0_info_84 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<341,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_346_inv_0_info_84;
// -- Table: inv_0.@info.85
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_347_inv_0_info_85 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<342,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_347_inv_0_info_85;
// -- Table: inv_0.@info.86
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_348_inv_0_info_86 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<343,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_348_inv_0_info_86;
// -- Table: inv_0.@info.87
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_349_inv_0_info_87 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<344,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_349_inv_0_info_87;
// -- Table: inv_0.@info.88
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_350_inv_0_info_88 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<345,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_350_inv_0_info_88;
// -- Table: inv_0.@info.89
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_351_inv_0_info_89 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<346,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_351_inv_0_info_89;
// -- Table: inv_0.@info.9
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_352_inv_0_info_9 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<347,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_352_inv_0_info_9;
// -- Table: inv_0.@info.90
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_353_inv_0_info_90 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<348,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_353_inv_0_info_90;
// -- Table: inv_0.@info.91
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_354_inv_0_info_91 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<349,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_354_inv_0_info_91;
// -- Table: inv_0.@info.92
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_355_inv_0_info_92 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<350,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_355_inv_0_info_92;
// -- Table: inv_0.@info.93
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_356_inv_0_info_93 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<351,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_356_inv_0_info_93;
// -- Table: inv_0.@info.94
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_357_inv_0_info_94 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<352,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_357_inv_0_info_94;
// -- Table: inv_0.@info.95
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_358_inv_0_info_95 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<353,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_358_inv_0_info_95;
// -- Table: inv_0.@info.96
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_359_inv_0_info_96 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<354,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_359_inv_0_info_96;
// -- Table: inv_0.@info.97
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_360_inv_0_info_97 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<355,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_360_inv_0_info_97;
// -- Table: inv_0.@info.98
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_361_inv_0_info_98 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<356,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_361_inv_0_info_98;
// -- Table: inv_0.@info.99
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_362_inv_0_info_99 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<357,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_362_inv_0_info_99;
// -- Table: livesIn.@info.1
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_363_livesIn_info_1 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<358,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_363_livesIn_info_1;
// -- Table: livesIn.@info.10
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_364_livesIn_info_10 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<359,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_364_livesIn_info_10;
// -- Table: livesIn.@info.100
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_365_livesIn_info_100 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<360,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_365_livesIn_info_100;
// -- Table: livesIn.@info.101
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_366_livesIn_info_101 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<361,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_366_livesIn_info_101;
// -- Table: livesIn.@info.102
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_367_livesIn_info_102 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<362,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_367_livesIn_info_102;
// -- Table: livesIn.@info.103
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_368_livesIn_info_103 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<363,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_368_livesIn_info_103;
// -- Table: livesIn.@info.104
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_369_livesIn_info_104 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<364,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_369_livesIn_info_104;
// -- Table: livesIn.@info.105
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_370_livesIn_info_105 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<365,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_370_livesIn_info_105;
// -- Table: livesIn.@info.106
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_371_livesIn_info_106 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<366,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_371_livesIn_info_106;
// -- Table: livesIn.@info.107
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_372_livesIn_info_107 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<367,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_372_livesIn_info_107;
// -- Table: livesIn.@info.108
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_373_livesIn_info_108 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<368,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_373_livesIn_info_108;
// -- Table: livesIn.@info.109
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_374_livesIn_info_109 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<369,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_374_livesIn_info_109;
// -- Table: livesIn.@info.11
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_375_livesIn_info_11 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<370,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_375_livesIn_info_11;
// -- Table: livesIn.@info.110
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_376_livesIn_info_110 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<371,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_376_livesIn_info_110;
// -- Table: livesIn.@info.111
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_377_livesIn_info_111 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<372,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_377_livesIn_info_111;
// -- Table: livesIn.@info.112
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_378_livesIn_info_112 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<373,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_378_livesIn_info_112;
// -- Table: livesIn.@info.113
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_379_livesIn_info_113 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<374,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_379_livesIn_info_113;
// -- Table: livesIn.@info.114
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_380_livesIn_info_114 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<375,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_380_livesIn_info_114;
// -- Table: livesIn.@info.115
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_381_livesIn_info_115 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<376,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_381_livesIn_info_115;
// -- Table: livesIn.@info.116
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_382_livesIn_info_116 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<377,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_382_livesIn_info_116;
// -- Table: livesIn.@info.117
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_383_livesIn_info_117 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<378,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_383_livesIn_info_117;
// -- Table: livesIn.@info.118
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_384_livesIn_info_118 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<379,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_384_livesIn_info_118;
// -- Table: livesIn.@info.119
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_385_livesIn_info_119 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<380,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_385_livesIn_info_119;
// -- Table: livesIn.@info.12
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_386_livesIn_info_12 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<381,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_386_livesIn_info_12;
// -- Table: livesIn.@info.120
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_387_livesIn_info_120 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<382,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_387_livesIn_info_120;
// -- Table: livesIn.@info.121
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_388_livesIn_info_121 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<383,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_388_livesIn_info_121;
// -- Table: livesIn.@info.122
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_389_livesIn_info_122 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<384,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_389_livesIn_info_122;
// -- Table: livesIn.@info.123
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_390_livesIn_info_123 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<385,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_390_livesIn_info_123;
// -- Table: livesIn.@info.124
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_391_livesIn_info_124 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<386,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_391_livesIn_info_124;
// -- Table: livesIn.@info.125
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_392_livesIn_info_125 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<387,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_392_livesIn_info_125;
// -- Table: livesIn.@info.126
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_393_livesIn_info_126 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<388,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_393_livesIn_info_126;
// -- Table: livesIn.@info.127
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_394_livesIn_info_127 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<389,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_394_livesIn_info_127;
// -- Table: livesIn.@info.128
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_395_livesIn_info_128 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<390,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_395_livesIn_info_128;
// -- Table: livesIn.@info.129
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_396_livesIn_info_129 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<391,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_396_livesIn_info_129;
// -- Table: livesIn.@info.13
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_397_livesIn_info_13 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<392,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_397_livesIn_info_13;
// -- Table: livesIn.@info.130
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_398_livesIn_info_130 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<393,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_398_livesIn_info_130;
// -- Table: livesIn.@info.131
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_399_livesIn_info_131 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<394,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_399_livesIn_info_131;
// -- Table: livesIn.@info.132
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_400_livesIn_info_132 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<395,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_400_livesIn_info_132;
// -- Table: livesIn.@info.133
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_401_livesIn_info_133 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<396,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_401_livesIn_info_133;
// -- Table: livesIn.@info.134
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_402_livesIn_info_134 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<397,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_402_livesIn_info_134;
// -- Table: livesIn.@info.135
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_403_livesIn_info_135 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<398,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_403_livesIn_info_135;
// -- Table: livesIn.@info.136
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_404_livesIn_info_136 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<399,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_404_livesIn_info_136;
// -- Table: livesIn.@info.137
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_405_livesIn_info_137 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<400,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_405_livesIn_info_137;
// -- Table: livesIn.@info.138
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_406_livesIn_info_138 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<401,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_406_livesIn_info_138;
// -- Table: livesIn.@info.139
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_407_livesIn_info_139 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<402,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_407_livesIn_info_139;
// -- Table: livesIn.@info.14
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_408_livesIn_info_14 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<403,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_408_livesIn_info_14;
// -- Table: livesIn.@info.140
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_409_livesIn_info_140 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<404,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_409_livesIn_info_140;
// -- Table: livesIn.@info.141
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_410_livesIn_info_141 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<405,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_410_livesIn_info_141;
// -- Table: livesIn.@info.142
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_411_livesIn_info_142 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<406,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_411_livesIn_info_142;
// -- Table: livesIn.@info.143
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_412_livesIn_info_143 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<407,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_412_livesIn_info_143;
// -- Table: livesIn.@info.144
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_413_livesIn_info_144 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<408,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_413_livesIn_info_144;
// -- Table: livesIn.@info.145
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_414_livesIn_info_145 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<409,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_414_livesIn_info_145;
// -- Table: livesIn.@info.146
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_415_livesIn_info_146 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<410,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_415_livesIn_info_146;
// -- Table: livesIn.@info.147
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_416_livesIn_info_147 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<411,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_416_livesIn_info_147;
// -- Table: livesIn.@info.148
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_417_livesIn_info_148 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<412,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_417_livesIn_info_148;
// -- Table: livesIn.@info.149
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_418_livesIn_info_149 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<413,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_418_livesIn_info_149;
// -- Table: livesIn.@info.15
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_419_livesIn_info_15 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<414,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_419_livesIn_info_15;
// -- Table: livesIn.@info.150
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_420_livesIn_info_150 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<415,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_420_livesIn_info_150;
// -- Table: livesIn.@info.151
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_421_livesIn_info_151 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<416,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_421_livesIn_info_151;
// -- Table: livesIn.@info.152
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_422_livesIn_info_152 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<417,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_422_livesIn_info_152;
// -- Table: livesIn.@info.153
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_423_livesIn_info_153 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<418,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_423_livesIn_info_153;
// -- Table: livesIn.@info.154
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_424_livesIn_info_154 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<419,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_424_livesIn_info_154;
// -- Table: livesIn.@info.155
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_425_livesIn_info_155 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<420,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_425_livesIn_info_155;
// -- Table: livesIn.@info.156
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_426_livesIn_info_156 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<421,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_426_livesIn_info_156;
// -- Table: livesIn.@info.157
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_427_livesIn_info_157 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<422,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_427_livesIn_info_157;
// -- Table: livesIn.@info.158
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_428_livesIn_info_158 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<423,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_428_livesIn_info_158;
// -- Table: livesIn.@info.159
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_429_livesIn_info_159 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<424,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_429_livesIn_info_159;
// -- Table: livesIn.@info.16
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_430_livesIn_info_16 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<425,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_430_livesIn_info_16;
// -- Table: livesIn.@info.160
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_431_livesIn_info_160 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<426,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_431_livesIn_info_160;
// -- Table: livesIn.@info.161
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_432_livesIn_info_161 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<427,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_432_livesIn_info_161;
// -- Table: livesIn.@info.162
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_433_livesIn_info_162 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<428,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_433_livesIn_info_162;
// -- Table: livesIn.@info.163
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_434_livesIn_info_163 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<429,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_434_livesIn_info_163;
// -- Table: livesIn.@info.164
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_435_livesIn_info_164 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<430,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_435_livesIn_info_164;
// -- Table: livesIn.@info.165
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_436_livesIn_info_165 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<431,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_436_livesIn_info_165;
// -- Table: livesIn.@info.166
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_437_livesIn_info_166 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<432,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_437_livesIn_info_166;
// -- Table: livesIn.@info.167
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_438_livesIn_info_167 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<433,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_438_livesIn_info_167;
// -- Table: livesIn.@info.168
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_439_livesIn_info_168 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<434,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_439_livesIn_info_168;
// -- Table: livesIn.@info.169
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_440_livesIn_info_169 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<435,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_440_livesIn_info_169;
// -- Table: livesIn.@info.17
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_441_livesIn_info_17 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<436,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_441_livesIn_info_17;
// -- Table: livesIn.@info.170
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_442_livesIn_info_170 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<437,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_442_livesIn_info_170;
// -- Table: livesIn.@info.171
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_443_livesIn_info_171 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<438,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_443_livesIn_info_171;
// -- Table: livesIn.@info.172
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_444_livesIn_info_172 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<439,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_444_livesIn_info_172;
// -- Table: livesIn.@info.173
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_445_livesIn_info_173 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<440,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_445_livesIn_info_173;
// -- Table: livesIn.@info.174
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_446_livesIn_info_174 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<441,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_446_livesIn_info_174;
// -- Table: livesIn.@info.175
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_447_livesIn_info_175 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<442,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_447_livesIn_info_175;
// -- Table: livesIn.@info.176
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_448_livesIn_info_176 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<443,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_448_livesIn_info_176;
// -- Table: livesIn.@info.177
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_449_livesIn_info_177 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<444,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_449_livesIn_info_177;
// -- Table: livesIn.@info.178
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_450_livesIn_info_178 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<445,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_450_livesIn_info_178;
// -- Table: livesIn.@info.179
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_451_livesIn_info_179 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<446,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_451_livesIn_info_179;
// -- Table: livesIn.@info.18
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_452_livesIn_info_18 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<447,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_452_livesIn_info_18;
// -- Table: livesIn.@info.180
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_453_livesIn_info_180 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<448,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_453_livesIn_info_180;
// -- Table: livesIn.@info.181
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_454_livesIn_info_181 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<449,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_454_livesIn_info_181;
// -- Table: livesIn.@info.182
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_455_livesIn_info_182 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<450,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_455_livesIn_info_182;
// -- Table: livesIn.@info.183
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_456_livesIn_info_183 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<451,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_456_livesIn_info_183;
// -- Table: livesIn.@info.184
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_457_livesIn_info_184 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<452,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_457_livesIn_info_184;
// -- Table: livesIn.@info.185
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_458_livesIn_info_185 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<453,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_458_livesIn_info_185;
// -- Table: livesIn.@info.186
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_459_livesIn_info_186 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<454,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_459_livesIn_info_186;
// -- Table: livesIn.@info.187
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_460_livesIn_info_187 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<455,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_460_livesIn_info_187;
// -- Table: livesIn.@info.188
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_461_livesIn_info_188 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<456,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_461_livesIn_info_188;
// -- Table: livesIn.@info.189
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_462_livesIn_info_189 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<457,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_462_livesIn_info_189;
// -- Table: livesIn.@info.19
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_463_livesIn_info_19 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<458,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_463_livesIn_info_19;
// -- Table: livesIn.@info.190
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_464_livesIn_info_190 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<459,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_464_livesIn_info_190;
// -- Table: livesIn.@info.191
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_465_livesIn_info_191 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<460,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_465_livesIn_info_191;
// -- Table: livesIn.@info.192
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_466_livesIn_info_192 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<461,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_466_livesIn_info_192;
// -- Table: livesIn.@info.193
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_467_livesIn_info_193 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<462,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_467_livesIn_info_193;
// -- Table: livesIn.@info.194
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_468_livesIn_info_194 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<463,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_468_livesIn_info_194;
// -- Table: livesIn.@info.195
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_469_livesIn_info_195 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<464,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_469_livesIn_info_195;
// -- Table: livesIn.@info.196
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_470_livesIn_info_196 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<465,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_470_livesIn_info_196;
// -- Table: livesIn.@info.197
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_471_livesIn_info_197 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<466,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_471_livesIn_info_197;
// -- Table: livesIn.@info.198
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_472_livesIn_info_198 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<467,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_472_livesIn_info_198;
// -- Table: livesIn.@info.199
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_473_livesIn_info_199 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<468,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_473_livesIn_info_199;
// -- Table: livesIn.@info.2
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_474_livesIn_info_2 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<469,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_474_livesIn_info_2;
// -- Table: livesIn.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_475_livesIn_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<470,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_475_livesIn_info_20;
// -- Table: livesIn.@info.200
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_476_livesIn_info_200 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<471,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_476_livesIn_info_200;
// -- Table: livesIn.@info.201
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_477_livesIn_info_201 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<472,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_477_livesIn_info_201;
// -- Table: livesIn.@info.202
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_478_livesIn_info_202 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<473,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_478_livesIn_info_202;
// -- Table: livesIn.@info.203
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_479_livesIn_info_203 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<474,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_479_livesIn_info_203;
// -- Table: livesIn.@info.204
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_480_livesIn_info_204 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<475,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_480_livesIn_info_204;
// -- Table: livesIn.@info.205
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_481_livesIn_info_205 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<476,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_481_livesIn_info_205;
// -- Table: livesIn.@info.206
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_482_livesIn_info_206 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<477,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_482_livesIn_info_206;
// -- Table: livesIn.@info.207
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_483_livesIn_info_207 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<478,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_483_livesIn_info_207;
// -- Table: livesIn.@info.208
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_484_livesIn_info_208 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<479,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_484_livesIn_info_208;
// -- Table: livesIn.@info.209
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_485_livesIn_info_209 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<480,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_485_livesIn_info_209;
// -- Table: livesIn.@info.21
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_486_livesIn_info_21 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<481,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_486_livesIn_info_21;
// -- Table: livesIn.@info.210
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_487_livesIn_info_210 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<482,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_487_livesIn_info_210;
// -- Table: livesIn.@info.211
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_488_livesIn_info_211 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<483,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_488_livesIn_info_211;
// -- Table: livesIn.@info.212
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_489_livesIn_info_212 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<484,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_489_livesIn_info_212;
// -- Table: livesIn.@info.213
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_490_livesIn_info_213 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<485,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_490_livesIn_info_213;
// -- Table: livesIn.@info.214
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_491_livesIn_info_214 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<486,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_491_livesIn_info_214;
// -- Table: livesIn.@info.215
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_492_livesIn_info_215 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<487,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_492_livesIn_info_215;
// -- Table: livesIn.@info.216
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_493_livesIn_info_216 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<488,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_493_livesIn_info_216;
// -- Table: livesIn.@info.217
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_494_livesIn_info_217 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<489,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_494_livesIn_info_217;
// -- Table: livesIn.@info.218
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_495_livesIn_info_218 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<490,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_495_livesIn_info_218;
// -- Table: livesIn.@info.219
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_496_livesIn_info_219 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<491,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_496_livesIn_info_219;
// -- Table: livesIn.@info.22
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_497_livesIn_info_22 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<492,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_497_livesIn_info_22;
// -- Table: livesIn.@info.220
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_498_livesIn_info_220 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<493,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_498_livesIn_info_220;
// -- Table: livesIn.@info.221
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_499_livesIn_info_221 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<494,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_499_livesIn_info_221;
// -- Table: livesIn.@info.222
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_500_livesIn_info_222 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<495,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_500_livesIn_info_222;
// -- Table: livesIn.@info.223
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_501_livesIn_info_223 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<496,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_501_livesIn_info_223;
// -- Table: livesIn.@info.224
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_502_livesIn_info_224 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<497,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_502_livesIn_info_224;
// -- Table: livesIn.@info.225
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_503_livesIn_info_225 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<498,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_503_livesIn_info_225;
// -- Table: livesIn.@info.226
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_504_livesIn_info_226 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<499,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_504_livesIn_info_226;
// -- Table: livesIn.@info.227
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_505_livesIn_info_227 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<500,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_505_livesIn_info_227;
// -- Table: livesIn.@info.228
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_506_livesIn_info_228 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<501,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_506_livesIn_info_228;
// -- Table: livesIn.@info.229
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_507_livesIn_info_229 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<502,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_507_livesIn_info_229;
// -- Table: livesIn.@info.23
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_508_livesIn_info_23 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<503,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_508_livesIn_info_23;
// -- Table: livesIn.@info.230
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_509_livesIn_info_230 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<504,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_509_livesIn_info_230;
// -- Table: livesIn.@info.231
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_510_livesIn_info_231 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<505,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_510_livesIn_info_231;
// -- Table: livesIn.@info.232
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_511_livesIn_info_232 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<506,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_511_livesIn_info_232;
// -- Table: livesIn.@info.233
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_512_livesIn_info_233 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<507,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_512_livesIn_info_233;
// -- Table: livesIn.@info.234
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_513_livesIn_info_234 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<508,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_513_livesIn_info_234;
// -- Table: livesIn.@info.235
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_514_livesIn_info_235 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<509,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_514_livesIn_info_235;
// -- Table: livesIn.@info.236
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_515_livesIn_info_236 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<510,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_515_livesIn_info_236;
// -- Table: livesIn.@info.237
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_516_livesIn_info_237 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<511,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_516_livesIn_info_237;
// -- Table: livesIn.@info.238
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_517_livesIn_info_238 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<512,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_517_livesIn_info_238;
// -- Table: livesIn.@info.239
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_518_livesIn_info_239 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<513,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_518_livesIn_info_239;
// -- Table: livesIn.@info.24
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_519_livesIn_info_24 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<514,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_519_livesIn_info_24;
// -- Table: livesIn.@info.240
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_520_livesIn_info_240 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<515,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_520_livesIn_info_240;
// -- Table: livesIn.@info.241
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_521_livesIn_info_241 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<516,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_521_livesIn_info_241;
// -- Table: livesIn.@info.242
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_522_livesIn_info_242 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<517,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_522_livesIn_info_242;
// -- Table: livesIn.@info.243
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_523_livesIn_info_243 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<518,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_523_livesIn_info_243;
// -- Table: livesIn.@info.244
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_524_livesIn_info_244 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<519,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_524_livesIn_info_244;
// -- Table: livesIn.@info.245
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_525_livesIn_info_245 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<520,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_525_livesIn_info_245;
// -- Table: livesIn.@info.246
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_526_livesIn_info_246 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<521,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_526_livesIn_info_246;
// -- Table: livesIn.@info.247
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_527_livesIn_info_247 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<522,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_527_livesIn_info_247;
// -- Table: livesIn.@info.248
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_528_livesIn_info_248 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<523,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_528_livesIn_info_248;
// -- Table: livesIn.@info.249
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_529_livesIn_info_249 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<524,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_529_livesIn_info_249;
// -- Table: livesIn.@info.25
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_530_livesIn_info_25 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<525,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_530_livesIn_info_25;
// -- Table: livesIn.@info.250
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_531_livesIn_info_250 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<526,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_531_livesIn_info_250;
// -- Table: livesIn.@info.251
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_532_livesIn_info_251 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<527,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_532_livesIn_info_251;
// -- Table: livesIn.@info.252
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_533_livesIn_info_252 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<528,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_533_livesIn_info_252;
// -- Table: livesIn.@info.253
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_534_livesIn_info_253 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<529,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_534_livesIn_info_253;
// -- Table: livesIn.@info.254
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_535_livesIn_info_254 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<530,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_535_livesIn_info_254;
// -- Table: livesIn.@info.255
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_536_livesIn_info_255 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<531,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_536_livesIn_info_255;
// -- Table: livesIn.@info.256
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_537_livesIn_info_256 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<532,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_537_livesIn_info_256;
// -- Table: livesIn.@info.257
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_538_livesIn_info_257 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<533,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_538_livesIn_info_257;
// -- Table: livesIn.@info.258
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_539_livesIn_info_258 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<534,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_539_livesIn_info_258;
// -- Table: livesIn.@info.259
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_540_livesIn_info_259 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<535,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_540_livesIn_info_259;
// -- Table: livesIn.@info.26
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_541_livesIn_info_26 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<536,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_541_livesIn_info_26;
// -- Table: livesIn.@info.260
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_542_livesIn_info_260 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<537,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_542_livesIn_info_260;
// -- Table: livesIn.@info.261
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_543_livesIn_info_261 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<538,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_543_livesIn_info_261;
// -- Table: livesIn.@info.262
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_544_livesIn_info_262 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<539,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_544_livesIn_info_262;
// -- Table: livesIn.@info.263
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_545_livesIn_info_263 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<540,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_545_livesIn_info_263;
// -- Table: livesIn.@info.264
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_546_livesIn_info_264 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<541,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_546_livesIn_info_264;
// -- Table: livesIn.@info.27
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_547_livesIn_info_27 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<542,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_547_livesIn_info_27;
// -- Table: livesIn.@info.28
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_548_livesIn_info_28 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<543,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_548_livesIn_info_28;
// -- Table: livesIn.@info.29
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_549_livesIn_info_29 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<544,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_549_livesIn_info_29;
// -- Table: livesIn.@info.3
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_550_livesIn_info_3 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<545,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_550_livesIn_info_3;
// -- Table: livesIn.@info.30
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_551_livesIn_info_30 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<546,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_551_livesIn_info_30;
// -- Table: livesIn.@info.31
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_552_livesIn_info_31 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<547,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_552_livesIn_info_31;
// -- Table: livesIn.@info.32
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_553_livesIn_info_32 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<548,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_553_livesIn_info_32;
// -- Table: livesIn.@info.33
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_554_livesIn_info_33 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<549,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_554_livesIn_info_33;
// -- Table: livesIn.@info.34
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_555_livesIn_info_34 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<550,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_555_livesIn_info_34;
// -- Table: livesIn.@info.35
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_556_livesIn_info_35 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<551,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_556_livesIn_info_35;
// -- Table: livesIn.@info.36
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_557_livesIn_info_36 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<552,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_557_livesIn_info_36;
// -- Table: livesIn.@info.37
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_558_livesIn_info_37 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<553,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_558_livesIn_info_37;
// -- Table: livesIn.@info.38
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_559_livesIn_info_38 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<554,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_559_livesIn_info_38;
// -- Table: livesIn.@info.39
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_560_livesIn_info_39 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<555,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_560_livesIn_info_39;
// -- Table: livesIn.@info.4
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_561_livesIn_info_4 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<556,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_561_livesIn_info_4;
// -- Table: livesIn.@info.40
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_562_livesIn_info_40 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<557,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_562_livesIn_info_40;
// -- Table: livesIn.@info.41
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_563_livesIn_info_41 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<558,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_563_livesIn_info_41;
// -- Table: livesIn.@info.42
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_564_livesIn_info_42 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<559,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_564_livesIn_info_42;
// -- Table: livesIn.@info.43
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_565_livesIn_info_43 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<560,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_565_livesIn_info_43;
// -- Table: livesIn.@info.44
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_566_livesIn_info_44 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<561,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_566_livesIn_info_44;
// -- Table: livesIn.@info.45
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_567_livesIn_info_45 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<562,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_567_livesIn_info_45;
// -- Table: livesIn.@info.46
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_568_livesIn_info_46 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<563,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_568_livesIn_info_46;
// -- Table: livesIn.@info.47
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_569_livesIn_info_47 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<564,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_569_livesIn_info_47;
// -- Table: livesIn.@info.48
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_570_livesIn_info_48 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<565,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_570_livesIn_info_48;
// -- Table: livesIn.@info.49
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_571_livesIn_info_49 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<566,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_571_livesIn_info_49;
// -- Table: livesIn.@info.5
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_572_livesIn_info_5 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<567,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_572_livesIn_info_5;
// -- Table: livesIn.@info.50
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_573_livesIn_info_50 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<568,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_573_livesIn_info_50;
// -- Table: livesIn.@info.51
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_574_livesIn_info_51 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<569,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_574_livesIn_info_51;
// -- Table: livesIn.@info.52
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_575_livesIn_info_52 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<570,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_575_livesIn_info_52;
// -- Table: livesIn.@info.53
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_576_livesIn_info_53 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<571,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_576_livesIn_info_53;
// -- Table: livesIn.@info.54
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_577_livesIn_info_54 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<572,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_577_livesIn_info_54;
// -- Table: livesIn.@info.55
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_578_livesIn_info_55 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<573,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_578_livesIn_info_55;
// -- Table: livesIn.@info.56
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_579_livesIn_info_56 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<574,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_579_livesIn_info_56;
// -- Table: livesIn.@info.57
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_580_livesIn_info_57 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<575,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_580_livesIn_info_57;
// -- Table: livesIn.@info.58
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_581_livesIn_info_58 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<576,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_581_livesIn_info_58;
// -- Table: livesIn.@info.59
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_582_livesIn_info_59 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<577,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_582_livesIn_info_59;
// -- Table: livesIn.@info.6
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_583_livesIn_info_6 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<578,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_583_livesIn_info_6;
// -- Table: livesIn.@info.60
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_584_livesIn_info_60 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<579,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_584_livesIn_info_60;
// -- Table: livesIn.@info.61
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_585_livesIn_info_61 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<580,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_585_livesIn_info_61;
// -- Table: livesIn.@info.62
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_586_livesIn_info_62 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<581,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_586_livesIn_info_62;
// -- Table: livesIn.@info.63
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_587_livesIn_info_63 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<582,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_587_livesIn_info_63;
// -- Table: livesIn.@info.64
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_588_livesIn_info_64 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<583,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_588_livesIn_info_64;
// -- Table: livesIn.@info.65
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_589_livesIn_info_65 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<584,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_589_livesIn_info_65;
// -- Table: livesIn.@info.66
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_590_livesIn_info_66 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<585,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_590_livesIn_info_66;
// -- Table: livesIn.@info.67
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_591_livesIn_info_67 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<586,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_591_livesIn_info_67;
// -- Table: livesIn.@info.68
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_592_livesIn_info_68 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<587,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_592_livesIn_info_68;
// -- Table: livesIn.@info.69
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_593_livesIn_info_69 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<588,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_593_livesIn_info_69;
// -- Table: livesIn.@info.7
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_594_livesIn_info_7 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<589,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_594_livesIn_info_7;
// -- Table: livesIn.@info.70
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_595_livesIn_info_70 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<590,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_595_livesIn_info_70;
// -- Table: livesIn.@info.71
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_596_livesIn_info_71 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<591,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_596_livesIn_info_71;
// -- Table: livesIn.@info.72
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_597_livesIn_info_72 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<592,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_597_livesIn_info_72;
// -- Table: livesIn.@info.73
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_598_livesIn_info_73 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<593,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_598_livesIn_info_73;
// -- Table: livesIn.@info.74
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_599_livesIn_info_74 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<594,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_599_livesIn_info_74;
// -- Table: livesIn.@info.75
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_600_livesIn_info_75 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<595,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_600_livesIn_info_75;
// -- Table: livesIn.@info.76
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_601_livesIn_info_76 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<596,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_601_livesIn_info_76;
// -- Table: livesIn.@info.77
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_602_livesIn_info_77 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<597,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_602_livesIn_info_77;
// -- Table: livesIn.@info.78
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_603_livesIn_info_78 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<598,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_603_livesIn_info_78;
// -- Table: livesIn.@info.79
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_604_livesIn_info_79 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<599,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_604_livesIn_info_79;
// -- Table: livesIn.@info.8
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_605_livesIn_info_8 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<600,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_605_livesIn_info_8;
// -- Table: livesIn.@info.80
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_606_livesIn_info_80 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<601,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_606_livesIn_info_80;
// -- Table: livesIn.@info.81
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_607_livesIn_info_81 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<602,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_607_livesIn_info_81;
// -- Table: livesIn.@info.82
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_608_livesIn_info_82 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<603,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_608_livesIn_info_82;
// -- Table: livesIn.@info.83
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_609_livesIn_info_83 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<604,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_609_livesIn_info_83;
// -- Table: livesIn.@info.84
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_610_livesIn_info_84 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<605,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_610_livesIn_info_84;
// -- Table: livesIn.@info.85
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_611_livesIn_info_85 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<606,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_611_livesIn_info_85;
// -- Table: livesIn.@info.86
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_612_livesIn_info_86 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<607,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_612_livesIn_info_86;
// -- Table: livesIn.@info.87
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_613_livesIn_info_87 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<608,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_613_livesIn_info_87;
// -- Table: livesIn.@info.88
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_614_livesIn_info_88 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<609,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_614_livesIn_info_88;
// -- Table: livesIn.@info.89
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_615_livesIn_info_89 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<610,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_615_livesIn_info_89;
// -- Table: livesIn.@info.9
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_616_livesIn_info_9 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<611,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_616_livesIn_info_9;
// -- Table: livesIn.@info.90
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_617_livesIn_info_90 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<612,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_617_livesIn_info_90;
// -- Table: livesIn.@info.91
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_618_livesIn_info_91 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<613,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_618_livesIn_info_91;
// -- Table: livesIn.@info.92
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_619_livesIn_info_92 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<614,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_619_livesIn_info_92;
// -- Table: livesIn.@info.93
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_620_livesIn_info_93 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<615,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_620_livesIn_info_93;
// -- Table: livesIn.@info.94
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_621_livesIn_info_94 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<616,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_621_livesIn_info_94;
// -- Table: livesIn.@info.95
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_622_livesIn_info_95 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<617,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_622_livesIn_info_95;
// -- Table: livesIn.@info.96
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_623_livesIn_info_96 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<618,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_623_livesIn_info_96;
// -- Table: livesIn.@info.97
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_624_livesIn_info_97 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<619,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_624_livesIn_info_97;
// -- Table: livesIn.@info.98
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_625_livesIn_info_98 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<620,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_625_livesIn_info_98;
// -- Table: livesIn.@info.99
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_626_livesIn_info_99 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<621,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_626_livesIn_info_99;
public:
Sf_souffle_small() : 
wrapper_rel_1_Rule(*rel_1_Rule,symTable,"Rule",std::array<const char *,3>{{"i:number","i:number","i:number"}},std::array<const char *,3>{{"n","@rule_number","@level_number"}}),

wrapper_rel_2_wikisourcelangProperty(*rel_2_wikisourcelangProperty,symTable,"wikisourcelangProperty",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_3_writer(*rel_3_writer,symTable,"writer",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_4_year(*rel_4_year,symTable,"year",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_5_yearOfRelease(*rel_5_yearOfRelease,symTable,"yearOfRelease",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_6_years(*rel_6_years,symTable,"years",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_7_livesIn(*rel_7_livesIn,symTable,"livesIn",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_10_inv_0(*rel_10_inv_0,symTable,"inv_0",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_13_inv_0_info_1(*rel_13_inv_0_info_1,symTable,"inv_0.@info.1",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_14_inv_0_info_10(*rel_14_inv_0_info_10,symTable,"inv_0.@info.10",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_15_inv_0_info_100(*rel_15_inv_0_info_100,symTable,"inv_0.@info.100",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_16_inv_0_info_101(*rel_16_inv_0_info_101,symTable,"inv_0.@info.101",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_17_inv_0_info_102(*rel_17_inv_0_info_102,symTable,"inv_0.@info.102",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_18_inv_0_info_103(*rel_18_inv_0_info_103,symTable,"inv_0.@info.103",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_19_inv_0_info_104(*rel_19_inv_0_info_104,symTable,"inv_0.@info.104",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_20_inv_0_info_105(*rel_20_inv_0_info_105,symTable,"inv_0.@info.105",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_21_inv_0_info_106(*rel_21_inv_0_info_106,symTable,"inv_0.@info.106",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_22_inv_0_info_107(*rel_22_inv_0_info_107,symTable,"inv_0.@info.107",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_23_inv_0_info_108(*rel_23_inv_0_info_108,symTable,"inv_0.@info.108",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_24_inv_0_info_109(*rel_24_inv_0_info_109,symTable,"inv_0.@info.109",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_25_inv_0_info_11(*rel_25_inv_0_info_11,symTable,"inv_0.@info.11",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_26_inv_0_info_110(*rel_26_inv_0_info_110,symTable,"inv_0.@info.110",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_27_inv_0_info_111(*rel_27_inv_0_info_111,symTable,"inv_0.@info.111",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_28_inv_0_info_112(*rel_28_inv_0_info_112,symTable,"inv_0.@info.112",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_29_inv_0_info_113(*rel_29_inv_0_info_113,symTable,"inv_0.@info.113",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_30_inv_0_info_114(*rel_30_inv_0_info_114,symTable,"inv_0.@info.114",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_31_inv_0_info_115(*rel_31_inv_0_info_115,symTable,"inv_0.@info.115",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_32_inv_0_info_116(*rel_32_inv_0_info_116,symTable,"inv_0.@info.116",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_33_inv_0_info_117(*rel_33_inv_0_info_117,symTable,"inv_0.@info.117",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_34_inv_0_info_118(*rel_34_inv_0_info_118,symTable,"inv_0.@info.118",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_35_inv_0_info_119(*rel_35_inv_0_info_119,symTable,"inv_0.@info.119",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_36_inv_0_info_12(*rel_36_inv_0_info_12,symTable,"inv_0.@info.12",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_37_inv_0_info_120(*rel_37_inv_0_info_120,symTable,"inv_0.@info.120",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_38_inv_0_info_121(*rel_38_inv_0_info_121,symTable,"inv_0.@info.121",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_39_inv_0_info_122(*rel_39_inv_0_info_122,symTable,"inv_0.@info.122",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_40_inv_0_info_123(*rel_40_inv_0_info_123,symTable,"inv_0.@info.123",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_41_inv_0_info_124(*rel_41_inv_0_info_124,symTable,"inv_0.@info.124",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_42_inv_0_info_125(*rel_42_inv_0_info_125,symTable,"inv_0.@info.125",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_43_inv_0_info_126(*rel_43_inv_0_info_126,symTable,"inv_0.@info.126",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_44_inv_0_info_127(*rel_44_inv_0_info_127,symTable,"inv_0.@info.127",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_45_inv_0_info_128(*rel_45_inv_0_info_128,symTable,"inv_0.@info.128",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_46_inv_0_info_129(*rel_46_inv_0_info_129,symTable,"inv_0.@info.129",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_47_inv_0_info_13(*rel_47_inv_0_info_13,symTable,"inv_0.@info.13",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_48_inv_0_info_130(*rel_48_inv_0_info_130,symTable,"inv_0.@info.130",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_49_inv_0_info_131(*rel_49_inv_0_info_131,symTable,"inv_0.@info.131",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_50_inv_0_info_132(*rel_50_inv_0_info_132,symTable,"inv_0.@info.132",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_51_inv_0_info_133(*rel_51_inv_0_info_133,symTable,"inv_0.@info.133",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_52_inv_0_info_134(*rel_52_inv_0_info_134,symTable,"inv_0.@info.134",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_53_inv_0_info_135(*rel_53_inv_0_info_135,symTable,"inv_0.@info.135",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_54_inv_0_info_136(*rel_54_inv_0_info_136,symTable,"inv_0.@info.136",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_55_inv_0_info_137(*rel_55_inv_0_info_137,symTable,"inv_0.@info.137",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_56_inv_0_info_138(*rel_56_inv_0_info_138,symTable,"inv_0.@info.138",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_57_inv_0_info_139(*rel_57_inv_0_info_139,symTable,"inv_0.@info.139",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_58_inv_0_info_14(*rel_58_inv_0_info_14,symTable,"inv_0.@info.14",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_59_inv_0_info_140(*rel_59_inv_0_info_140,symTable,"inv_0.@info.140",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_60_inv_0_info_141(*rel_60_inv_0_info_141,symTable,"inv_0.@info.141",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_61_inv_0_info_142(*rel_61_inv_0_info_142,symTable,"inv_0.@info.142",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_62_inv_0_info_143(*rel_62_inv_0_info_143,symTable,"inv_0.@info.143",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_63_inv_0_info_144(*rel_63_inv_0_info_144,symTable,"inv_0.@info.144",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_64_inv_0_info_145(*rel_64_inv_0_info_145,symTable,"inv_0.@info.145",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_65_inv_0_info_146(*rel_65_inv_0_info_146,symTable,"inv_0.@info.146",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_66_inv_0_info_147(*rel_66_inv_0_info_147,symTable,"inv_0.@info.147",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_67_inv_0_info_148(*rel_67_inv_0_info_148,symTable,"inv_0.@info.148",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_68_inv_0_info_149(*rel_68_inv_0_info_149,symTable,"inv_0.@info.149",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_69_inv_0_info_15(*rel_69_inv_0_info_15,symTable,"inv_0.@info.15",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_70_inv_0_info_150(*rel_70_inv_0_info_150,symTable,"inv_0.@info.150",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_71_inv_0_info_151(*rel_71_inv_0_info_151,symTable,"inv_0.@info.151",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_72_inv_0_info_152(*rel_72_inv_0_info_152,symTable,"inv_0.@info.152",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_73_inv_0_info_153(*rel_73_inv_0_info_153,symTable,"inv_0.@info.153",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_74_inv_0_info_154(*rel_74_inv_0_info_154,symTable,"inv_0.@info.154",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_75_inv_0_info_155(*rel_75_inv_0_info_155,symTable,"inv_0.@info.155",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_76_inv_0_info_156(*rel_76_inv_0_info_156,symTable,"inv_0.@info.156",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_77_inv_0_info_157(*rel_77_inv_0_info_157,symTable,"inv_0.@info.157",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_78_inv_0_info_158(*rel_78_inv_0_info_158,symTable,"inv_0.@info.158",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_79_inv_0_info_159(*rel_79_inv_0_info_159,symTable,"inv_0.@info.159",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_80_inv_0_info_16(*rel_80_inv_0_info_16,symTable,"inv_0.@info.16",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_81_inv_0_info_160(*rel_81_inv_0_info_160,symTable,"inv_0.@info.160",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_82_inv_0_info_161(*rel_82_inv_0_info_161,symTable,"inv_0.@info.161",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_83_inv_0_info_162(*rel_83_inv_0_info_162,symTable,"inv_0.@info.162",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_84_inv_0_info_163(*rel_84_inv_0_info_163,symTable,"inv_0.@info.163",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_85_inv_0_info_164(*rel_85_inv_0_info_164,symTable,"inv_0.@info.164",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_86_inv_0_info_165(*rel_86_inv_0_info_165,symTable,"inv_0.@info.165",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_87_inv_0_info_166(*rel_87_inv_0_info_166,symTable,"inv_0.@info.166",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_88_inv_0_info_167(*rel_88_inv_0_info_167,symTable,"inv_0.@info.167",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_89_inv_0_info_168(*rel_89_inv_0_info_168,symTable,"inv_0.@info.168",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_90_inv_0_info_169(*rel_90_inv_0_info_169,symTable,"inv_0.@info.169",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_91_inv_0_info_17(*rel_91_inv_0_info_17,symTable,"inv_0.@info.17",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_92_inv_0_info_170(*rel_92_inv_0_info_170,symTable,"inv_0.@info.170",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_93_inv_0_info_171(*rel_93_inv_0_info_171,symTable,"inv_0.@info.171",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_94_inv_0_info_172(*rel_94_inv_0_info_172,symTable,"inv_0.@info.172",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_95_inv_0_info_173(*rel_95_inv_0_info_173,symTable,"inv_0.@info.173",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_96_inv_0_info_174(*rel_96_inv_0_info_174,symTable,"inv_0.@info.174",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_97_inv_0_info_175(*rel_97_inv_0_info_175,symTable,"inv_0.@info.175",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_98_inv_0_info_176(*rel_98_inv_0_info_176,symTable,"inv_0.@info.176",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_99_inv_0_info_177(*rel_99_inv_0_info_177,symTable,"inv_0.@info.177",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_100_inv_0_info_178(*rel_100_inv_0_info_178,symTable,"inv_0.@info.178",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_101_inv_0_info_179(*rel_101_inv_0_info_179,symTable,"inv_0.@info.179",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_102_inv_0_info_18(*rel_102_inv_0_info_18,symTable,"inv_0.@info.18",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_103_inv_0_info_180(*rel_103_inv_0_info_180,symTable,"inv_0.@info.180",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_104_inv_0_info_181(*rel_104_inv_0_info_181,symTable,"inv_0.@info.181",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_105_inv_0_info_182(*rel_105_inv_0_info_182,symTable,"inv_0.@info.182",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_106_inv_0_info_183(*rel_106_inv_0_info_183,symTable,"inv_0.@info.183",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_107_inv_0_info_184(*rel_107_inv_0_info_184,symTable,"inv_0.@info.184",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_108_inv_0_info_185(*rel_108_inv_0_info_185,symTable,"inv_0.@info.185",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_109_inv_0_info_186(*rel_109_inv_0_info_186,symTable,"inv_0.@info.186",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_110_inv_0_info_187(*rel_110_inv_0_info_187,symTable,"inv_0.@info.187",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_111_inv_0_info_188(*rel_111_inv_0_info_188,symTable,"inv_0.@info.188",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_112_inv_0_info_189(*rel_112_inv_0_info_189,symTable,"inv_0.@info.189",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_113_inv_0_info_19(*rel_113_inv_0_info_19,symTable,"inv_0.@info.19",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_114_inv_0_info_190(*rel_114_inv_0_info_190,symTable,"inv_0.@info.190",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_115_inv_0_info_191(*rel_115_inv_0_info_191,symTable,"inv_0.@info.191",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_116_inv_0_info_192(*rel_116_inv_0_info_192,symTable,"inv_0.@info.192",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_117_inv_0_info_193(*rel_117_inv_0_info_193,symTable,"inv_0.@info.193",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_118_inv_0_info_194(*rel_118_inv_0_info_194,symTable,"inv_0.@info.194",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_119_inv_0_info_195(*rel_119_inv_0_info_195,symTable,"inv_0.@info.195",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_120_inv_0_info_196(*rel_120_inv_0_info_196,symTable,"inv_0.@info.196",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_121_inv_0_info_197(*rel_121_inv_0_info_197,symTable,"inv_0.@info.197",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_122_inv_0_info_198(*rel_122_inv_0_info_198,symTable,"inv_0.@info.198",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_123_inv_0_info_199(*rel_123_inv_0_info_199,symTable,"inv_0.@info.199",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_124_inv_0_info_2(*rel_124_inv_0_info_2,symTable,"inv_0.@info.2",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_125_inv_0_info_20(*rel_125_inv_0_info_20,symTable,"inv_0.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_126_inv_0_info_200(*rel_126_inv_0_info_200,symTable,"inv_0.@info.200",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_127_inv_0_info_201(*rel_127_inv_0_info_201,symTable,"inv_0.@info.201",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_128_inv_0_info_202(*rel_128_inv_0_info_202,symTable,"inv_0.@info.202",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_129_inv_0_info_203(*rel_129_inv_0_info_203,symTable,"inv_0.@info.203",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_130_inv_0_info_204(*rel_130_inv_0_info_204,symTable,"inv_0.@info.204",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_131_inv_0_info_205(*rel_131_inv_0_info_205,symTable,"inv_0.@info.205",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_132_inv_0_info_206(*rel_132_inv_0_info_206,symTable,"inv_0.@info.206",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_133_inv_0_info_207(*rel_133_inv_0_info_207,symTable,"inv_0.@info.207",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_134_inv_0_info_208(*rel_134_inv_0_info_208,symTable,"inv_0.@info.208",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_135_inv_0_info_209(*rel_135_inv_0_info_209,symTable,"inv_0.@info.209",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_136_inv_0_info_21(*rel_136_inv_0_info_21,symTable,"inv_0.@info.21",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_137_inv_0_info_210(*rel_137_inv_0_info_210,symTable,"inv_0.@info.210",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_138_inv_0_info_211(*rel_138_inv_0_info_211,symTable,"inv_0.@info.211",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_139_inv_0_info_212(*rel_139_inv_0_info_212,symTable,"inv_0.@info.212",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_140_inv_0_info_213(*rel_140_inv_0_info_213,symTable,"inv_0.@info.213",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_141_inv_0_info_214(*rel_141_inv_0_info_214,symTable,"inv_0.@info.214",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_142_inv_0_info_215(*rel_142_inv_0_info_215,symTable,"inv_0.@info.215",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_143_inv_0_info_216(*rel_143_inv_0_info_216,symTable,"inv_0.@info.216",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_144_inv_0_info_217(*rel_144_inv_0_info_217,symTable,"inv_0.@info.217",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_145_inv_0_info_218(*rel_145_inv_0_info_218,symTable,"inv_0.@info.218",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_146_inv_0_info_219(*rel_146_inv_0_info_219,symTable,"inv_0.@info.219",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_147_inv_0_info_22(*rel_147_inv_0_info_22,symTable,"inv_0.@info.22",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_148_inv_0_info_220(*rel_148_inv_0_info_220,symTable,"inv_0.@info.220",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_149_inv_0_info_221(*rel_149_inv_0_info_221,symTable,"inv_0.@info.221",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_150_inv_0_info_222(*rel_150_inv_0_info_222,symTable,"inv_0.@info.222",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_151_inv_0_info_223(*rel_151_inv_0_info_223,symTable,"inv_0.@info.223",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_152_inv_0_info_224(*rel_152_inv_0_info_224,symTable,"inv_0.@info.224",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_153_inv_0_info_225(*rel_153_inv_0_info_225,symTable,"inv_0.@info.225",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_154_inv_0_info_226(*rel_154_inv_0_info_226,symTable,"inv_0.@info.226",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_155_inv_0_info_227(*rel_155_inv_0_info_227,symTable,"inv_0.@info.227",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_156_inv_0_info_228(*rel_156_inv_0_info_228,symTable,"inv_0.@info.228",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_157_inv_0_info_229(*rel_157_inv_0_info_229,symTable,"inv_0.@info.229",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_158_inv_0_info_23(*rel_158_inv_0_info_23,symTable,"inv_0.@info.23",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_159_inv_0_info_230(*rel_159_inv_0_info_230,symTable,"inv_0.@info.230",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_160_inv_0_info_231(*rel_160_inv_0_info_231,symTable,"inv_0.@info.231",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_161_inv_0_info_232(*rel_161_inv_0_info_232,symTable,"inv_0.@info.232",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_162_inv_0_info_233(*rel_162_inv_0_info_233,symTable,"inv_0.@info.233",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_163_inv_0_info_234(*rel_163_inv_0_info_234,symTable,"inv_0.@info.234",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_164_inv_0_info_235(*rel_164_inv_0_info_235,symTable,"inv_0.@info.235",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_165_inv_0_info_236(*rel_165_inv_0_info_236,symTable,"inv_0.@info.236",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_166_inv_0_info_237(*rel_166_inv_0_info_237,symTable,"inv_0.@info.237",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_167_inv_0_info_238(*rel_167_inv_0_info_238,symTable,"inv_0.@info.238",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_168_inv_0_info_239(*rel_168_inv_0_info_239,symTable,"inv_0.@info.239",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_169_inv_0_info_24(*rel_169_inv_0_info_24,symTable,"inv_0.@info.24",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_170_inv_0_info_240(*rel_170_inv_0_info_240,symTable,"inv_0.@info.240",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_171_inv_0_info_241(*rel_171_inv_0_info_241,symTable,"inv_0.@info.241",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_172_inv_0_info_242(*rel_172_inv_0_info_242,symTable,"inv_0.@info.242",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_173_inv_0_info_243(*rel_173_inv_0_info_243,symTable,"inv_0.@info.243",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_174_inv_0_info_244(*rel_174_inv_0_info_244,symTable,"inv_0.@info.244",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_175_inv_0_info_245(*rel_175_inv_0_info_245,symTable,"inv_0.@info.245",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_176_inv_0_info_246(*rel_176_inv_0_info_246,symTable,"inv_0.@info.246",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_177_inv_0_info_247(*rel_177_inv_0_info_247,symTable,"inv_0.@info.247",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_178_inv_0_info_248(*rel_178_inv_0_info_248,symTable,"inv_0.@info.248",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_179_inv_0_info_249(*rel_179_inv_0_info_249,symTable,"inv_0.@info.249",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_180_inv_0_info_25(*rel_180_inv_0_info_25,symTable,"inv_0.@info.25",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_181_inv_0_info_250(*rel_181_inv_0_info_250,symTable,"inv_0.@info.250",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_182_inv_0_info_251(*rel_182_inv_0_info_251,symTable,"inv_0.@info.251",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_183_inv_0_info_252(*rel_183_inv_0_info_252,symTable,"inv_0.@info.252",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_184_inv_0_info_253(*rel_184_inv_0_info_253,symTable,"inv_0.@info.253",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_185_inv_0_info_254(*rel_185_inv_0_info_254,symTable,"inv_0.@info.254",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_186_inv_0_info_255(*rel_186_inv_0_info_255,symTable,"inv_0.@info.255",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_187_inv_0_info_256(*rel_187_inv_0_info_256,symTable,"inv_0.@info.256",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_188_inv_0_info_257(*rel_188_inv_0_info_257,symTable,"inv_0.@info.257",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_189_inv_0_info_258(*rel_189_inv_0_info_258,symTable,"inv_0.@info.258",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_190_inv_0_info_259(*rel_190_inv_0_info_259,symTable,"inv_0.@info.259",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_191_inv_0_info_26(*rel_191_inv_0_info_26,symTable,"inv_0.@info.26",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_192_inv_0_info_260(*rel_192_inv_0_info_260,symTable,"inv_0.@info.260",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_193_inv_0_info_261(*rel_193_inv_0_info_261,symTable,"inv_0.@info.261",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_194_inv_0_info_262(*rel_194_inv_0_info_262,symTable,"inv_0.@info.262",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_195_inv_0_info_263(*rel_195_inv_0_info_263,symTable,"inv_0.@info.263",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_196_inv_0_info_264(*rel_196_inv_0_info_264,symTable,"inv_0.@info.264",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_197_inv_0_info_265(*rel_197_inv_0_info_265,symTable,"inv_0.@info.265",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_198_inv_0_info_266(*rel_198_inv_0_info_266,symTable,"inv_0.@info.266",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_199_inv_0_info_267(*rel_199_inv_0_info_267,symTable,"inv_0.@info.267",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_200_inv_0_info_268(*rel_200_inv_0_info_268,symTable,"inv_0.@info.268",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_201_inv_0_info_269(*rel_201_inv_0_info_269,symTable,"inv_0.@info.269",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_202_inv_0_info_27(*rel_202_inv_0_info_27,symTable,"inv_0.@info.27",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_203_inv_0_info_270(*rel_203_inv_0_info_270,symTable,"inv_0.@info.270",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_204_inv_0_info_271(*rel_204_inv_0_info_271,symTable,"inv_0.@info.271",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_205_inv_0_info_272(*rel_205_inv_0_info_272,symTable,"inv_0.@info.272",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_206_inv_0_info_273(*rel_206_inv_0_info_273,symTable,"inv_0.@info.273",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_207_inv_0_info_274(*rel_207_inv_0_info_274,symTable,"inv_0.@info.274",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_208_inv_0_info_275(*rel_208_inv_0_info_275,symTable,"inv_0.@info.275",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_209_inv_0_info_276(*rel_209_inv_0_info_276,symTable,"inv_0.@info.276",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_210_inv_0_info_277(*rel_210_inv_0_info_277,symTable,"inv_0.@info.277",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_211_inv_0_info_278(*rel_211_inv_0_info_278,symTable,"inv_0.@info.278",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_212_inv_0_info_279(*rel_212_inv_0_info_279,symTable,"inv_0.@info.279",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_213_inv_0_info_28(*rel_213_inv_0_info_28,symTable,"inv_0.@info.28",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_214_inv_0_info_280(*rel_214_inv_0_info_280,symTable,"inv_0.@info.280",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_215_inv_0_info_281(*rel_215_inv_0_info_281,symTable,"inv_0.@info.281",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_216_inv_0_info_282(*rel_216_inv_0_info_282,symTable,"inv_0.@info.282",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_217_inv_0_info_283(*rel_217_inv_0_info_283,symTable,"inv_0.@info.283",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_218_inv_0_info_284(*rel_218_inv_0_info_284,symTable,"inv_0.@info.284",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_219_inv_0_info_285(*rel_219_inv_0_info_285,symTable,"inv_0.@info.285",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_220_inv_0_info_286(*rel_220_inv_0_info_286,symTable,"inv_0.@info.286",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_221_inv_0_info_287(*rel_221_inv_0_info_287,symTable,"inv_0.@info.287",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_222_inv_0_info_288(*rel_222_inv_0_info_288,symTable,"inv_0.@info.288",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_223_inv_0_info_289(*rel_223_inv_0_info_289,symTable,"inv_0.@info.289",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_224_inv_0_info_29(*rel_224_inv_0_info_29,symTable,"inv_0.@info.29",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_225_inv_0_info_290(*rel_225_inv_0_info_290,symTable,"inv_0.@info.290",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_226_inv_0_info_291(*rel_226_inv_0_info_291,symTable,"inv_0.@info.291",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_227_inv_0_info_292(*rel_227_inv_0_info_292,symTable,"inv_0.@info.292",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_228_inv_0_info_293(*rel_228_inv_0_info_293,symTable,"inv_0.@info.293",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_229_inv_0_info_294(*rel_229_inv_0_info_294,symTable,"inv_0.@info.294",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_230_inv_0_info_295(*rel_230_inv_0_info_295,symTable,"inv_0.@info.295",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_231_inv_0_info_296(*rel_231_inv_0_info_296,symTable,"inv_0.@info.296",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_232_inv_0_info_297(*rel_232_inv_0_info_297,symTable,"inv_0.@info.297",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_233_inv_0_info_298(*rel_233_inv_0_info_298,symTable,"inv_0.@info.298",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_234_inv_0_info_299(*rel_234_inv_0_info_299,symTable,"inv_0.@info.299",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_235_inv_0_info_3(*rel_235_inv_0_info_3,symTable,"inv_0.@info.3",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_236_inv_0_info_30(*rel_236_inv_0_info_30,symTable,"inv_0.@info.30",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_237_inv_0_info_300(*rel_237_inv_0_info_300,symTable,"inv_0.@info.300",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_238_inv_0_info_301(*rel_238_inv_0_info_301,symTable,"inv_0.@info.301",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_239_inv_0_info_302(*rel_239_inv_0_info_302,symTable,"inv_0.@info.302",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_240_inv_0_info_303(*rel_240_inv_0_info_303,symTable,"inv_0.@info.303",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_241_inv_0_info_304(*rel_241_inv_0_info_304,symTable,"inv_0.@info.304",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_242_inv_0_info_305(*rel_242_inv_0_info_305,symTable,"inv_0.@info.305",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_243_inv_0_info_306(*rel_243_inv_0_info_306,symTable,"inv_0.@info.306",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_244_inv_0_info_307(*rel_244_inv_0_info_307,symTable,"inv_0.@info.307",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_245_inv_0_info_308(*rel_245_inv_0_info_308,symTable,"inv_0.@info.308",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_246_inv_0_info_309(*rel_246_inv_0_info_309,symTable,"inv_0.@info.309",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_247_inv_0_info_31(*rel_247_inv_0_info_31,symTable,"inv_0.@info.31",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_248_inv_0_info_310(*rel_248_inv_0_info_310,symTable,"inv_0.@info.310",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_249_inv_0_info_311(*rel_249_inv_0_info_311,symTable,"inv_0.@info.311",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_250_inv_0_info_312(*rel_250_inv_0_info_312,symTable,"inv_0.@info.312",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_251_inv_0_info_313(*rel_251_inv_0_info_313,symTable,"inv_0.@info.313",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_252_inv_0_info_314(*rel_252_inv_0_info_314,symTable,"inv_0.@info.314",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_253_inv_0_info_315(*rel_253_inv_0_info_315,symTable,"inv_0.@info.315",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_254_inv_0_info_316(*rel_254_inv_0_info_316,symTable,"inv_0.@info.316",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_255_inv_0_info_317(*rel_255_inv_0_info_317,symTable,"inv_0.@info.317",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_256_inv_0_info_318(*rel_256_inv_0_info_318,symTable,"inv_0.@info.318",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_257_inv_0_info_319(*rel_257_inv_0_info_319,symTable,"inv_0.@info.319",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_258_inv_0_info_32(*rel_258_inv_0_info_32,symTable,"inv_0.@info.32",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_259_inv_0_info_320(*rel_259_inv_0_info_320,symTable,"inv_0.@info.320",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_260_inv_0_info_321(*rel_260_inv_0_info_321,symTable,"inv_0.@info.321",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_261_inv_0_info_322(*rel_261_inv_0_info_322,symTable,"inv_0.@info.322",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_262_inv_0_info_323(*rel_262_inv_0_info_323,symTable,"inv_0.@info.323",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_263_inv_0_info_324(*rel_263_inv_0_info_324,symTable,"inv_0.@info.324",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_264_inv_0_info_325(*rel_264_inv_0_info_325,symTable,"inv_0.@info.325",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_265_inv_0_info_326(*rel_265_inv_0_info_326,symTable,"inv_0.@info.326",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_266_inv_0_info_327(*rel_266_inv_0_info_327,symTable,"inv_0.@info.327",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_267_inv_0_info_328(*rel_267_inv_0_info_328,symTable,"inv_0.@info.328",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_268_inv_0_info_329(*rel_268_inv_0_info_329,symTable,"inv_0.@info.329",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_269_inv_0_info_33(*rel_269_inv_0_info_33,symTable,"inv_0.@info.33",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_270_inv_0_info_330(*rel_270_inv_0_info_330,symTable,"inv_0.@info.330",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_271_inv_0_info_331(*rel_271_inv_0_info_331,symTable,"inv_0.@info.331",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_272_inv_0_info_332(*rel_272_inv_0_info_332,symTable,"inv_0.@info.332",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_273_inv_0_info_333(*rel_273_inv_0_info_333,symTable,"inv_0.@info.333",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_274_inv_0_info_334(*rel_274_inv_0_info_334,symTable,"inv_0.@info.334",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_275_inv_0_info_335(*rel_275_inv_0_info_335,symTable,"inv_0.@info.335",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_276_inv_0_info_336(*rel_276_inv_0_info_336,symTable,"inv_0.@info.336",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_277_inv_0_info_337(*rel_277_inv_0_info_337,symTable,"inv_0.@info.337",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_278_inv_0_info_338(*rel_278_inv_0_info_338,symTable,"inv_0.@info.338",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_279_inv_0_info_339(*rel_279_inv_0_info_339,symTable,"inv_0.@info.339",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_280_inv_0_info_34(*rel_280_inv_0_info_34,symTable,"inv_0.@info.34",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_281_inv_0_info_340(*rel_281_inv_0_info_340,symTable,"inv_0.@info.340",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_282_inv_0_info_341(*rel_282_inv_0_info_341,symTable,"inv_0.@info.341",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_283_inv_0_info_342(*rel_283_inv_0_info_342,symTable,"inv_0.@info.342",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_284_inv_0_info_343(*rel_284_inv_0_info_343,symTable,"inv_0.@info.343",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_285_inv_0_info_344(*rel_285_inv_0_info_344,symTable,"inv_0.@info.344",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_286_inv_0_info_345(*rel_286_inv_0_info_345,symTable,"inv_0.@info.345",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_287_inv_0_info_346(*rel_287_inv_0_info_346,symTable,"inv_0.@info.346",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_288_inv_0_info_347(*rel_288_inv_0_info_347,symTable,"inv_0.@info.347",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_289_inv_0_info_348(*rel_289_inv_0_info_348,symTable,"inv_0.@info.348",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_290_inv_0_info_349(*rel_290_inv_0_info_349,symTable,"inv_0.@info.349",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_291_inv_0_info_35(*rel_291_inv_0_info_35,symTable,"inv_0.@info.35",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_292_inv_0_info_350(*rel_292_inv_0_info_350,symTable,"inv_0.@info.350",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_293_inv_0_info_36(*rel_293_inv_0_info_36,symTable,"inv_0.@info.36",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_294_inv_0_info_37(*rel_294_inv_0_info_37,symTable,"inv_0.@info.37",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_295_inv_0_info_38(*rel_295_inv_0_info_38,symTable,"inv_0.@info.38",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_296_inv_0_info_39(*rel_296_inv_0_info_39,symTable,"inv_0.@info.39",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_297_inv_0_info_4(*rel_297_inv_0_info_4,symTable,"inv_0.@info.4",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_298_inv_0_info_40(*rel_298_inv_0_info_40,symTable,"inv_0.@info.40",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_299_inv_0_info_41(*rel_299_inv_0_info_41,symTable,"inv_0.@info.41",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_300_inv_0_info_42(*rel_300_inv_0_info_42,symTable,"inv_0.@info.42",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_301_inv_0_info_43(*rel_301_inv_0_info_43,symTable,"inv_0.@info.43",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_302_inv_0_info_44(*rel_302_inv_0_info_44,symTable,"inv_0.@info.44",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_303_inv_0_info_45(*rel_303_inv_0_info_45,symTable,"inv_0.@info.45",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_304_inv_0_info_46(*rel_304_inv_0_info_46,symTable,"inv_0.@info.46",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_305_inv_0_info_47(*rel_305_inv_0_info_47,symTable,"inv_0.@info.47",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_306_inv_0_info_48(*rel_306_inv_0_info_48,symTable,"inv_0.@info.48",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_307_inv_0_info_49(*rel_307_inv_0_info_49,symTable,"inv_0.@info.49",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_308_inv_0_info_5(*rel_308_inv_0_info_5,symTable,"inv_0.@info.5",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_309_inv_0_info_50(*rel_309_inv_0_info_50,symTable,"inv_0.@info.50",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_310_inv_0_info_51(*rel_310_inv_0_info_51,symTable,"inv_0.@info.51",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_311_inv_0_info_52(*rel_311_inv_0_info_52,symTable,"inv_0.@info.52",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_312_inv_0_info_53(*rel_312_inv_0_info_53,symTable,"inv_0.@info.53",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_313_inv_0_info_54(*rel_313_inv_0_info_54,symTable,"inv_0.@info.54",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_314_inv_0_info_55(*rel_314_inv_0_info_55,symTable,"inv_0.@info.55",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_315_inv_0_info_56(*rel_315_inv_0_info_56,symTable,"inv_0.@info.56",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_316_inv_0_info_57(*rel_316_inv_0_info_57,symTable,"inv_0.@info.57",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_317_inv_0_info_58(*rel_317_inv_0_info_58,symTable,"inv_0.@info.58",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_318_inv_0_info_59(*rel_318_inv_0_info_59,symTable,"inv_0.@info.59",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_319_inv_0_info_6(*rel_319_inv_0_info_6,symTable,"inv_0.@info.6",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_320_inv_0_info_60(*rel_320_inv_0_info_60,symTable,"inv_0.@info.60",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_321_inv_0_info_61(*rel_321_inv_0_info_61,symTable,"inv_0.@info.61",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_322_inv_0_info_62(*rel_322_inv_0_info_62,symTable,"inv_0.@info.62",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_323_inv_0_info_63(*rel_323_inv_0_info_63,symTable,"inv_0.@info.63",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_324_inv_0_info_64(*rel_324_inv_0_info_64,symTable,"inv_0.@info.64",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_325_inv_0_info_65(*rel_325_inv_0_info_65,symTable,"inv_0.@info.65",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_326_inv_0_info_66(*rel_326_inv_0_info_66,symTable,"inv_0.@info.66",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_327_inv_0_info_67(*rel_327_inv_0_info_67,symTable,"inv_0.@info.67",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_328_inv_0_info_68(*rel_328_inv_0_info_68,symTable,"inv_0.@info.68",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_329_inv_0_info_69(*rel_329_inv_0_info_69,symTable,"inv_0.@info.69",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_330_inv_0_info_7(*rel_330_inv_0_info_7,symTable,"inv_0.@info.7",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_331_inv_0_info_70(*rel_331_inv_0_info_70,symTable,"inv_0.@info.70",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_332_inv_0_info_71(*rel_332_inv_0_info_71,symTable,"inv_0.@info.71",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_333_inv_0_info_72(*rel_333_inv_0_info_72,symTable,"inv_0.@info.72",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_334_inv_0_info_73(*rel_334_inv_0_info_73,symTable,"inv_0.@info.73",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_335_inv_0_info_74(*rel_335_inv_0_info_74,symTable,"inv_0.@info.74",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_336_inv_0_info_75(*rel_336_inv_0_info_75,symTable,"inv_0.@info.75",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_337_inv_0_info_76(*rel_337_inv_0_info_76,symTable,"inv_0.@info.76",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_338_inv_0_info_77(*rel_338_inv_0_info_77,symTable,"inv_0.@info.77",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_339_inv_0_info_78(*rel_339_inv_0_info_78,symTable,"inv_0.@info.78",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_340_inv_0_info_79(*rel_340_inv_0_info_79,symTable,"inv_0.@info.79",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_341_inv_0_info_8(*rel_341_inv_0_info_8,symTable,"inv_0.@info.8",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_342_inv_0_info_80(*rel_342_inv_0_info_80,symTable,"inv_0.@info.80",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_343_inv_0_info_81(*rel_343_inv_0_info_81,symTable,"inv_0.@info.81",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_344_inv_0_info_82(*rel_344_inv_0_info_82,symTable,"inv_0.@info.82",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_345_inv_0_info_83(*rel_345_inv_0_info_83,symTable,"inv_0.@info.83",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_346_inv_0_info_84(*rel_346_inv_0_info_84,symTable,"inv_0.@info.84",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_347_inv_0_info_85(*rel_347_inv_0_info_85,symTable,"inv_0.@info.85",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_348_inv_0_info_86(*rel_348_inv_0_info_86,symTable,"inv_0.@info.86",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_349_inv_0_info_87(*rel_349_inv_0_info_87,symTable,"inv_0.@info.87",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_350_inv_0_info_88(*rel_350_inv_0_info_88,symTable,"inv_0.@info.88",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_351_inv_0_info_89(*rel_351_inv_0_info_89,symTable,"inv_0.@info.89",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_352_inv_0_info_9(*rel_352_inv_0_info_9,symTable,"inv_0.@info.9",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_353_inv_0_info_90(*rel_353_inv_0_info_90,symTable,"inv_0.@info.90",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_354_inv_0_info_91(*rel_354_inv_0_info_91,symTable,"inv_0.@info.91",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_355_inv_0_info_92(*rel_355_inv_0_info_92,symTable,"inv_0.@info.92",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_356_inv_0_info_93(*rel_356_inv_0_info_93,symTable,"inv_0.@info.93",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_357_inv_0_info_94(*rel_357_inv_0_info_94,symTable,"inv_0.@info.94",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_358_inv_0_info_95(*rel_358_inv_0_info_95,symTable,"inv_0.@info.95",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_359_inv_0_info_96(*rel_359_inv_0_info_96,symTable,"inv_0.@info.96",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_360_inv_0_info_97(*rel_360_inv_0_info_97,symTable,"inv_0.@info.97",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_361_inv_0_info_98(*rel_361_inv_0_info_98,symTable,"inv_0.@info.98",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_362_inv_0_info_99(*rel_362_inv_0_info_99,symTable,"inv_0.@info.99",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_363_livesIn_info_1(*rel_363_livesIn_info_1,symTable,"livesIn.@info.1",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_364_livesIn_info_10(*rel_364_livesIn_info_10,symTable,"livesIn.@info.10",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_365_livesIn_info_100(*rel_365_livesIn_info_100,symTable,"livesIn.@info.100",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_366_livesIn_info_101(*rel_366_livesIn_info_101,symTable,"livesIn.@info.101",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_367_livesIn_info_102(*rel_367_livesIn_info_102,symTable,"livesIn.@info.102",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_368_livesIn_info_103(*rel_368_livesIn_info_103,symTable,"livesIn.@info.103",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_369_livesIn_info_104(*rel_369_livesIn_info_104,symTable,"livesIn.@info.104",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_370_livesIn_info_105(*rel_370_livesIn_info_105,symTable,"livesIn.@info.105",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_371_livesIn_info_106(*rel_371_livesIn_info_106,symTable,"livesIn.@info.106",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_372_livesIn_info_107(*rel_372_livesIn_info_107,symTable,"livesIn.@info.107",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_373_livesIn_info_108(*rel_373_livesIn_info_108,symTable,"livesIn.@info.108",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_374_livesIn_info_109(*rel_374_livesIn_info_109,symTable,"livesIn.@info.109",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_375_livesIn_info_11(*rel_375_livesIn_info_11,symTable,"livesIn.@info.11",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_376_livesIn_info_110(*rel_376_livesIn_info_110,symTable,"livesIn.@info.110",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_377_livesIn_info_111(*rel_377_livesIn_info_111,symTable,"livesIn.@info.111",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_378_livesIn_info_112(*rel_378_livesIn_info_112,symTable,"livesIn.@info.112",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_379_livesIn_info_113(*rel_379_livesIn_info_113,symTable,"livesIn.@info.113",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_380_livesIn_info_114(*rel_380_livesIn_info_114,symTable,"livesIn.@info.114",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_381_livesIn_info_115(*rel_381_livesIn_info_115,symTable,"livesIn.@info.115",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_382_livesIn_info_116(*rel_382_livesIn_info_116,symTable,"livesIn.@info.116",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_383_livesIn_info_117(*rel_383_livesIn_info_117,symTable,"livesIn.@info.117",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_384_livesIn_info_118(*rel_384_livesIn_info_118,symTable,"livesIn.@info.118",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_385_livesIn_info_119(*rel_385_livesIn_info_119,symTable,"livesIn.@info.119",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_386_livesIn_info_12(*rel_386_livesIn_info_12,symTable,"livesIn.@info.12",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_387_livesIn_info_120(*rel_387_livesIn_info_120,symTable,"livesIn.@info.120",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_388_livesIn_info_121(*rel_388_livesIn_info_121,symTable,"livesIn.@info.121",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_389_livesIn_info_122(*rel_389_livesIn_info_122,symTable,"livesIn.@info.122",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_390_livesIn_info_123(*rel_390_livesIn_info_123,symTable,"livesIn.@info.123",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_391_livesIn_info_124(*rel_391_livesIn_info_124,symTable,"livesIn.@info.124",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_392_livesIn_info_125(*rel_392_livesIn_info_125,symTable,"livesIn.@info.125",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_393_livesIn_info_126(*rel_393_livesIn_info_126,symTable,"livesIn.@info.126",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_394_livesIn_info_127(*rel_394_livesIn_info_127,symTable,"livesIn.@info.127",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_395_livesIn_info_128(*rel_395_livesIn_info_128,symTable,"livesIn.@info.128",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_396_livesIn_info_129(*rel_396_livesIn_info_129,symTable,"livesIn.@info.129",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_397_livesIn_info_13(*rel_397_livesIn_info_13,symTable,"livesIn.@info.13",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_398_livesIn_info_130(*rel_398_livesIn_info_130,symTable,"livesIn.@info.130",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_399_livesIn_info_131(*rel_399_livesIn_info_131,symTable,"livesIn.@info.131",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_400_livesIn_info_132(*rel_400_livesIn_info_132,symTable,"livesIn.@info.132",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_401_livesIn_info_133(*rel_401_livesIn_info_133,symTable,"livesIn.@info.133",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_402_livesIn_info_134(*rel_402_livesIn_info_134,symTable,"livesIn.@info.134",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_403_livesIn_info_135(*rel_403_livesIn_info_135,symTable,"livesIn.@info.135",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_404_livesIn_info_136(*rel_404_livesIn_info_136,symTable,"livesIn.@info.136",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_405_livesIn_info_137(*rel_405_livesIn_info_137,symTable,"livesIn.@info.137",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_406_livesIn_info_138(*rel_406_livesIn_info_138,symTable,"livesIn.@info.138",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_407_livesIn_info_139(*rel_407_livesIn_info_139,symTable,"livesIn.@info.139",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_408_livesIn_info_14(*rel_408_livesIn_info_14,symTable,"livesIn.@info.14",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_409_livesIn_info_140(*rel_409_livesIn_info_140,symTable,"livesIn.@info.140",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_410_livesIn_info_141(*rel_410_livesIn_info_141,symTable,"livesIn.@info.141",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_411_livesIn_info_142(*rel_411_livesIn_info_142,symTable,"livesIn.@info.142",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_412_livesIn_info_143(*rel_412_livesIn_info_143,symTable,"livesIn.@info.143",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_413_livesIn_info_144(*rel_413_livesIn_info_144,symTable,"livesIn.@info.144",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_414_livesIn_info_145(*rel_414_livesIn_info_145,symTable,"livesIn.@info.145",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_415_livesIn_info_146(*rel_415_livesIn_info_146,symTable,"livesIn.@info.146",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_416_livesIn_info_147(*rel_416_livesIn_info_147,symTable,"livesIn.@info.147",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_417_livesIn_info_148(*rel_417_livesIn_info_148,symTable,"livesIn.@info.148",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_418_livesIn_info_149(*rel_418_livesIn_info_149,symTable,"livesIn.@info.149",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_419_livesIn_info_15(*rel_419_livesIn_info_15,symTable,"livesIn.@info.15",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_420_livesIn_info_150(*rel_420_livesIn_info_150,symTable,"livesIn.@info.150",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_421_livesIn_info_151(*rel_421_livesIn_info_151,symTable,"livesIn.@info.151",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_422_livesIn_info_152(*rel_422_livesIn_info_152,symTable,"livesIn.@info.152",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_423_livesIn_info_153(*rel_423_livesIn_info_153,symTable,"livesIn.@info.153",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_424_livesIn_info_154(*rel_424_livesIn_info_154,symTable,"livesIn.@info.154",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_425_livesIn_info_155(*rel_425_livesIn_info_155,symTable,"livesIn.@info.155",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_426_livesIn_info_156(*rel_426_livesIn_info_156,symTable,"livesIn.@info.156",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_427_livesIn_info_157(*rel_427_livesIn_info_157,symTable,"livesIn.@info.157",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_428_livesIn_info_158(*rel_428_livesIn_info_158,symTable,"livesIn.@info.158",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_429_livesIn_info_159(*rel_429_livesIn_info_159,symTable,"livesIn.@info.159",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_430_livesIn_info_16(*rel_430_livesIn_info_16,symTable,"livesIn.@info.16",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_431_livesIn_info_160(*rel_431_livesIn_info_160,symTable,"livesIn.@info.160",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_432_livesIn_info_161(*rel_432_livesIn_info_161,symTable,"livesIn.@info.161",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_433_livesIn_info_162(*rel_433_livesIn_info_162,symTable,"livesIn.@info.162",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_434_livesIn_info_163(*rel_434_livesIn_info_163,symTable,"livesIn.@info.163",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_435_livesIn_info_164(*rel_435_livesIn_info_164,symTable,"livesIn.@info.164",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_436_livesIn_info_165(*rel_436_livesIn_info_165,symTable,"livesIn.@info.165",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_437_livesIn_info_166(*rel_437_livesIn_info_166,symTable,"livesIn.@info.166",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_438_livesIn_info_167(*rel_438_livesIn_info_167,symTable,"livesIn.@info.167",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_439_livesIn_info_168(*rel_439_livesIn_info_168,symTable,"livesIn.@info.168",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_440_livesIn_info_169(*rel_440_livesIn_info_169,symTable,"livesIn.@info.169",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_441_livesIn_info_17(*rel_441_livesIn_info_17,symTable,"livesIn.@info.17",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_442_livesIn_info_170(*rel_442_livesIn_info_170,symTable,"livesIn.@info.170",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_443_livesIn_info_171(*rel_443_livesIn_info_171,symTable,"livesIn.@info.171",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_444_livesIn_info_172(*rel_444_livesIn_info_172,symTable,"livesIn.@info.172",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_445_livesIn_info_173(*rel_445_livesIn_info_173,symTable,"livesIn.@info.173",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_446_livesIn_info_174(*rel_446_livesIn_info_174,symTable,"livesIn.@info.174",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_447_livesIn_info_175(*rel_447_livesIn_info_175,symTable,"livesIn.@info.175",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_448_livesIn_info_176(*rel_448_livesIn_info_176,symTable,"livesIn.@info.176",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_449_livesIn_info_177(*rel_449_livesIn_info_177,symTable,"livesIn.@info.177",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_450_livesIn_info_178(*rel_450_livesIn_info_178,symTable,"livesIn.@info.178",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_451_livesIn_info_179(*rel_451_livesIn_info_179,symTable,"livesIn.@info.179",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_452_livesIn_info_18(*rel_452_livesIn_info_18,symTable,"livesIn.@info.18",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_453_livesIn_info_180(*rel_453_livesIn_info_180,symTable,"livesIn.@info.180",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_454_livesIn_info_181(*rel_454_livesIn_info_181,symTable,"livesIn.@info.181",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_455_livesIn_info_182(*rel_455_livesIn_info_182,symTable,"livesIn.@info.182",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_456_livesIn_info_183(*rel_456_livesIn_info_183,symTable,"livesIn.@info.183",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_457_livesIn_info_184(*rel_457_livesIn_info_184,symTable,"livesIn.@info.184",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_458_livesIn_info_185(*rel_458_livesIn_info_185,symTable,"livesIn.@info.185",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_459_livesIn_info_186(*rel_459_livesIn_info_186,symTable,"livesIn.@info.186",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_460_livesIn_info_187(*rel_460_livesIn_info_187,symTable,"livesIn.@info.187",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_461_livesIn_info_188(*rel_461_livesIn_info_188,symTable,"livesIn.@info.188",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_462_livesIn_info_189(*rel_462_livesIn_info_189,symTable,"livesIn.@info.189",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_463_livesIn_info_19(*rel_463_livesIn_info_19,symTable,"livesIn.@info.19",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_464_livesIn_info_190(*rel_464_livesIn_info_190,symTable,"livesIn.@info.190",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_465_livesIn_info_191(*rel_465_livesIn_info_191,symTable,"livesIn.@info.191",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_466_livesIn_info_192(*rel_466_livesIn_info_192,symTable,"livesIn.@info.192",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_467_livesIn_info_193(*rel_467_livesIn_info_193,symTable,"livesIn.@info.193",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_468_livesIn_info_194(*rel_468_livesIn_info_194,symTable,"livesIn.@info.194",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_469_livesIn_info_195(*rel_469_livesIn_info_195,symTable,"livesIn.@info.195",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_470_livesIn_info_196(*rel_470_livesIn_info_196,symTable,"livesIn.@info.196",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_471_livesIn_info_197(*rel_471_livesIn_info_197,symTable,"livesIn.@info.197",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_472_livesIn_info_198(*rel_472_livesIn_info_198,symTable,"livesIn.@info.198",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_473_livesIn_info_199(*rel_473_livesIn_info_199,symTable,"livesIn.@info.199",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_474_livesIn_info_2(*rel_474_livesIn_info_2,symTable,"livesIn.@info.2",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_475_livesIn_info_20(*rel_475_livesIn_info_20,symTable,"livesIn.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_476_livesIn_info_200(*rel_476_livesIn_info_200,symTable,"livesIn.@info.200",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_477_livesIn_info_201(*rel_477_livesIn_info_201,symTable,"livesIn.@info.201",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_478_livesIn_info_202(*rel_478_livesIn_info_202,symTable,"livesIn.@info.202",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_479_livesIn_info_203(*rel_479_livesIn_info_203,symTable,"livesIn.@info.203",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_480_livesIn_info_204(*rel_480_livesIn_info_204,symTable,"livesIn.@info.204",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_481_livesIn_info_205(*rel_481_livesIn_info_205,symTable,"livesIn.@info.205",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_482_livesIn_info_206(*rel_482_livesIn_info_206,symTable,"livesIn.@info.206",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_483_livesIn_info_207(*rel_483_livesIn_info_207,symTable,"livesIn.@info.207",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_484_livesIn_info_208(*rel_484_livesIn_info_208,symTable,"livesIn.@info.208",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_485_livesIn_info_209(*rel_485_livesIn_info_209,symTable,"livesIn.@info.209",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_486_livesIn_info_21(*rel_486_livesIn_info_21,symTable,"livesIn.@info.21",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_487_livesIn_info_210(*rel_487_livesIn_info_210,symTable,"livesIn.@info.210",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_488_livesIn_info_211(*rel_488_livesIn_info_211,symTable,"livesIn.@info.211",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_489_livesIn_info_212(*rel_489_livesIn_info_212,symTable,"livesIn.@info.212",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_490_livesIn_info_213(*rel_490_livesIn_info_213,symTable,"livesIn.@info.213",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_491_livesIn_info_214(*rel_491_livesIn_info_214,symTable,"livesIn.@info.214",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_492_livesIn_info_215(*rel_492_livesIn_info_215,symTable,"livesIn.@info.215",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_493_livesIn_info_216(*rel_493_livesIn_info_216,symTable,"livesIn.@info.216",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_494_livesIn_info_217(*rel_494_livesIn_info_217,symTable,"livesIn.@info.217",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_495_livesIn_info_218(*rel_495_livesIn_info_218,symTable,"livesIn.@info.218",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_496_livesIn_info_219(*rel_496_livesIn_info_219,symTable,"livesIn.@info.219",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_497_livesIn_info_22(*rel_497_livesIn_info_22,symTable,"livesIn.@info.22",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_498_livesIn_info_220(*rel_498_livesIn_info_220,symTable,"livesIn.@info.220",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_499_livesIn_info_221(*rel_499_livesIn_info_221,symTable,"livesIn.@info.221",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_500_livesIn_info_222(*rel_500_livesIn_info_222,symTable,"livesIn.@info.222",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_501_livesIn_info_223(*rel_501_livesIn_info_223,symTable,"livesIn.@info.223",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_502_livesIn_info_224(*rel_502_livesIn_info_224,symTable,"livesIn.@info.224",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_503_livesIn_info_225(*rel_503_livesIn_info_225,symTable,"livesIn.@info.225",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_504_livesIn_info_226(*rel_504_livesIn_info_226,symTable,"livesIn.@info.226",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_505_livesIn_info_227(*rel_505_livesIn_info_227,symTable,"livesIn.@info.227",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_506_livesIn_info_228(*rel_506_livesIn_info_228,symTable,"livesIn.@info.228",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_507_livesIn_info_229(*rel_507_livesIn_info_229,symTable,"livesIn.@info.229",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_508_livesIn_info_23(*rel_508_livesIn_info_23,symTable,"livesIn.@info.23",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_509_livesIn_info_230(*rel_509_livesIn_info_230,symTable,"livesIn.@info.230",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_510_livesIn_info_231(*rel_510_livesIn_info_231,symTable,"livesIn.@info.231",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_511_livesIn_info_232(*rel_511_livesIn_info_232,symTable,"livesIn.@info.232",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_512_livesIn_info_233(*rel_512_livesIn_info_233,symTable,"livesIn.@info.233",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_513_livesIn_info_234(*rel_513_livesIn_info_234,symTable,"livesIn.@info.234",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_514_livesIn_info_235(*rel_514_livesIn_info_235,symTable,"livesIn.@info.235",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_515_livesIn_info_236(*rel_515_livesIn_info_236,symTable,"livesIn.@info.236",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_516_livesIn_info_237(*rel_516_livesIn_info_237,symTable,"livesIn.@info.237",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_517_livesIn_info_238(*rel_517_livesIn_info_238,symTable,"livesIn.@info.238",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_518_livesIn_info_239(*rel_518_livesIn_info_239,symTable,"livesIn.@info.239",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_519_livesIn_info_24(*rel_519_livesIn_info_24,symTable,"livesIn.@info.24",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_520_livesIn_info_240(*rel_520_livesIn_info_240,symTable,"livesIn.@info.240",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_521_livesIn_info_241(*rel_521_livesIn_info_241,symTable,"livesIn.@info.241",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_522_livesIn_info_242(*rel_522_livesIn_info_242,symTable,"livesIn.@info.242",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_523_livesIn_info_243(*rel_523_livesIn_info_243,symTable,"livesIn.@info.243",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_524_livesIn_info_244(*rel_524_livesIn_info_244,symTable,"livesIn.@info.244",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_525_livesIn_info_245(*rel_525_livesIn_info_245,symTable,"livesIn.@info.245",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_526_livesIn_info_246(*rel_526_livesIn_info_246,symTable,"livesIn.@info.246",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_527_livesIn_info_247(*rel_527_livesIn_info_247,symTable,"livesIn.@info.247",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_528_livesIn_info_248(*rel_528_livesIn_info_248,symTable,"livesIn.@info.248",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_529_livesIn_info_249(*rel_529_livesIn_info_249,symTable,"livesIn.@info.249",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_530_livesIn_info_25(*rel_530_livesIn_info_25,symTable,"livesIn.@info.25",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_531_livesIn_info_250(*rel_531_livesIn_info_250,symTable,"livesIn.@info.250",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_532_livesIn_info_251(*rel_532_livesIn_info_251,symTable,"livesIn.@info.251",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_533_livesIn_info_252(*rel_533_livesIn_info_252,symTable,"livesIn.@info.252",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_534_livesIn_info_253(*rel_534_livesIn_info_253,symTable,"livesIn.@info.253",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_535_livesIn_info_254(*rel_535_livesIn_info_254,symTable,"livesIn.@info.254",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_536_livesIn_info_255(*rel_536_livesIn_info_255,symTable,"livesIn.@info.255",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_537_livesIn_info_256(*rel_537_livesIn_info_256,symTable,"livesIn.@info.256",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_538_livesIn_info_257(*rel_538_livesIn_info_257,symTable,"livesIn.@info.257",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_539_livesIn_info_258(*rel_539_livesIn_info_258,symTable,"livesIn.@info.258",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_540_livesIn_info_259(*rel_540_livesIn_info_259,symTable,"livesIn.@info.259",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_541_livesIn_info_26(*rel_541_livesIn_info_26,symTable,"livesIn.@info.26",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_542_livesIn_info_260(*rel_542_livesIn_info_260,symTable,"livesIn.@info.260",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_543_livesIn_info_261(*rel_543_livesIn_info_261,symTable,"livesIn.@info.261",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_544_livesIn_info_262(*rel_544_livesIn_info_262,symTable,"livesIn.@info.262",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_545_livesIn_info_263(*rel_545_livesIn_info_263,symTable,"livesIn.@info.263",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_546_livesIn_info_264(*rel_546_livesIn_info_264,symTable,"livesIn.@info.264",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_547_livesIn_info_27(*rel_547_livesIn_info_27,symTable,"livesIn.@info.27",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_548_livesIn_info_28(*rel_548_livesIn_info_28,symTable,"livesIn.@info.28",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_549_livesIn_info_29(*rel_549_livesIn_info_29,symTable,"livesIn.@info.29",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_550_livesIn_info_3(*rel_550_livesIn_info_3,symTable,"livesIn.@info.3",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_551_livesIn_info_30(*rel_551_livesIn_info_30,symTable,"livesIn.@info.30",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_552_livesIn_info_31(*rel_552_livesIn_info_31,symTable,"livesIn.@info.31",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_553_livesIn_info_32(*rel_553_livesIn_info_32,symTable,"livesIn.@info.32",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_554_livesIn_info_33(*rel_554_livesIn_info_33,symTable,"livesIn.@info.33",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_555_livesIn_info_34(*rel_555_livesIn_info_34,symTable,"livesIn.@info.34",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_556_livesIn_info_35(*rel_556_livesIn_info_35,symTable,"livesIn.@info.35",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_557_livesIn_info_36(*rel_557_livesIn_info_36,symTable,"livesIn.@info.36",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_558_livesIn_info_37(*rel_558_livesIn_info_37,symTable,"livesIn.@info.37",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_559_livesIn_info_38(*rel_559_livesIn_info_38,symTable,"livesIn.@info.38",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_560_livesIn_info_39(*rel_560_livesIn_info_39,symTable,"livesIn.@info.39",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_561_livesIn_info_4(*rel_561_livesIn_info_4,symTable,"livesIn.@info.4",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_562_livesIn_info_40(*rel_562_livesIn_info_40,symTable,"livesIn.@info.40",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_563_livesIn_info_41(*rel_563_livesIn_info_41,symTable,"livesIn.@info.41",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_564_livesIn_info_42(*rel_564_livesIn_info_42,symTable,"livesIn.@info.42",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_565_livesIn_info_43(*rel_565_livesIn_info_43,symTable,"livesIn.@info.43",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_566_livesIn_info_44(*rel_566_livesIn_info_44,symTable,"livesIn.@info.44",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_567_livesIn_info_45(*rel_567_livesIn_info_45,symTable,"livesIn.@info.45",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_568_livesIn_info_46(*rel_568_livesIn_info_46,symTable,"livesIn.@info.46",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_569_livesIn_info_47(*rel_569_livesIn_info_47,symTable,"livesIn.@info.47",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_570_livesIn_info_48(*rel_570_livesIn_info_48,symTable,"livesIn.@info.48",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_571_livesIn_info_49(*rel_571_livesIn_info_49,symTable,"livesIn.@info.49",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_572_livesIn_info_5(*rel_572_livesIn_info_5,symTable,"livesIn.@info.5",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_573_livesIn_info_50(*rel_573_livesIn_info_50,symTable,"livesIn.@info.50",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_574_livesIn_info_51(*rel_574_livesIn_info_51,symTable,"livesIn.@info.51",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_575_livesIn_info_52(*rel_575_livesIn_info_52,symTable,"livesIn.@info.52",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_576_livesIn_info_53(*rel_576_livesIn_info_53,symTable,"livesIn.@info.53",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_577_livesIn_info_54(*rel_577_livesIn_info_54,symTable,"livesIn.@info.54",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_578_livesIn_info_55(*rel_578_livesIn_info_55,symTable,"livesIn.@info.55",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_579_livesIn_info_56(*rel_579_livesIn_info_56,symTable,"livesIn.@info.56",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_580_livesIn_info_57(*rel_580_livesIn_info_57,symTable,"livesIn.@info.57",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_581_livesIn_info_58(*rel_581_livesIn_info_58,symTable,"livesIn.@info.58",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_582_livesIn_info_59(*rel_582_livesIn_info_59,symTable,"livesIn.@info.59",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_583_livesIn_info_6(*rel_583_livesIn_info_6,symTable,"livesIn.@info.6",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_584_livesIn_info_60(*rel_584_livesIn_info_60,symTable,"livesIn.@info.60",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_585_livesIn_info_61(*rel_585_livesIn_info_61,symTable,"livesIn.@info.61",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_586_livesIn_info_62(*rel_586_livesIn_info_62,symTable,"livesIn.@info.62",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_587_livesIn_info_63(*rel_587_livesIn_info_63,symTable,"livesIn.@info.63",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_588_livesIn_info_64(*rel_588_livesIn_info_64,symTable,"livesIn.@info.64",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_589_livesIn_info_65(*rel_589_livesIn_info_65,symTable,"livesIn.@info.65",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_590_livesIn_info_66(*rel_590_livesIn_info_66,symTable,"livesIn.@info.66",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_591_livesIn_info_67(*rel_591_livesIn_info_67,symTable,"livesIn.@info.67",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_592_livesIn_info_68(*rel_592_livesIn_info_68,symTable,"livesIn.@info.68",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_593_livesIn_info_69(*rel_593_livesIn_info_69,symTable,"livesIn.@info.69",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_594_livesIn_info_7(*rel_594_livesIn_info_7,symTable,"livesIn.@info.7",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_595_livesIn_info_70(*rel_595_livesIn_info_70,symTable,"livesIn.@info.70",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_596_livesIn_info_71(*rel_596_livesIn_info_71,symTable,"livesIn.@info.71",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_597_livesIn_info_72(*rel_597_livesIn_info_72,symTable,"livesIn.@info.72",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_598_livesIn_info_73(*rel_598_livesIn_info_73,symTable,"livesIn.@info.73",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_599_livesIn_info_74(*rel_599_livesIn_info_74,symTable,"livesIn.@info.74",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_600_livesIn_info_75(*rel_600_livesIn_info_75,symTable,"livesIn.@info.75",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_601_livesIn_info_76(*rel_601_livesIn_info_76,symTable,"livesIn.@info.76",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_602_livesIn_info_77(*rel_602_livesIn_info_77,symTable,"livesIn.@info.77",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_603_livesIn_info_78(*rel_603_livesIn_info_78,symTable,"livesIn.@info.78",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_604_livesIn_info_79(*rel_604_livesIn_info_79,symTable,"livesIn.@info.79",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_605_livesIn_info_8(*rel_605_livesIn_info_8,symTable,"livesIn.@info.8",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_606_livesIn_info_80(*rel_606_livesIn_info_80,symTable,"livesIn.@info.80",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_607_livesIn_info_81(*rel_607_livesIn_info_81,symTable,"livesIn.@info.81",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_608_livesIn_info_82(*rel_608_livesIn_info_82,symTable,"livesIn.@info.82",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_609_livesIn_info_83(*rel_609_livesIn_info_83,symTable,"livesIn.@info.83",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_610_livesIn_info_84(*rel_610_livesIn_info_84,symTable,"livesIn.@info.84",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_611_livesIn_info_85(*rel_611_livesIn_info_85,symTable,"livesIn.@info.85",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_612_livesIn_info_86(*rel_612_livesIn_info_86,symTable,"livesIn.@info.86",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_613_livesIn_info_87(*rel_613_livesIn_info_87,symTable,"livesIn.@info.87",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_614_livesIn_info_88(*rel_614_livesIn_info_88,symTable,"livesIn.@info.88",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_615_livesIn_info_89(*rel_615_livesIn_info_89,symTable,"livesIn.@info.89",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_616_livesIn_info_9(*rel_616_livesIn_info_9,symTable,"livesIn.@info.9",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_617_livesIn_info_90(*rel_617_livesIn_info_90,symTable,"livesIn.@info.90",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_618_livesIn_info_91(*rel_618_livesIn_info_91,symTable,"livesIn.@info.91",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_619_livesIn_info_92(*rel_619_livesIn_info_92,symTable,"livesIn.@info.92",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_620_livesIn_info_93(*rel_620_livesIn_info_93,symTable,"livesIn.@info.93",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_621_livesIn_info_94(*rel_621_livesIn_info_94,symTable,"livesIn.@info.94",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_622_livesIn_info_95(*rel_622_livesIn_info_95,symTable,"livesIn.@info.95",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_623_livesIn_info_96(*rel_623_livesIn_info_96,symTable,"livesIn.@info.96",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_624_livesIn_info_97(*rel_624_livesIn_info_97,symTable,"livesIn.@info.97",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_625_livesIn_info_98(*rel_625_livesIn_info_98,symTable,"livesIn.@info.98",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_626_livesIn_info_99(*rel_626_livesIn_info_99,symTable,"livesIn.@info.99",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}){
addRelation("Rule",&wrapper_rel_1_Rule,true,false);
addRelation("wikisourcelangProperty",&wrapper_rel_2_wikisourcelangProperty,true,false);
addRelation("writer",&wrapper_rel_3_writer,true,false);
addRelation("year",&wrapper_rel_4_year,true,false);
addRelation("yearOfRelease",&wrapper_rel_5_yearOfRelease,true,false);
addRelation("years",&wrapper_rel_6_years,true,false);
addRelation("livesIn",&wrapper_rel_7_livesIn,false,true);
addRelation("inv_0",&wrapper_rel_10_inv_0,false,true);
addRelation("inv_0.@info.1",&wrapper_rel_13_inv_0_info_1,false,false);
addRelation("inv_0.@info.10",&wrapper_rel_14_inv_0_info_10,false,false);
addRelation("inv_0.@info.100",&wrapper_rel_15_inv_0_info_100,false,false);
addRelation("inv_0.@info.101",&wrapper_rel_16_inv_0_info_101,false,false);
addRelation("inv_0.@info.102",&wrapper_rel_17_inv_0_info_102,false,false);
addRelation("inv_0.@info.103",&wrapper_rel_18_inv_0_info_103,false,false);
addRelation("inv_0.@info.104",&wrapper_rel_19_inv_0_info_104,false,false);
addRelation("inv_0.@info.105",&wrapper_rel_20_inv_0_info_105,false,false);
addRelation("inv_0.@info.106",&wrapper_rel_21_inv_0_info_106,false,false);
addRelation("inv_0.@info.107",&wrapper_rel_22_inv_0_info_107,false,false);
addRelation("inv_0.@info.108",&wrapper_rel_23_inv_0_info_108,false,false);
addRelation("inv_0.@info.109",&wrapper_rel_24_inv_0_info_109,false,false);
addRelation("inv_0.@info.11",&wrapper_rel_25_inv_0_info_11,false,false);
addRelation("inv_0.@info.110",&wrapper_rel_26_inv_0_info_110,false,false);
addRelation("inv_0.@info.111",&wrapper_rel_27_inv_0_info_111,false,false);
addRelation("inv_0.@info.112",&wrapper_rel_28_inv_0_info_112,false,false);
addRelation("inv_0.@info.113",&wrapper_rel_29_inv_0_info_113,false,false);
addRelation("inv_0.@info.114",&wrapper_rel_30_inv_0_info_114,false,false);
addRelation("inv_0.@info.115",&wrapper_rel_31_inv_0_info_115,false,false);
addRelation("inv_0.@info.116",&wrapper_rel_32_inv_0_info_116,false,false);
addRelation("inv_0.@info.117",&wrapper_rel_33_inv_0_info_117,false,false);
addRelation("inv_0.@info.118",&wrapper_rel_34_inv_0_info_118,false,false);
addRelation("inv_0.@info.119",&wrapper_rel_35_inv_0_info_119,false,false);
addRelation("inv_0.@info.12",&wrapper_rel_36_inv_0_info_12,false,false);
addRelation("inv_0.@info.120",&wrapper_rel_37_inv_0_info_120,false,false);
addRelation("inv_0.@info.121",&wrapper_rel_38_inv_0_info_121,false,false);
addRelation("inv_0.@info.122",&wrapper_rel_39_inv_0_info_122,false,false);
addRelation("inv_0.@info.123",&wrapper_rel_40_inv_0_info_123,false,false);
addRelation("inv_0.@info.124",&wrapper_rel_41_inv_0_info_124,false,false);
addRelation("inv_0.@info.125",&wrapper_rel_42_inv_0_info_125,false,false);
addRelation("inv_0.@info.126",&wrapper_rel_43_inv_0_info_126,false,false);
addRelation("inv_0.@info.127",&wrapper_rel_44_inv_0_info_127,false,false);
addRelation("inv_0.@info.128",&wrapper_rel_45_inv_0_info_128,false,false);
addRelation("inv_0.@info.129",&wrapper_rel_46_inv_0_info_129,false,false);
addRelation("inv_0.@info.13",&wrapper_rel_47_inv_0_info_13,false,false);
addRelation("inv_0.@info.130",&wrapper_rel_48_inv_0_info_130,false,false);
addRelation("inv_0.@info.131",&wrapper_rel_49_inv_0_info_131,false,false);
addRelation("inv_0.@info.132",&wrapper_rel_50_inv_0_info_132,false,false);
addRelation("inv_0.@info.133",&wrapper_rel_51_inv_0_info_133,false,false);
addRelation("inv_0.@info.134",&wrapper_rel_52_inv_0_info_134,false,false);
addRelation("inv_0.@info.135",&wrapper_rel_53_inv_0_info_135,false,false);
addRelation("inv_0.@info.136",&wrapper_rel_54_inv_0_info_136,false,false);
addRelation("inv_0.@info.137",&wrapper_rel_55_inv_0_info_137,false,false);
addRelation("inv_0.@info.138",&wrapper_rel_56_inv_0_info_138,false,false);
addRelation("inv_0.@info.139",&wrapper_rel_57_inv_0_info_139,false,false);
addRelation("inv_0.@info.14",&wrapper_rel_58_inv_0_info_14,false,false);
addRelation("inv_0.@info.140",&wrapper_rel_59_inv_0_info_140,false,false);
addRelation("inv_0.@info.141",&wrapper_rel_60_inv_0_info_141,false,false);
addRelation("inv_0.@info.142",&wrapper_rel_61_inv_0_info_142,false,false);
addRelation("inv_0.@info.143",&wrapper_rel_62_inv_0_info_143,false,false);
addRelation("inv_0.@info.144",&wrapper_rel_63_inv_0_info_144,false,false);
addRelation("inv_0.@info.145",&wrapper_rel_64_inv_0_info_145,false,false);
addRelation("inv_0.@info.146",&wrapper_rel_65_inv_0_info_146,false,false);
addRelation("inv_0.@info.147",&wrapper_rel_66_inv_0_info_147,false,false);
addRelation("inv_0.@info.148",&wrapper_rel_67_inv_0_info_148,false,false);
addRelation("inv_0.@info.149",&wrapper_rel_68_inv_0_info_149,false,false);
addRelation("inv_0.@info.15",&wrapper_rel_69_inv_0_info_15,false,false);
addRelation("inv_0.@info.150",&wrapper_rel_70_inv_0_info_150,false,false);
addRelation("inv_0.@info.151",&wrapper_rel_71_inv_0_info_151,false,false);
addRelation("inv_0.@info.152",&wrapper_rel_72_inv_0_info_152,false,false);
addRelation("inv_0.@info.153",&wrapper_rel_73_inv_0_info_153,false,false);
addRelation("inv_0.@info.154",&wrapper_rel_74_inv_0_info_154,false,false);
addRelation("inv_0.@info.155",&wrapper_rel_75_inv_0_info_155,false,false);
addRelation("inv_0.@info.156",&wrapper_rel_76_inv_0_info_156,false,false);
addRelation("inv_0.@info.157",&wrapper_rel_77_inv_0_info_157,false,false);
addRelation("inv_0.@info.158",&wrapper_rel_78_inv_0_info_158,false,false);
addRelation("inv_0.@info.159",&wrapper_rel_79_inv_0_info_159,false,false);
addRelation("inv_0.@info.16",&wrapper_rel_80_inv_0_info_16,false,false);
addRelation("inv_0.@info.160",&wrapper_rel_81_inv_0_info_160,false,false);
addRelation("inv_0.@info.161",&wrapper_rel_82_inv_0_info_161,false,false);
addRelation("inv_0.@info.162",&wrapper_rel_83_inv_0_info_162,false,false);
addRelation("inv_0.@info.163",&wrapper_rel_84_inv_0_info_163,false,false);
addRelation("inv_0.@info.164",&wrapper_rel_85_inv_0_info_164,false,false);
addRelation("inv_0.@info.165",&wrapper_rel_86_inv_0_info_165,false,false);
addRelation("inv_0.@info.166",&wrapper_rel_87_inv_0_info_166,false,false);
addRelation("inv_0.@info.167",&wrapper_rel_88_inv_0_info_167,false,false);
addRelation("inv_0.@info.168",&wrapper_rel_89_inv_0_info_168,false,false);
addRelation("inv_0.@info.169",&wrapper_rel_90_inv_0_info_169,false,false);
addRelation("inv_0.@info.17",&wrapper_rel_91_inv_0_info_17,false,false);
addRelation("inv_0.@info.170",&wrapper_rel_92_inv_0_info_170,false,false);
addRelation("inv_0.@info.171",&wrapper_rel_93_inv_0_info_171,false,false);
addRelation("inv_0.@info.172",&wrapper_rel_94_inv_0_info_172,false,false);
addRelation("inv_0.@info.173",&wrapper_rel_95_inv_0_info_173,false,false);
addRelation("inv_0.@info.174",&wrapper_rel_96_inv_0_info_174,false,false);
addRelation("inv_0.@info.175",&wrapper_rel_97_inv_0_info_175,false,false);
addRelation("inv_0.@info.176",&wrapper_rel_98_inv_0_info_176,false,false);
addRelation("inv_0.@info.177",&wrapper_rel_99_inv_0_info_177,false,false);
addRelation("inv_0.@info.178",&wrapper_rel_100_inv_0_info_178,false,false);
addRelation("inv_0.@info.179",&wrapper_rel_101_inv_0_info_179,false,false);
addRelation("inv_0.@info.18",&wrapper_rel_102_inv_0_info_18,false,false);
addRelation("inv_0.@info.180",&wrapper_rel_103_inv_0_info_180,false,false);
addRelation("inv_0.@info.181",&wrapper_rel_104_inv_0_info_181,false,false);
addRelation("inv_0.@info.182",&wrapper_rel_105_inv_0_info_182,false,false);
addRelation("inv_0.@info.183",&wrapper_rel_106_inv_0_info_183,false,false);
addRelation("inv_0.@info.184",&wrapper_rel_107_inv_0_info_184,false,false);
addRelation("inv_0.@info.185",&wrapper_rel_108_inv_0_info_185,false,false);
addRelation("inv_0.@info.186",&wrapper_rel_109_inv_0_info_186,false,false);
addRelation("inv_0.@info.187",&wrapper_rel_110_inv_0_info_187,false,false);
addRelation("inv_0.@info.188",&wrapper_rel_111_inv_0_info_188,false,false);
addRelation("inv_0.@info.189",&wrapper_rel_112_inv_0_info_189,false,false);
addRelation("inv_0.@info.19",&wrapper_rel_113_inv_0_info_19,false,false);
addRelation("inv_0.@info.190",&wrapper_rel_114_inv_0_info_190,false,false);
addRelation("inv_0.@info.191",&wrapper_rel_115_inv_0_info_191,false,false);
addRelation("inv_0.@info.192",&wrapper_rel_116_inv_0_info_192,false,false);
addRelation("inv_0.@info.193",&wrapper_rel_117_inv_0_info_193,false,false);
addRelation("inv_0.@info.194",&wrapper_rel_118_inv_0_info_194,false,false);
addRelation("inv_0.@info.195",&wrapper_rel_119_inv_0_info_195,false,false);
addRelation("inv_0.@info.196",&wrapper_rel_120_inv_0_info_196,false,false);
addRelation("inv_0.@info.197",&wrapper_rel_121_inv_0_info_197,false,false);
addRelation("inv_0.@info.198",&wrapper_rel_122_inv_0_info_198,false,false);
addRelation("inv_0.@info.199",&wrapper_rel_123_inv_0_info_199,false,false);
addRelation("inv_0.@info.2",&wrapper_rel_124_inv_0_info_2,false,false);
addRelation("inv_0.@info.20",&wrapper_rel_125_inv_0_info_20,false,false);
addRelation("inv_0.@info.200",&wrapper_rel_126_inv_0_info_200,false,false);
addRelation("inv_0.@info.201",&wrapper_rel_127_inv_0_info_201,false,false);
addRelation("inv_0.@info.202",&wrapper_rel_128_inv_0_info_202,false,false);
addRelation("inv_0.@info.203",&wrapper_rel_129_inv_0_info_203,false,false);
addRelation("inv_0.@info.204",&wrapper_rel_130_inv_0_info_204,false,false);
addRelation("inv_0.@info.205",&wrapper_rel_131_inv_0_info_205,false,false);
addRelation("inv_0.@info.206",&wrapper_rel_132_inv_0_info_206,false,false);
addRelation("inv_0.@info.207",&wrapper_rel_133_inv_0_info_207,false,false);
addRelation("inv_0.@info.208",&wrapper_rel_134_inv_0_info_208,false,false);
addRelation("inv_0.@info.209",&wrapper_rel_135_inv_0_info_209,false,false);
addRelation("inv_0.@info.21",&wrapper_rel_136_inv_0_info_21,false,false);
addRelation("inv_0.@info.210",&wrapper_rel_137_inv_0_info_210,false,false);
addRelation("inv_0.@info.211",&wrapper_rel_138_inv_0_info_211,false,false);
addRelation("inv_0.@info.212",&wrapper_rel_139_inv_0_info_212,false,false);
addRelation("inv_0.@info.213",&wrapper_rel_140_inv_0_info_213,false,false);
addRelation("inv_0.@info.214",&wrapper_rel_141_inv_0_info_214,false,false);
addRelation("inv_0.@info.215",&wrapper_rel_142_inv_0_info_215,false,false);
addRelation("inv_0.@info.216",&wrapper_rel_143_inv_0_info_216,false,false);
addRelation("inv_0.@info.217",&wrapper_rel_144_inv_0_info_217,false,false);
addRelation("inv_0.@info.218",&wrapper_rel_145_inv_0_info_218,false,false);
addRelation("inv_0.@info.219",&wrapper_rel_146_inv_0_info_219,false,false);
addRelation("inv_0.@info.22",&wrapper_rel_147_inv_0_info_22,false,false);
addRelation("inv_0.@info.220",&wrapper_rel_148_inv_0_info_220,false,false);
addRelation("inv_0.@info.221",&wrapper_rel_149_inv_0_info_221,false,false);
addRelation("inv_0.@info.222",&wrapper_rel_150_inv_0_info_222,false,false);
addRelation("inv_0.@info.223",&wrapper_rel_151_inv_0_info_223,false,false);
addRelation("inv_0.@info.224",&wrapper_rel_152_inv_0_info_224,false,false);
addRelation("inv_0.@info.225",&wrapper_rel_153_inv_0_info_225,false,false);
addRelation("inv_0.@info.226",&wrapper_rel_154_inv_0_info_226,false,false);
addRelation("inv_0.@info.227",&wrapper_rel_155_inv_0_info_227,false,false);
addRelation("inv_0.@info.228",&wrapper_rel_156_inv_0_info_228,false,false);
addRelation("inv_0.@info.229",&wrapper_rel_157_inv_0_info_229,false,false);
addRelation("inv_0.@info.23",&wrapper_rel_158_inv_0_info_23,false,false);
addRelation("inv_0.@info.230",&wrapper_rel_159_inv_0_info_230,false,false);
addRelation("inv_0.@info.231",&wrapper_rel_160_inv_0_info_231,false,false);
addRelation("inv_0.@info.232",&wrapper_rel_161_inv_0_info_232,false,false);
addRelation("inv_0.@info.233",&wrapper_rel_162_inv_0_info_233,false,false);
addRelation("inv_0.@info.234",&wrapper_rel_163_inv_0_info_234,false,false);
addRelation("inv_0.@info.235",&wrapper_rel_164_inv_0_info_235,false,false);
addRelation("inv_0.@info.236",&wrapper_rel_165_inv_0_info_236,false,false);
addRelation("inv_0.@info.237",&wrapper_rel_166_inv_0_info_237,false,false);
addRelation("inv_0.@info.238",&wrapper_rel_167_inv_0_info_238,false,false);
addRelation("inv_0.@info.239",&wrapper_rel_168_inv_0_info_239,false,false);
addRelation("inv_0.@info.24",&wrapper_rel_169_inv_0_info_24,false,false);
addRelation("inv_0.@info.240",&wrapper_rel_170_inv_0_info_240,false,false);
addRelation("inv_0.@info.241",&wrapper_rel_171_inv_0_info_241,false,false);
addRelation("inv_0.@info.242",&wrapper_rel_172_inv_0_info_242,false,false);
addRelation("inv_0.@info.243",&wrapper_rel_173_inv_0_info_243,false,false);
addRelation("inv_0.@info.244",&wrapper_rel_174_inv_0_info_244,false,false);
addRelation("inv_0.@info.245",&wrapper_rel_175_inv_0_info_245,false,false);
addRelation("inv_0.@info.246",&wrapper_rel_176_inv_0_info_246,false,false);
addRelation("inv_0.@info.247",&wrapper_rel_177_inv_0_info_247,false,false);
addRelation("inv_0.@info.248",&wrapper_rel_178_inv_0_info_248,false,false);
addRelation("inv_0.@info.249",&wrapper_rel_179_inv_0_info_249,false,false);
addRelation("inv_0.@info.25",&wrapper_rel_180_inv_0_info_25,false,false);
addRelation("inv_0.@info.250",&wrapper_rel_181_inv_0_info_250,false,false);
addRelation("inv_0.@info.251",&wrapper_rel_182_inv_0_info_251,false,false);
addRelation("inv_0.@info.252",&wrapper_rel_183_inv_0_info_252,false,false);
addRelation("inv_0.@info.253",&wrapper_rel_184_inv_0_info_253,false,false);
addRelation("inv_0.@info.254",&wrapper_rel_185_inv_0_info_254,false,false);
addRelation("inv_0.@info.255",&wrapper_rel_186_inv_0_info_255,false,false);
addRelation("inv_0.@info.256",&wrapper_rel_187_inv_0_info_256,false,false);
addRelation("inv_0.@info.257",&wrapper_rel_188_inv_0_info_257,false,false);
addRelation("inv_0.@info.258",&wrapper_rel_189_inv_0_info_258,false,false);
addRelation("inv_0.@info.259",&wrapper_rel_190_inv_0_info_259,false,false);
addRelation("inv_0.@info.26",&wrapper_rel_191_inv_0_info_26,false,false);
addRelation("inv_0.@info.260",&wrapper_rel_192_inv_0_info_260,false,false);
addRelation("inv_0.@info.261",&wrapper_rel_193_inv_0_info_261,false,false);
addRelation("inv_0.@info.262",&wrapper_rel_194_inv_0_info_262,false,false);
addRelation("inv_0.@info.263",&wrapper_rel_195_inv_0_info_263,false,false);
addRelation("inv_0.@info.264",&wrapper_rel_196_inv_0_info_264,false,false);
addRelation("inv_0.@info.265",&wrapper_rel_197_inv_0_info_265,false,false);
addRelation("inv_0.@info.266",&wrapper_rel_198_inv_0_info_266,false,false);
addRelation("inv_0.@info.267",&wrapper_rel_199_inv_0_info_267,false,false);
addRelation("inv_0.@info.268",&wrapper_rel_200_inv_0_info_268,false,false);
addRelation("inv_0.@info.269",&wrapper_rel_201_inv_0_info_269,false,false);
addRelation("inv_0.@info.27",&wrapper_rel_202_inv_0_info_27,false,false);
addRelation("inv_0.@info.270",&wrapper_rel_203_inv_0_info_270,false,false);
addRelation("inv_0.@info.271",&wrapper_rel_204_inv_0_info_271,false,false);
addRelation("inv_0.@info.272",&wrapper_rel_205_inv_0_info_272,false,false);
addRelation("inv_0.@info.273",&wrapper_rel_206_inv_0_info_273,false,false);
addRelation("inv_0.@info.274",&wrapper_rel_207_inv_0_info_274,false,false);
addRelation("inv_0.@info.275",&wrapper_rel_208_inv_0_info_275,false,false);
addRelation("inv_0.@info.276",&wrapper_rel_209_inv_0_info_276,false,false);
addRelation("inv_0.@info.277",&wrapper_rel_210_inv_0_info_277,false,false);
addRelation("inv_0.@info.278",&wrapper_rel_211_inv_0_info_278,false,false);
addRelation("inv_0.@info.279",&wrapper_rel_212_inv_0_info_279,false,false);
addRelation("inv_0.@info.28",&wrapper_rel_213_inv_0_info_28,false,false);
addRelation("inv_0.@info.280",&wrapper_rel_214_inv_0_info_280,false,false);
addRelation("inv_0.@info.281",&wrapper_rel_215_inv_0_info_281,false,false);
addRelation("inv_0.@info.282",&wrapper_rel_216_inv_0_info_282,false,false);
addRelation("inv_0.@info.283",&wrapper_rel_217_inv_0_info_283,false,false);
addRelation("inv_0.@info.284",&wrapper_rel_218_inv_0_info_284,false,false);
addRelation("inv_0.@info.285",&wrapper_rel_219_inv_0_info_285,false,false);
addRelation("inv_0.@info.286",&wrapper_rel_220_inv_0_info_286,false,false);
addRelation("inv_0.@info.287",&wrapper_rel_221_inv_0_info_287,false,false);
addRelation("inv_0.@info.288",&wrapper_rel_222_inv_0_info_288,false,false);
addRelation("inv_0.@info.289",&wrapper_rel_223_inv_0_info_289,false,false);
addRelation("inv_0.@info.29",&wrapper_rel_224_inv_0_info_29,false,false);
addRelation("inv_0.@info.290",&wrapper_rel_225_inv_0_info_290,false,false);
addRelation("inv_0.@info.291",&wrapper_rel_226_inv_0_info_291,false,false);
addRelation("inv_0.@info.292",&wrapper_rel_227_inv_0_info_292,false,false);
addRelation("inv_0.@info.293",&wrapper_rel_228_inv_0_info_293,false,false);
addRelation("inv_0.@info.294",&wrapper_rel_229_inv_0_info_294,false,false);
addRelation("inv_0.@info.295",&wrapper_rel_230_inv_0_info_295,false,false);
addRelation("inv_0.@info.296",&wrapper_rel_231_inv_0_info_296,false,false);
addRelation("inv_0.@info.297",&wrapper_rel_232_inv_0_info_297,false,false);
addRelation("inv_0.@info.298",&wrapper_rel_233_inv_0_info_298,false,false);
addRelation("inv_0.@info.299",&wrapper_rel_234_inv_0_info_299,false,false);
addRelation("inv_0.@info.3",&wrapper_rel_235_inv_0_info_3,false,false);
addRelation("inv_0.@info.30",&wrapper_rel_236_inv_0_info_30,false,false);
addRelation("inv_0.@info.300",&wrapper_rel_237_inv_0_info_300,false,false);
addRelation("inv_0.@info.301",&wrapper_rel_238_inv_0_info_301,false,false);
addRelation("inv_0.@info.302",&wrapper_rel_239_inv_0_info_302,false,false);
addRelation("inv_0.@info.303",&wrapper_rel_240_inv_0_info_303,false,false);
addRelation("inv_0.@info.304",&wrapper_rel_241_inv_0_info_304,false,false);
addRelation("inv_0.@info.305",&wrapper_rel_242_inv_0_info_305,false,false);
addRelation("inv_0.@info.306",&wrapper_rel_243_inv_0_info_306,false,false);
addRelation("inv_0.@info.307",&wrapper_rel_244_inv_0_info_307,false,false);
addRelation("inv_0.@info.308",&wrapper_rel_245_inv_0_info_308,false,false);
addRelation("inv_0.@info.309",&wrapper_rel_246_inv_0_info_309,false,false);
addRelation("inv_0.@info.31",&wrapper_rel_247_inv_0_info_31,false,false);
addRelation("inv_0.@info.310",&wrapper_rel_248_inv_0_info_310,false,false);
addRelation("inv_0.@info.311",&wrapper_rel_249_inv_0_info_311,false,false);
addRelation("inv_0.@info.312",&wrapper_rel_250_inv_0_info_312,false,false);
addRelation("inv_0.@info.313",&wrapper_rel_251_inv_0_info_313,false,false);
addRelation("inv_0.@info.314",&wrapper_rel_252_inv_0_info_314,false,false);
addRelation("inv_0.@info.315",&wrapper_rel_253_inv_0_info_315,false,false);
addRelation("inv_0.@info.316",&wrapper_rel_254_inv_0_info_316,false,false);
addRelation("inv_0.@info.317",&wrapper_rel_255_inv_0_info_317,false,false);
addRelation("inv_0.@info.318",&wrapper_rel_256_inv_0_info_318,false,false);
addRelation("inv_0.@info.319",&wrapper_rel_257_inv_0_info_319,false,false);
addRelation("inv_0.@info.32",&wrapper_rel_258_inv_0_info_32,false,false);
addRelation("inv_0.@info.320",&wrapper_rel_259_inv_0_info_320,false,false);
addRelation("inv_0.@info.321",&wrapper_rel_260_inv_0_info_321,false,false);
addRelation("inv_0.@info.322",&wrapper_rel_261_inv_0_info_322,false,false);
addRelation("inv_0.@info.323",&wrapper_rel_262_inv_0_info_323,false,false);
addRelation("inv_0.@info.324",&wrapper_rel_263_inv_0_info_324,false,false);
addRelation("inv_0.@info.325",&wrapper_rel_264_inv_0_info_325,false,false);
addRelation("inv_0.@info.326",&wrapper_rel_265_inv_0_info_326,false,false);
addRelation("inv_0.@info.327",&wrapper_rel_266_inv_0_info_327,false,false);
addRelation("inv_0.@info.328",&wrapper_rel_267_inv_0_info_328,false,false);
addRelation("inv_0.@info.329",&wrapper_rel_268_inv_0_info_329,false,false);
addRelation("inv_0.@info.33",&wrapper_rel_269_inv_0_info_33,false,false);
addRelation("inv_0.@info.330",&wrapper_rel_270_inv_0_info_330,false,false);
addRelation("inv_0.@info.331",&wrapper_rel_271_inv_0_info_331,false,false);
addRelation("inv_0.@info.332",&wrapper_rel_272_inv_0_info_332,false,false);
addRelation("inv_0.@info.333",&wrapper_rel_273_inv_0_info_333,false,false);
addRelation("inv_0.@info.334",&wrapper_rel_274_inv_0_info_334,false,false);
addRelation("inv_0.@info.335",&wrapper_rel_275_inv_0_info_335,false,false);
addRelation("inv_0.@info.336",&wrapper_rel_276_inv_0_info_336,false,false);
addRelation("inv_0.@info.337",&wrapper_rel_277_inv_0_info_337,false,false);
addRelation("inv_0.@info.338",&wrapper_rel_278_inv_0_info_338,false,false);
addRelation("inv_0.@info.339",&wrapper_rel_279_inv_0_info_339,false,false);
addRelation("inv_0.@info.34",&wrapper_rel_280_inv_0_info_34,false,false);
addRelation("inv_0.@info.340",&wrapper_rel_281_inv_0_info_340,false,false);
addRelation("inv_0.@info.341",&wrapper_rel_282_inv_0_info_341,false,false);
addRelation("inv_0.@info.342",&wrapper_rel_283_inv_0_info_342,false,false);
addRelation("inv_0.@info.343",&wrapper_rel_284_inv_0_info_343,false,false);
addRelation("inv_0.@info.344",&wrapper_rel_285_inv_0_info_344,false,false);
addRelation("inv_0.@info.345",&wrapper_rel_286_inv_0_info_345,false,false);
addRelation("inv_0.@info.346",&wrapper_rel_287_inv_0_info_346,false,false);
addRelation("inv_0.@info.347",&wrapper_rel_288_inv_0_info_347,false,false);
addRelation("inv_0.@info.348",&wrapper_rel_289_inv_0_info_348,false,false);
addRelation("inv_0.@info.349",&wrapper_rel_290_inv_0_info_349,false,false);
addRelation("inv_0.@info.35",&wrapper_rel_291_inv_0_info_35,false,false);
addRelation("inv_0.@info.350",&wrapper_rel_292_inv_0_info_350,false,false);
addRelation("inv_0.@info.36",&wrapper_rel_293_inv_0_info_36,false,false);
addRelation("inv_0.@info.37",&wrapper_rel_294_inv_0_info_37,false,false);
addRelation("inv_0.@info.38",&wrapper_rel_295_inv_0_info_38,false,false);
addRelation("inv_0.@info.39",&wrapper_rel_296_inv_0_info_39,false,false);
addRelation("inv_0.@info.4",&wrapper_rel_297_inv_0_info_4,false,false);
addRelation("inv_0.@info.40",&wrapper_rel_298_inv_0_info_40,false,false);
addRelation("inv_0.@info.41",&wrapper_rel_299_inv_0_info_41,false,false);
addRelation("inv_0.@info.42",&wrapper_rel_300_inv_0_info_42,false,false);
addRelation("inv_0.@info.43",&wrapper_rel_301_inv_0_info_43,false,false);
addRelation("inv_0.@info.44",&wrapper_rel_302_inv_0_info_44,false,false);
addRelation("inv_0.@info.45",&wrapper_rel_303_inv_0_info_45,false,false);
addRelation("inv_0.@info.46",&wrapper_rel_304_inv_0_info_46,false,false);
addRelation("inv_0.@info.47",&wrapper_rel_305_inv_0_info_47,false,false);
addRelation("inv_0.@info.48",&wrapper_rel_306_inv_0_info_48,false,false);
addRelation("inv_0.@info.49",&wrapper_rel_307_inv_0_info_49,false,false);
addRelation("inv_0.@info.5",&wrapper_rel_308_inv_0_info_5,false,false);
addRelation("inv_0.@info.50",&wrapper_rel_309_inv_0_info_50,false,false);
addRelation("inv_0.@info.51",&wrapper_rel_310_inv_0_info_51,false,false);
addRelation("inv_0.@info.52",&wrapper_rel_311_inv_0_info_52,false,false);
addRelation("inv_0.@info.53",&wrapper_rel_312_inv_0_info_53,false,false);
addRelation("inv_0.@info.54",&wrapper_rel_313_inv_0_info_54,false,false);
addRelation("inv_0.@info.55",&wrapper_rel_314_inv_0_info_55,false,false);
addRelation("inv_0.@info.56",&wrapper_rel_315_inv_0_info_56,false,false);
addRelation("inv_0.@info.57",&wrapper_rel_316_inv_0_info_57,false,false);
addRelation("inv_0.@info.58",&wrapper_rel_317_inv_0_info_58,false,false);
addRelation("inv_0.@info.59",&wrapper_rel_318_inv_0_info_59,false,false);
addRelation("inv_0.@info.6",&wrapper_rel_319_inv_0_info_6,false,false);
addRelation("inv_0.@info.60",&wrapper_rel_320_inv_0_info_60,false,false);
addRelation("inv_0.@info.61",&wrapper_rel_321_inv_0_info_61,false,false);
addRelation("inv_0.@info.62",&wrapper_rel_322_inv_0_info_62,false,false);
addRelation("inv_0.@info.63",&wrapper_rel_323_inv_0_info_63,false,false);
addRelation("inv_0.@info.64",&wrapper_rel_324_inv_0_info_64,false,false);
addRelation("inv_0.@info.65",&wrapper_rel_325_inv_0_info_65,false,false);
addRelation("inv_0.@info.66",&wrapper_rel_326_inv_0_info_66,false,false);
addRelation("inv_0.@info.67",&wrapper_rel_327_inv_0_info_67,false,false);
addRelation("inv_0.@info.68",&wrapper_rel_328_inv_0_info_68,false,false);
addRelation("inv_0.@info.69",&wrapper_rel_329_inv_0_info_69,false,false);
addRelation("inv_0.@info.7",&wrapper_rel_330_inv_0_info_7,false,false);
addRelation("inv_0.@info.70",&wrapper_rel_331_inv_0_info_70,false,false);
addRelation("inv_0.@info.71",&wrapper_rel_332_inv_0_info_71,false,false);
addRelation("inv_0.@info.72",&wrapper_rel_333_inv_0_info_72,false,false);
addRelation("inv_0.@info.73",&wrapper_rel_334_inv_0_info_73,false,false);
addRelation("inv_0.@info.74",&wrapper_rel_335_inv_0_info_74,false,false);
addRelation("inv_0.@info.75",&wrapper_rel_336_inv_0_info_75,false,false);
addRelation("inv_0.@info.76",&wrapper_rel_337_inv_0_info_76,false,false);
addRelation("inv_0.@info.77",&wrapper_rel_338_inv_0_info_77,false,false);
addRelation("inv_0.@info.78",&wrapper_rel_339_inv_0_info_78,false,false);
addRelation("inv_0.@info.79",&wrapper_rel_340_inv_0_info_79,false,false);
addRelation("inv_0.@info.8",&wrapper_rel_341_inv_0_info_8,false,false);
addRelation("inv_0.@info.80",&wrapper_rel_342_inv_0_info_80,false,false);
addRelation("inv_0.@info.81",&wrapper_rel_343_inv_0_info_81,false,false);
addRelation("inv_0.@info.82",&wrapper_rel_344_inv_0_info_82,false,false);
addRelation("inv_0.@info.83",&wrapper_rel_345_inv_0_info_83,false,false);
addRelation("inv_0.@info.84",&wrapper_rel_346_inv_0_info_84,false,false);
addRelation("inv_0.@info.85",&wrapper_rel_347_inv_0_info_85,false,false);
addRelation("inv_0.@info.86",&wrapper_rel_348_inv_0_info_86,false,false);
addRelation("inv_0.@info.87",&wrapper_rel_349_inv_0_info_87,false,false);
addRelation("inv_0.@info.88",&wrapper_rel_350_inv_0_info_88,false,false);
addRelation("inv_0.@info.89",&wrapper_rel_351_inv_0_info_89,false,false);
addRelation("inv_0.@info.9",&wrapper_rel_352_inv_0_info_9,false,false);
addRelation("inv_0.@info.90",&wrapper_rel_353_inv_0_info_90,false,false);
addRelation("inv_0.@info.91",&wrapper_rel_354_inv_0_info_91,false,false);
addRelation("inv_0.@info.92",&wrapper_rel_355_inv_0_info_92,false,false);
addRelation("inv_0.@info.93",&wrapper_rel_356_inv_0_info_93,false,false);
addRelation("inv_0.@info.94",&wrapper_rel_357_inv_0_info_94,false,false);
addRelation("inv_0.@info.95",&wrapper_rel_358_inv_0_info_95,false,false);
addRelation("inv_0.@info.96",&wrapper_rel_359_inv_0_info_96,false,false);
addRelation("inv_0.@info.97",&wrapper_rel_360_inv_0_info_97,false,false);
addRelation("inv_0.@info.98",&wrapper_rel_361_inv_0_info_98,false,false);
addRelation("inv_0.@info.99",&wrapper_rel_362_inv_0_info_99,false,false);
addRelation("livesIn.@info.1",&wrapper_rel_363_livesIn_info_1,false,false);
addRelation("livesIn.@info.10",&wrapper_rel_364_livesIn_info_10,false,false);
addRelation("livesIn.@info.100",&wrapper_rel_365_livesIn_info_100,false,false);
addRelation("livesIn.@info.101",&wrapper_rel_366_livesIn_info_101,false,false);
addRelation("livesIn.@info.102",&wrapper_rel_367_livesIn_info_102,false,false);
addRelation("livesIn.@info.103",&wrapper_rel_368_livesIn_info_103,false,false);
addRelation("livesIn.@info.104",&wrapper_rel_369_livesIn_info_104,false,false);
addRelation("livesIn.@info.105",&wrapper_rel_370_livesIn_info_105,false,false);
addRelation("livesIn.@info.106",&wrapper_rel_371_livesIn_info_106,false,false);
addRelation("livesIn.@info.107",&wrapper_rel_372_livesIn_info_107,false,false);
addRelation("livesIn.@info.108",&wrapper_rel_373_livesIn_info_108,false,false);
addRelation("livesIn.@info.109",&wrapper_rel_374_livesIn_info_109,false,false);
addRelation("livesIn.@info.11",&wrapper_rel_375_livesIn_info_11,false,false);
addRelation("livesIn.@info.110",&wrapper_rel_376_livesIn_info_110,false,false);
addRelation("livesIn.@info.111",&wrapper_rel_377_livesIn_info_111,false,false);
addRelation("livesIn.@info.112",&wrapper_rel_378_livesIn_info_112,false,false);
addRelation("livesIn.@info.113",&wrapper_rel_379_livesIn_info_113,false,false);
addRelation("livesIn.@info.114",&wrapper_rel_380_livesIn_info_114,false,false);
addRelation("livesIn.@info.115",&wrapper_rel_381_livesIn_info_115,false,false);
addRelation("livesIn.@info.116",&wrapper_rel_382_livesIn_info_116,false,false);
addRelation("livesIn.@info.117",&wrapper_rel_383_livesIn_info_117,false,false);
addRelation("livesIn.@info.118",&wrapper_rel_384_livesIn_info_118,false,false);
addRelation("livesIn.@info.119",&wrapper_rel_385_livesIn_info_119,false,false);
addRelation("livesIn.@info.12",&wrapper_rel_386_livesIn_info_12,false,false);
addRelation("livesIn.@info.120",&wrapper_rel_387_livesIn_info_120,false,false);
addRelation("livesIn.@info.121",&wrapper_rel_388_livesIn_info_121,false,false);
addRelation("livesIn.@info.122",&wrapper_rel_389_livesIn_info_122,false,false);
addRelation("livesIn.@info.123",&wrapper_rel_390_livesIn_info_123,false,false);
addRelation("livesIn.@info.124",&wrapper_rel_391_livesIn_info_124,false,false);
addRelation("livesIn.@info.125",&wrapper_rel_392_livesIn_info_125,false,false);
addRelation("livesIn.@info.126",&wrapper_rel_393_livesIn_info_126,false,false);
addRelation("livesIn.@info.127",&wrapper_rel_394_livesIn_info_127,false,false);
addRelation("livesIn.@info.128",&wrapper_rel_395_livesIn_info_128,false,false);
addRelation("livesIn.@info.129",&wrapper_rel_396_livesIn_info_129,false,false);
addRelation("livesIn.@info.13",&wrapper_rel_397_livesIn_info_13,false,false);
addRelation("livesIn.@info.130",&wrapper_rel_398_livesIn_info_130,false,false);
addRelation("livesIn.@info.131",&wrapper_rel_399_livesIn_info_131,false,false);
addRelation("livesIn.@info.132",&wrapper_rel_400_livesIn_info_132,false,false);
addRelation("livesIn.@info.133",&wrapper_rel_401_livesIn_info_133,false,false);
addRelation("livesIn.@info.134",&wrapper_rel_402_livesIn_info_134,false,false);
addRelation("livesIn.@info.135",&wrapper_rel_403_livesIn_info_135,false,false);
addRelation("livesIn.@info.136",&wrapper_rel_404_livesIn_info_136,false,false);
addRelation("livesIn.@info.137",&wrapper_rel_405_livesIn_info_137,false,false);
addRelation("livesIn.@info.138",&wrapper_rel_406_livesIn_info_138,false,false);
addRelation("livesIn.@info.139",&wrapper_rel_407_livesIn_info_139,false,false);
addRelation("livesIn.@info.14",&wrapper_rel_408_livesIn_info_14,false,false);
addRelation("livesIn.@info.140",&wrapper_rel_409_livesIn_info_140,false,false);
addRelation("livesIn.@info.141",&wrapper_rel_410_livesIn_info_141,false,false);
addRelation("livesIn.@info.142",&wrapper_rel_411_livesIn_info_142,false,false);
addRelation("livesIn.@info.143",&wrapper_rel_412_livesIn_info_143,false,false);
addRelation("livesIn.@info.144",&wrapper_rel_413_livesIn_info_144,false,false);
addRelation("livesIn.@info.145",&wrapper_rel_414_livesIn_info_145,false,false);
addRelation("livesIn.@info.146",&wrapper_rel_415_livesIn_info_146,false,false);
addRelation("livesIn.@info.147",&wrapper_rel_416_livesIn_info_147,false,false);
addRelation("livesIn.@info.148",&wrapper_rel_417_livesIn_info_148,false,false);
addRelation("livesIn.@info.149",&wrapper_rel_418_livesIn_info_149,false,false);
addRelation("livesIn.@info.15",&wrapper_rel_419_livesIn_info_15,false,false);
addRelation("livesIn.@info.150",&wrapper_rel_420_livesIn_info_150,false,false);
addRelation("livesIn.@info.151",&wrapper_rel_421_livesIn_info_151,false,false);
addRelation("livesIn.@info.152",&wrapper_rel_422_livesIn_info_152,false,false);
addRelation("livesIn.@info.153",&wrapper_rel_423_livesIn_info_153,false,false);
addRelation("livesIn.@info.154",&wrapper_rel_424_livesIn_info_154,false,false);
addRelation("livesIn.@info.155",&wrapper_rel_425_livesIn_info_155,false,false);
addRelation("livesIn.@info.156",&wrapper_rel_426_livesIn_info_156,false,false);
addRelation("livesIn.@info.157",&wrapper_rel_427_livesIn_info_157,false,false);
addRelation("livesIn.@info.158",&wrapper_rel_428_livesIn_info_158,false,false);
addRelation("livesIn.@info.159",&wrapper_rel_429_livesIn_info_159,false,false);
addRelation("livesIn.@info.16",&wrapper_rel_430_livesIn_info_16,false,false);
addRelation("livesIn.@info.160",&wrapper_rel_431_livesIn_info_160,false,false);
addRelation("livesIn.@info.161",&wrapper_rel_432_livesIn_info_161,false,false);
addRelation("livesIn.@info.162",&wrapper_rel_433_livesIn_info_162,false,false);
addRelation("livesIn.@info.163",&wrapper_rel_434_livesIn_info_163,false,false);
addRelation("livesIn.@info.164",&wrapper_rel_435_livesIn_info_164,false,false);
addRelation("livesIn.@info.165",&wrapper_rel_436_livesIn_info_165,false,false);
addRelation("livesIn.@info.166",&wrapper_rel_437_livesIn_info_166,false,false);
addRelation("livesIn.@info.167",&wrapper_rel_438_livesIn_info_167,false,false);
addRelation("livesIn.@info.168",&wrapper_rel_439_livesIn_info_168,false,false);
addRelation("livesIn.@info.169",&wrapper_rel_440_livesIn_info_169,false,false);
addRelation("livesIn.@info.17",&wrapper_rel_441_livesIn_info_17,false,false);
addRelation("livesIn.@info.170",&wrapper_rel_442_livesIn_info_170,false,false);
addRelation("livesIn.@info.171",&wrapper_rel_443_livesIn_info_171,false,false);
addRelation("livesIn.@info.172",&wrapper_rel_444_livesIn_info_172,false,false);
addRelation("livesIn.@info.173",&wrapper_rel_445_livesIn_info_173,false,false);
addRelation("livesIn.@info.174",&wrapper_rel_446_livesIn_info_174,false,false);
addRelation("livesIn.@info.175",&wrapper_rel_447_livesIn_info_175,false,false);
addRelation("livesIn.@info.176",&wrapper_rel_448_livesIn_info_176,false,false);
addRelation("livesIn.@info.177",&wrapper_rel_449_livesIn_info_177,false,false);
addRelation("livesIn.@info.178",&wrapper_rel_450_livesIn_info_178,false,false);
addRelation("livesIn.@info.179",&wrapper_rel_451_livesIn_info_179,false,false);
addRelation("livesIn.@info.18",&wrapper_rel_452_livesIn_info_18,false,false);
addRelation("livesIn.@info.180",&wrapper_rel_453_livesIn_info_180,false,false);
addRelation("livesIn.@info.181",&wrapper_rel_454_livesIn_info_181,false,false);
addRelation("livesIn.@info.182",&wrapper_rel_455_livesIn_info_182,false,false);
addRelation("livesIn.@info.183",&wrapper_rel_456_livesIn_info_183,false,false);
addRelation("livesIn.@info.184",&wrapper_rel_457_livesIn_info_184,false,false);
addRelation("livesIn.@info.185",&wrapper_rel_458_livesIn_info_185,false,false);
addRelation("livesIn.@info.186",&wrapper_rel_459_livesIn_info_186,false,false);
addRelation("livesIn.@info.187",&wrapper_rel_460_livesIn_info_187,false,false);
addRelation("livesIn.@info.188",&wrapper_rel_461_livesIn_info_188,false,false);
addRelation("livesIn.@info.189",&wrapper_rel_462_livesIn_info_189,false,false);
addRelation("livesIn.@info.19",&wrapper_rel_463_livesIn_info_19,false,false);
addRelation("livesIn.@info.190",&wrapper_rel_464_livesIn_info_190,false,false);
addRelation("livesIn.@info.191",&wrapper_rel_465_livesIn_info_191,false,false);
addRelation("livesIn.@info.192",&wrapper_rel_466_livesIn_info_192,false,false);
addRelation("livesIn.@info.193",&wrapper_rel_467_livesIn_info_193,false,false);
addRelation("livesIn.@info.194",&wrapper_rel_468_livesIn_info_194,false,false);
addRelation("livesIn.@info.195",&wrapper_rel_469_livesIn_info_195,false,false);
addRelation("livesIn.@info.196",&wrapper_rel_470_livesIn_info_196,false,false);
addRelation("livesIn.@info.197",&wrapper_rel_471_livesIn_info_197,false,false);
addRelation("livesIn.@info.198",&wrapper_rel_472_livesIn_info_198,false,false);
addRelation("livesIn.@info.199",&wrapper_rel_473_livesIn_info_199,false,false);
addRelation("livesIn.@info.2",&wrapper_rel_474_livesIn_info_2,false,false);
addRelation("livesIn.@info.20",&wrapper_rel_475_livesIn_info_20,false,false);
addRelation("livesIn.@info.200",&wrapper_rel_476_livesIn_info_200,false,false);
addRelation("livesIn.@info.201",&wrapper_rel_477_livesIn_info_201,false,false);
addRelation("livesIn.@info.202",&wrapper_rel_478_livesIn_info_202,false,false);
addRelation("livesIn.@info.203",&wrapper_rel_479_livesIn_info_203,false,false);
addRelation("livesIn.@info.204",&wrapper_rel_480_livesIn_info_204,false,false);
addRelation("livesIn.@info.205",&wrapper_rel_481_livesIn_info_205,false,false);
addRelation("livesIn.@info.206",&wrapper_rel_482_livesIn_info_206,false,false);
addRelation("livesIn.@info.207",&wrapper_rel_483_livesIn_info_207,false,false);
addRelation("livesIn.@info.208",&wrapper_rel_484_livesIn_info_208,false,false);
addRelation("livesIn.@info.209",&wrapper_rel_485_livesIn_info_209,false,false);
addRelation("livesIn.@info.21",&wrapper_rel_486_livesIn_info_21,false,false);
addRelation("livesIn.@info.210",&wrapper_rel_487_livesIn_info_210,false,false);
addRelation("livesIn.@info.211",&wrapper_rel_488_livesIn_info_211,false,false);
addRelation("livesIn.@info.212",&wrapper_rel_489_livesIn_info_212,false,false);
addRelation("livesIn.@info.213",&wrapper_rel_490_livesIn_info_213,false,false);
addRelation("livesIn.@info.214",&wrapper_rel_491_livesIn_info_214,false,false);
addRelation("livesIn.@info.215",&wrapper_rel_492_livesIn_info_215,false,false);
addRelation("livesIn.@info.216",&wrapper_rel_493_livesIn_info_216,false,false);
addRelation("livesIn.@info.217",&wrapper_rel_494_livesIn_info_217,false,false);
addRelation("livesIn.@info.218",&wrapper_rel_495_livesIn_info_218,false,false);
addRelation("livesIn.@info.219",&wrapper_rel_496_livesIn_info_219,false,false);
addRelation("livesIn.@info.22",&wrapper_rel_497_livesIn_info_22,false,false);
addRelation("livesIn.@info.220",&wrapper_rel_498_livesIn_info_220,false,false);
addRelation("livesIn.@info.221",&wrapper_rel_499_livesIn_info_221,false,false);
addRelation("livesIn.@info.222",&wrapper_rel_500_livesIn_info_222,false,false);
addRelation("livesIn.@info.223",&wrapper_rel_501_livesIn_info_223,false,false);
addRelation("livesIn.@info.224",&wrapper_rel_502_livesIn_info_224,false,false);
addRelation("livesIn.@info.225",&wrapper_rel_503_livesIn_info_225,false,false);
addRelation("livesIn.@info.226",&wrapper_rel_504_livesIn_info_226,false,false);
addRelation("livesIn.@info.227",&wrapper_rel_505_livesIn_info_227,false,false);
addRelation("livesIn.@info.228",&wrapper_rel_506_livesIn_info_228,false,false);
addRelation("livesIn.@info.229",&wrapper_rel_507_livesIn_info_229,false,false);
addRelation("livesIn.@info.23",&wrapper_rel_508_livesIn_info_23,false,false);
addRelation("livesIn.@info.230",&wrapper_rel_509_livesIn_info_230,false,false);
addRelation("livesIn.@info.231",&wrapper_rel_510_livesIn_info_231,false,false);
addRelation("livesIn.@info.232",&wrapper_rel_511_livesIn_info_232,false,false);
addRelation("livesIn.@info.233",&wrapper_rel_512_livesIn_info_233,false,false);
addRelation("livesIn.@info.234",&wrapper_rel_513_livesIn_info_234,false,false);
addRelation("livesIn.@info.235",&wrapper_rel_514_livesIn_info_235,false,false);
addRelation("livesIn.@info.236",&wrapper_rel_515_livesIn_info_236,false,false);
addRelation("livesIn.@info.237",&wrapper_rel_516_livesIn_info_237,false,false);
addRelation("livesIn.@info.238",&wrapper_rel_517_livesIn_info_238,false,false);
addRelation("livesIn.@info.239",&wrapper_rel_518_livesIn_info_239,false,false);
addRelation("livesIn.@info.24",&wrapper_rel_519_livesIn_info_24,false,false);
addRelation("livesIn.@info.240",&wrapper_rel_520_livesIn_info_240,false,false);
addRelation("livesIn.@info.241",&wrapper_rel_521_livesIn_info_241,false,false);
addRelation("livesIn.@info.242",&wrapper_rel_522_livesIn_info_242,false,false);
addRelation("livesIn.@info.243",&wrapper_rel_523_livesIn_info_243,false,false);
addRelation("livesIn.@info.244",&wrapper_rel_524_livesIn_info_244,false,false);
addRelation("livesIn.@info.245",&wrapper_rel_525_livesIn_info_245,false,false);
addRelation("livesIn.@info.246",&wrapper_rel_526_livesIn_info_246,false,false);
addRelation("livesIn.@info.247",&wrapper_rel_527_livesIn_info_247,false,false);
addRelation("livesIn.@info.248",&wrapper_rel_528_livesIn_info_248,false,false);
addRelation("livesIn.@info.249",&wrapper_rel_529_livesIn_info_249,false,false);
addRelation("livesIn.@info.25",&wrapper_rel_530_livesIn_info_25,false,false);
addRelation("livesIn.@info.250",&wrapper_rel_531_livesIn_info_250,false,false);
addRelation("livesIn.@info.251",&wrapper_rel_532_livesIn_info_251,false,false);
addRelation("livesIn.@info.252",&wrapper_rel_533_livesIn_info_252,false,false);
addRelation("livesIn.@info.253",&wrapper_rel_534_livesIn_info_253,false,false);
addRelation("livesIn.@info.254",&wrapper_rel_535_livesIn_info_254,false,false);
addRelation("livesIn.@info.255",&wrapper_rel_536_livesIn_info_255,false,false);
addRelation("livesIn.@info.256",&wrapper_rel_537_livesIn_info_256,false,false);
addRelation("livesIn.@info.257",&wrapper_rel_538_livesIn_info_257,false,false);
addRelation("livesIn.@info.258",&wrapper_rel_539_livesIn_info_258,false,false);
addRelation("livesIn.@info.259",&wrapper_rel_540_livesIn_info_259,false,false);
addRelation("livesIn.@info.26",&wrapper_rel_541_livesIn_info_26,false,false);
addRelation("livesIn.@info.260",&wrapper_rel_542_livesIn_info_260,false,false);
addRelation("livesIn.@info.261",&wrapper_rel_543_livesIn_info_261,false,false);
addRelation("livesIn.@info.262",&wrapper_rel_544_livesIn_info_262,false,false);
addRelation("livesIn.@info.263",&wrapper_rel_545_livesIn_info_263,false,false);
addRelation("livesIn.@info.264",&wrapper_rel_546_livesIn_info_264,false,false);
addRelation("livesIn.@info.27",&wrapper_rel_547_livesIn_info_27,false,false);
addRelation("livesIn.@info.28",&wrapper_rel_548_livesIn_info_28,false,false);
addRelation("livesIn.@info.29",&wrapper_rel_549_livesIn_info_29,false,false);
addRelation("livesIn.@info.3",&wrapper_rel_550_livesIn_info_3,false,false);
addRelation("livesIn.@info.30",&wrapper_rel_551_livesIn_info_30,false,false);
addRelation("livesIn.@info.31",&wrapper_rel_552_livesIn_info_31,false,false);
addRelation("livesIn.@info.32",&wrapper_rel_553_livesIn_info_32,false,false);
addRelation("livesIn.@info.33",&wrapper_rel_554_livesIn_info_33,false,false);
addRelation("livesIn.@info.34",&wrapper_rel_555_livesIn_info_34,false,false);
addRelation("livesIn.@info.35",&wrapper_rel_556_livesIn_info_35,false,false);
addRelation("livesIn.@info.36",&wrapper_rel_557_livesIn_info_36,false,false);
addRelation("livesIn.@info.37",&wrapper_rel_558_livesIn_info_37,false,false);
addRelation("livesIn.@info.38",&wrapper_rel_559_livesIn_info_38,false,false);
addRelation("livesIn.@info.39",&wrapper_rel_560_livesIn_info_39,false,false);
addRelation("livesIn.@info.4",&wrapper_rel_561_livesIn_info_4,false,false);
addRelation("livesIn.@info.40",&wrapper_rel_562_livesIn_info_40,false,false);
addRelation("livesIn.@info.41",&wrapper_rel_563_livesIn_info_41,false,false);
addRelation("livesIn.@info.42",&wrapper_rel_564_livesIn_info_42,false,false);
addRelation("livesIn.@info.43",&wrapper_rel_565_livesIn_info_43,false,false);
addRelation("livesIn.@info.44",&wrapper_rel_566_livesIn_info_44,false,false);
addRelation("livesIn.@info.45",&wrapper_rel_567_livesIn_info_45,false,false);
addRelation("livesIn.@info.46",&wrapper_rel_568_livesIn_info_46,false,false);
addRelation("livesIn.@info.47",&wrapper_rel_569_livesIn_info_47,false,false);
addRelation("livesIn.@info.48",&wrapper_rel_570_livesIn_info_48,false,false);
addRelation("livesIn.@info.49",&wrapper_rel_571_livesIn_info_49,false,false);
addRelation("livesIn.@info.5",&wrapper_rel_572_livesIn_info_5,false,false);
addRelation("livesIn.@info.50",&wrapper_rel_573_livesIn_info_50,false,false);
addRelation("livesIn.@info.51",&wrapper_rel_574_livesIn_info_51,false,false);
addRelation("livesIn.@info.52",&wrapper_rel_575_livesIn_info_52,false,false);
addRelation("livesIn.@info.53",&wrapper_rel_576_livesIn_info_53,false,false);
addRelation("livesIn.@info.54",&wrapper_rel_577_livesIn_info_54,false,false);
addRelation("livesIn.@info.55",&wrapper_rel_578_livesIn_info_55,false,false);
addRelation("livesIn.@info.56",&wrapper_rel_579_livesIn_info_56,false,false);
addRelation("livesIn.@info.57",&wrapper_rel_580_livesIn_info_57,false,false);
addRelation("livesIn.@info.58",&wrapper_rel_581_livesIn_info_58,false,false);
addRelation("livesIn.@info.59",&wrapper_rel_582_livesIn_info_59,false,false);
addRelation("livesIn.@info.6",&wrapper_rel_583_livesIn_info_6,false,false);
addRelation("livesIn.@info.60",&wrapper_rel_584_livesIn_info_60,false,false);
addRelation("livesIn.@info.61",&wrapper_rel_585_livesIn_info_61,false,false);
addRelation("livesIn.@info.62",&wrapper_rel_586_livesIn_info_62,false,false);
addRelation("livesIn.@info.63",&wrapper_rel_587_livesIn_info_63,false,false);
addRelation("livesIn.@info.64",&wrapper_rel_588_livesIn_info_64,false,false);
addRelation("livesIn.@info.65",&wrapper_rel_589_livesIn_info_65,false,false);
addRelation("livesIn.@info.66",&wrapper_rel_590_livesIn_info_66,false,false);
addRelation("livesIn.@info.67",&wrapper_rel_591_livesIn_info_67,false,false);
addRelation("livesIn.@info.68",&wrapper_rel_592_livesIn_info_68,false,false);
addRelation("livesIn.@info.69",&wrapper_rel_593_livesIn_info_69,false,false);
addRelation("livesIn.@info.7",&wrapper_rel_594_livesIn_info_7,false,false);
addRelation("livesIn.@info.70",&wrapper_rel_595_livesIn_info_70,false,false);
addRelation("livesIn.@info.71",&wrapper_rel_596_livesIn_info_71,false,false);
addRelation("livesIn.@info.72",&wrapper_rel_597_livesIn_info_72,false,false);
addRelation("livesIn.@info.73",&wrapper_rel_598_livesIn_info_73,false,false);
addRelation("livesIn.@info.74",&wrapper_rel_599_livesIn_info_74,false,false);
addRelation("livesIn.@info.75",&wrapper_rel_600_livesIn_info_75,false,false);
addRelation("livesIn.@info.76",&wrapper_rel_601_livesIn_info_76,false,false);
addRelation("livesIn.@info.77",&wrapper_rel_602_livesIn_info_77,false,false);
addRelation("livesIn.@info.78",&wrapper_rel_603_livesIn_info_78,false,false);
addRelation("livesIn.@info.79",&wrapper_rel_604_livesIn_info_79,false,false);
addRelation("livesIn.@info.8",&wrapper_rel_605_livesIn_info_8,false,false);
addRelation("livesIn.@info.80",&wrapper_rel_606_livesIn_info_80,false,false);
addRelation("livesIn.@info.81",&wrapper_rel_607_livesIn_info_81,false,false);
addRelation("livesIn.@info.82",&wrapper_rel_608_livesIn_info_82,false,false);
addRelation("livesIn.@info.83",&wrapper_rel_609_livesIn_info_83,false,false);
addRelation("livesIn.@info.84",&wrapper_rel_610_livesIn_info_84,false,false);
addRelation("livesIn.@info.85",&wrapper_rel_611_livesIn_info_85,false,false);
addRelation("livesIn.@info.86",&wrapper_rel_612_livesIn_info_86,false,false);
addRelation("livesIn.@info.87",&wrapper_rel_613_livesIn_info_87,false,false);
addRelation("livesIn.@info.88",&wrapper_rel_614_livesIn_info_88,false,false);
addRelation("livesIn.@info.89",&wrapper_rel_615_livesIn_info_89,false,false);
addRelation("livesIn.@info.9",&wrapper_rel_616_livesIn_info_9,false,false);
addRelation("livesIn.@info.90",&wrapper_rel_617_livesIn_info_90,false,false);
addRelation("livesIn.@info.91",&wrapper_rel_618_livesIn_info_91,false,false);
addRelation("livesIn.@info.92",&wrapper_rel_619_livesIn_info_92,false,false);
addRelation("livesIn.@info.93",&wrapper_rel_620_livesIn_info_93,false,false);
addRelation("livesIn.@info.94",&wrapper_rel_621_livesIn_info_94,false,false);
addRelation("livesIn.@info.95",&wrapper_rel_622_livesIn_info_95,false,false);
addRelation("livesIn.@info.96",&wrapper_rel_623_livesIn_info_96,false,false);
addRelation("livesIn.@info.97",&wrapper_rel_624_livesIn_info_97,false,false);
addRelation("livesIn.@info.98",&wrapper_rel_625_livesIn_info_98,false,false);
addRelation("livesIn.@info.99",&wrapper_rel_626_livesIn_info_99,false,false);
}
~Sf_souffle_small() {
}
private:
void runFunction(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1, bool performIO = false) {
SignalHandler::instance()->set();
std::atomic<size_t> iter(0);

#if defined(_OPENMP)
if (getNumThreads() > 0) {omp_set_num_threads(getNumThreads());}
#endif

// -- query evaluation --
/* BEGIN STRATUM 0 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 0 */
/* BEGIN STRATUM 1 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./wikisourcelangProperty.facts"},{"name","wikisourcelangProperty"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 1 */
/* BEGIN STRATUM 2 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./writer.facts"},{"name","writer"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_writer);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 2 */
/* BEGIN STRATUM 3 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./year.facts"},{"name","year"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_year);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 3 */
/* BEGIN STRATUM 4 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./yearOfRelease.facts"},{"name","yearOfRelease"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_yearOfRelease);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 4 */
/* BEGIN STRATUM 5 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./years.facts"},{"name","years"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_6_years);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 5 */
/* BEGIN STRATUM 6 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,1,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(0,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [29:1-29:43])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,2,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [30:1-30:43])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,3,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [31:1-31:51])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,4,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [32:1-32:51])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,5,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(4,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [33:1-33:42])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,6,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(5,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [34:1-34:42])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,7,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [35:1-35:44])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,8,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [36:1-36:44])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,9,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [37:1-37:60])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,10,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [38:1-38:60])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,13,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(12,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [41:1-41:59])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(12),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,14,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(13,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   years(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [42:1-42:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,15,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(14,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [43:1-43:59])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(14),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,16,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   years(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [44:1-44:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,17,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(16,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [45:1-45:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,18,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(17,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [46:1-46:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,19,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(18,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [47:1-47:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [48:1-48:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,21,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(20,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [49:1-49:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,22,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [50:1-50:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,23,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [51:1-51:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,24,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [52:1-52:59])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,25,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(24,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [53:1-53:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,26,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [54:1-54:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,27,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(26,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [55:1-55:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,28,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(27,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [56:1-56:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,29,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [57:1-57:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,30,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(29,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [58:1-58:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [59:1-59:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,32,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(31,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [60:1-60:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,33,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [61:1-61:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,34,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [62:1-62:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [63:1-63:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,36,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [64:1-64:67])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,37,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [65:1-65:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,38,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [66:1-66:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,39,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [67:1-67:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,40,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [68:1-68:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,41,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [69:1-69:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,42,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [70:1-70:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,43,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [71:1-71:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,44,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [72:1-72:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,45,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(44,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [73:1-73:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,46,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(45,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [74:1-74:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,47,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(46,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [75:1-75:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,48,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [76:1-76:58])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,49,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(48,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [77:1-77:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,50,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(49,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [78:1-78:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,51,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [79:1-79:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(51)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,52,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [80:1-80:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(52)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,53,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(52,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [81:1-81:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(53)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,54,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(53,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [82:1-82:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(54)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,55,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [83:1-83:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(55)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,56,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(55,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [84:1-84:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(55),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,57,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [85:1-85:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(57)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,58,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [86:1-86:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,59,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [87:1-87:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,60,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [88:1-88:60])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,61,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(60,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [89:1-89:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(60),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(61)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,62,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [90:1-90:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,63,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [91:1-91:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(63)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,64,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [92:1-92:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(64)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,65,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [93:1-93:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(65)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,66,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [94:1-94:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(66)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,67,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(66,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [95:1-95:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(67)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,68,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [96:1-96:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,69,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [97:1-97:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(69)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [98:1-98:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,71,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [99:1-99:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(71)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,72,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(71,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [100:1-100:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(72)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,85,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(84,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [113:1-113:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [114:1-114:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,87,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(86,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [115:1-115:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(87)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,88,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(87,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [116:1-116:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(88)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,89,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [117:1-117:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,90,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(89,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [118:1-118:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(90)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,91,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(90,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [119:1-119:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,92,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(91,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [120:1-120:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(91),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,93,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(92,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [121:1-121:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(92),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(93)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,94,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(93,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [122:1-122:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(93),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(94)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,95,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(94,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [123:1-123:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(94),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(95)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,96,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(95,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [124:1-124:75])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(95),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(96)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,97,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(96,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [125:1-125:66])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(96),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(97)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,98,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(97,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [126:1-126:66])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(97),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,99,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(98,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [127:1-127:66])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(98),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(99,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [128:1-128:66])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,101,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(100,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [129:1-129:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(100),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(101)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,102,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(101,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [130:1-130:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(101),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(102)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,103,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(102,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [131:1-131:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(102),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,104,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(103,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [132:1-132:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(103),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(104)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,105,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(104,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [133:1-133:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(104),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(105)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,106,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(105,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [134:1-134:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(106)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,107,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(106,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [135:1-135:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,108,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(107,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [136:1-136:67])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,109,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(108,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [137:1-137:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(108),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(109)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,110,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(109,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [138:1-138:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(109),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,111,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(110,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [139:1-139:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(110),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(111)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,112,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(111,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [140:1-140:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(111),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(112)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,113,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(112,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [141:1-141:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(112),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(113)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,114,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(113,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [142:1-142:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(113),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(114)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,115,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(114,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [143:1-143:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(114),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(115)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,116,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(115,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [144:1-144:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(115),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(116)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,117,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(116,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [145:1-145:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(116),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,118,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(117,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [146:1-146:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,119,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(118,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [147:1-147:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(119)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,120,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(119,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [148:1-148:69])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(119),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(120)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,121,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(120,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [149:1-149:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(120),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(121)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,122,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(121,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [150:1-150:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(121),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,123,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(122,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [151:1-151:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(122),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(123)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,124,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(123,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [152:1-152:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(123),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(124)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,125,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(124,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [153:1-153:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(124),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(125)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,126,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(125,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [154:1-154:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(125),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(126)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,127,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(126,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [155:1-155:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(126),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(127)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,128,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(127,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [156:1-156:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(127),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(128)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,129,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(128,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [157:1-157:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(128),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,130,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(129,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [158:1-158:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(129),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,131,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(130,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [159:1-159:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(131)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,132,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(131,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [160:1-160:85])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(131),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(132)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,145,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(144,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [173:1-173:58])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(144),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(145)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,146,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(145,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [174:1-174:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,147,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(146,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [175:1-175:58])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(147)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,148,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(147,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [176:1-176:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(147),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(148)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,149,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(148,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [177:1-177:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(149)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,150,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(149,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [178:1-178:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(149),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(150)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,151,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(150,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [179:1-179:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(150),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(151)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,152,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(151,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [180:1-180:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(151),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(152)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,153,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(152,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [181:1-181:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(152),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(153)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,154,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(153,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [182:1-182:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(153),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(154)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,155,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(154,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [183:1-183:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(154),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(155)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,156,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(155,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [184:1-184:58])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(155),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(156)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,157,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(156,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [185:1-185:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(156),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(157)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,158,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(157,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [186:1-186:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(157),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(158)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,159,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(158,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [187:1-187:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(158),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(159)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,160,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(159,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [188:1-188:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(159),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(160)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,161,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(160,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [189:1-189:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(160),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(161)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,162,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(161,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [190:1-190:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(161),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(162)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,163,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(162,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [191:1-191:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(162),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(163)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,164,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(163,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [192:1-192:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(163),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(164)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,165,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(164,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [193:1-193:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(164),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(165)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,166,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(165,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [194:1-194:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(165),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(166)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,167,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(166,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [195:1-195:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(166),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(167)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,168,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(167,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [196:1-196:60])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(168)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,169,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(168,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [197:1-197:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(168),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(169)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,170,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(169,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [198:1-198:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(169),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(170)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,171,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(170,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [199:1-199:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(171)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,172,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(171,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [200:1-200:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(171),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(172)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,173,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(172,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [201:1-201:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(172),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(173)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,174,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(173,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [202:1-202:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(173),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(174)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,175,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(174,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [203:1-203:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(174),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(175)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,176,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(175,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [204:1-204:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(175),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(176)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,177,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(176,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [205:1-205:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(176),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(177)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,178,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(177,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [206:1-206:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(177),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(178)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,179,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(178,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [207:1-207:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(178),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(179)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,180,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(179,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [208:1-208:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(179),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(180)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,193,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(192,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [221:1-221:62])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(192),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(193)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,194,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(193,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [222:1-222:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(194)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,195,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(194,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [223:1-223:62])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(194),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(195)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,196,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(195,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [224:1-224:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(195),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(196)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,197,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(196,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [225:1-225:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(196),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(197)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,198,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(197,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [226:1-226:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(197),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(198)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,199,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(198,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [227:1-227:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(198),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(199)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,200,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(199,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [228:1-228:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(199),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(200)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,201,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(200,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [229:1-229:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(200),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(201)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,202,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(201,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [230:1-230:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(201),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(202)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,203,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(202,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [231:1-231:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(202),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(203)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,204,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(203,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [232:1-232:62])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(203),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(204)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,205,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(204,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [233:1-233:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(204),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(205)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,206,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(205,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [234:1-234:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(205),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(206)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,207,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(206,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [235:1-235:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(207)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,208,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(207,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [236:1-236:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(207),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(208)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,209,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(208,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [237:1-237:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(208),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(209)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,210,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(209,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [238:1-238:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(209),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(210)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,211,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(210,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [239:1-239:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(210),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(211)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,212,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(211,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [240:1-240:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(211),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(212)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,213,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(212,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [241:1-241:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(212),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(213)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,214,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(213,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [242:1-242:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(213),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(214)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,215,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(214,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [243:1-243:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(214),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(215)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,216,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(215,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [244:1-244:78])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(215),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(216)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,229,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(228,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [257:1-257:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(228),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(229)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,230,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(229,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [258:1-258:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(229),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(230)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,231,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(230,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [259:1-259:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(231)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,232,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(231,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [260:1-260:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(231),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(232)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,233,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(232,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [261:1-261:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(232),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(233)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,234,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(233,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [262:1-262:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(233),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(234)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,235,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(234,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [263:1-263:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(234),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(235)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,236,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(235,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [264:1-264:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(235),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(236)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,237,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(236,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [265:1-265:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(236),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(237)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,238,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(237,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [266:1-266:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(237),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(238)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,239,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(238,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [267:1-267:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(238),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(239)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,240,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(239,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [268:1-268:94])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(239),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(240)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_7_livesIn->insert(tuple,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
}
}
}
}
();}
rel_8_delta_livesIn->insertAll(*rel_7_livesIn);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,11,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(10,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [39:1-39:46])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,12,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(11,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [40:1-40:46])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,73,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [101:1-101:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(73)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,74,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [102:1-102:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(74)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,75,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [103:1-103:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(75)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,76,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [104:1-104:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,77,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(76,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [105:1-105:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,78,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(77,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [106:1-106:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(77),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,79,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [107:1-107:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(79)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,80,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [108:1-108:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(80)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,81,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(80,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [109:1-109:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(81)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,82,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(81,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [110:1-110:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(82)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,83,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [111:1-111:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,84,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(83,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [112:1-112:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(84)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,133,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(132,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [161:1-161:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(132),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(133)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,134,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(133,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [162:1-162:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(133),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(134)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,135,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(134,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [163:1-163:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(134),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(135)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(135,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [164:1-164:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(135),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,137,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(136,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [165:1-165:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(136),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,138,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(137,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [166:1-166:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(137),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,139,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(138,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [167:1-167:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(139)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,140,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(139,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [168:1-168:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(140)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,141,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(140,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [169:1-169:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(140),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,142,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(141,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [170:1-170:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(141),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(142)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,143,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(142,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [171:1-171:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(142),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(143)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,144,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(143,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [172:1-172:70])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(143),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,181,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(180,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [209:1-209:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(180),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(181)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,182,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(181,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [210:1-210:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(181),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(182)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,183,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(182,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [211:1-211:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(182),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(183)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,184,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(183,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [212:1-212:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(183),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(184)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,185,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(184,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [213:1-213:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(184),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(185)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,186,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(185,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [214:1-214:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(185),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(186)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,187,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(186,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [215:1-215:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(186),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(187)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,188,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(187,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [216:1-216:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(187),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(188)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,189,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(188,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [217:1-217:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(188),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(189)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,190,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(189,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [218:1-218:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(189),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(190)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,191,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(190,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [219:1-219:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(190),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(191)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,192,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(191,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [220:1-220:61])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(191),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(192)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,217,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(216,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [245:1-245:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(216),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(217)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,218,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(217,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [246:1-246:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(217),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(218)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,219,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(218,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [247:1-247:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(218),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(219)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,220,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(219,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [248:1-248:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(220)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,221,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(220,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [249:1-249:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(221)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,222,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(221,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [250:1-250:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(221),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(222)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,223,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(222,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [251:1-251:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(222),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(223)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,224,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(223,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [252:1-252:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(223),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(224)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,225,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(224,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [253:1-253:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(224),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(225)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,226,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(225,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [254:1-254:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(225),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(226)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,227,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(226,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [255:1-255:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(226),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(227)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,228,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(227,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [256:1-256:63])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(227),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(228)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,241,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(240,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [269:1-269:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(240),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(241)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,242,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(241,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [270:1-270:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(241),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(242)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,243,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(242,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [271:1-271:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(242),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(243)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,244,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(243,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [272:1-272:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(243),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(244)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,245,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(244,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [273:1-273:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(244),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(245)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,246,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(245,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [274:1-274:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(245),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(246)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,247,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(246,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [275:1-275:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(246),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(247)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,248,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(247,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [276:1-276:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(248)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,249,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(248,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [277:1-277:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(248),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(249)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,250,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(249,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [278:1-278:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(249),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(250)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,251,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(250,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [279:1-279:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(250),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(251)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,252,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(251,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [280:1-280:79])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(251),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(252)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,253,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(252,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [281:1-281:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(252),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(253)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,254,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(253,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [282:1-282:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(253),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(254)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,254,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(253,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [282:1-282:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(253),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(254)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,255,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(254,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [283:1-283:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(255)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,256,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(255,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [284:1-284:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(255),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(256)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,256,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(255,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [284:1-284:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(255),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(256)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,257,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(256,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [285:1-285:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(256),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(257)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,257,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(256,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [285:1-285:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(256),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(257)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,258,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(257,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [286:1-286:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(257),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(258)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,258,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(257,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [286:1-286:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(257),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(258)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,259,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(258,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [287:1-287:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(258),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(259)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,259,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(258,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [287:1-287:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(258),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(259)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,260,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(259,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [288:1-288:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(260)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,260,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(259,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [288:1-288:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(260)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,261,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(260,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [289:1-289:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(260),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(261)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,261,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(260,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [289:1-289:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(260),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(261)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,262,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(261,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [290:1-290:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(261),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(262)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,262,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(261,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [290:1-290:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(261),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(262)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,263,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(262,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [291:1-291:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(262),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(263)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,263,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(262,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [291:1-291:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(262),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_8_delta_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(263)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,264,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(263,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [292:1-292:64])_");
if(!(rel_7_livesIn->empty()) && !(rel_8_delta_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(263),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_delta_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_8_delta_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(264)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(livesIn(v0,v1,264,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(263,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [292:1-292:64])_");
if(!(rel_8_delta_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt,rel_8_delta_livesIn->createContext());
CREATE_OP_CONTEXT(rel_9_new_livesIn_op_ctxt,rel_9_new_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(263),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_8_delta_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_8_delta_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(264)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_9_new_livesIn->insert(tuple,READ_OP_CONTEXT(rel_9_new_livesIn_op_ctxt));
}
}
}
}
}
();}
if(rel_9_new_livesIn->empty()) break;
rel_7_livesIn->insertAll(*rel_9_new_livesIn);
std::swap(rel_8_delta_livesIn, rel_9_new_livesIn);
rel_9_new_livesIn->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_8_delta_livesIn->purge();
if (!isHintsProfilingEnabled()) rel_9_new_livesIn->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./livesIn.csv"},{"name","livesIn"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_7_livesIn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 6 */
/* BEGIN STRATUM 7 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,1,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(264,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [293:1-293:43])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(264),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,2,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(265,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [294:1-294:43])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(265),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,3,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(266,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [295:1-295:51])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(266),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,4,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(267,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [296:1-296:51])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(267),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,5,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(268,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [297:1-297:42])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,6,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(269,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [298:1-298:42])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(269),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,7,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(270,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [299:1-299:44])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(270),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,8,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(271,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [300:1-300:44])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(271),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,9,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(272,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [301:1-301:60])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(272),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,10,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(273,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [302:1-302:60])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(273),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,11,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(274,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [303:1-303:45])_");
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(274),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,12,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(275,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [304:1-304:45])_");
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(275),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,15,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(278,_,@level_num_0),
   years(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [307:1-307:58])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(278),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,16,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(279,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   years(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [308:1-308:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(279),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,17,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(280,_,@level_num_0),
   years(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [309:1-309:58])_");
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(280),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,18,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(281,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   years(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [310:1-310:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,19,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(282,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [311:1-311:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(282),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(283,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [312:1-312:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(283),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,21,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(284,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [313:1-313:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(284),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,22,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(285,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [314:1-314:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(285),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,23,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(286,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [315:1-315:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(286),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,24,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(287,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   years(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [316:1-316:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(287),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,25,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(288,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   years(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [317:1-317:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(288),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,26,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(289,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   years(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [318:1-318:58])_");
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(289),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,27,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(290,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [319:1-319:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(290),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,28,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(291,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [320:1-320:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(291),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,29,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(292,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [321:1-321:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(292),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,30,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(293,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [322:1-322:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(293),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(294,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [323:1-323:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(294),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,32,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(295,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [324:1-324:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(295),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,33,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(296,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [325:1-325:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,34,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(297,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [326:1-326:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(297),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(298,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [327:1-327:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(298),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,36,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(299,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [328:1-328:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,37,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(300,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [329:1-329:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(300),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,38,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(301,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [330:1-330:66])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(301),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,39,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(302,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [331:1-331:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(302),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,40,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(303,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [332:1-332:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(303),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,41,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(304,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [333:1-333:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,42,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(305,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [334:1-334:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(305),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,43,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(306,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [335:1-335:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(306),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,44,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(307,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [336:1-336:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,45,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(308,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [337:1-337:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(308),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,46,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(309,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [338:1-338:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(309),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,47,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(310,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [339:1-339:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(310),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,48,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(311,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [340:1-340:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(311),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,49,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(312,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [341:1-341:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(312),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,50,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(313,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [342:1-342:57])_");
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(313),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,51,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(314,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [343:1-343:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(314),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(51)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,52,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(315,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [344:1-344:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(315),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(52)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,53,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(316,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [345:1-345:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(316),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(53)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,54,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(317,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [346:1-346:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(317),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(54)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,55,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(318,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [347:1-347:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(318),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(55)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,56,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(319,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [348:1-348:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(319),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,57,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(320,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [349:1-349:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(320),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(57)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,58,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(321,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [350:1-350:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(321),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,59,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(322,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [351:1-351:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(322),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,60,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(323,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [352:1-352:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(323),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,61,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(324,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [353:1-353:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(324),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(61)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,62,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(325,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [354:1-354:59])_");
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(325),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,63,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(326,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [355:1-355:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(326),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(63)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,64,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(327,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [356:1-356:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(327),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(64)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,65,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(328,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [357:1-357:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(328),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(65)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,66,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(329,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [358:1-358:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(329),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(66)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,67,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(330,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [359:1-359:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(330),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(67)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,68,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(331,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [360:1-360:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(331),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,69,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(332,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [361:1-361:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(69)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(333,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [362:1-362:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(333),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,71,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(334,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [363:1-363:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(334),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(71)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,72,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(335,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [364:1-364:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(335),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(72)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,73,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(336,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [365:1-365:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(336),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(73)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,74,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(337,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [366:1-366:75])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(337),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(74)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,75,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(338,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [367:1-367:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(338),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(75)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,76,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(339,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [368:1-368:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(339),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,77,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(340,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [369:1-369:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(340),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,78,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(341,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [370:1-370:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(341),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,79,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(342,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [371:1-371:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(79)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,80,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(343,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [372:1-372:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(343),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(80)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,81,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(344,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [373:1-373:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(344),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(81)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,82,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(345,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [374:1-374:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(345),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(82)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,83,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(346,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [375:1-375:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(346),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,84,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(347,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [376:1-376:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(347),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(84)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,85,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(348,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [377:1-377:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(348),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(349,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [378:1-378:60])_");
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(349),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,99,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(362,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [391:1-391:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(362),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(363,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   yearOfRelease(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [392:1-392:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(363),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,101,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(364,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [393:1-393:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(364),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(101)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,102,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(365,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   yearOfRelease(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [394:1-394:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(365),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(102)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,103,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(366,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [395:1-395:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(366),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,104,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(367,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [396:1-396:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(367),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(104)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,105,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(368,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [397:1-397:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(368),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(105)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,106,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(369,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [398:1-398:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(369),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(106)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,107,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(370,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [399:1-399:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(370),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,108,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(371,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   yearOfRelease(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [400:1-400:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(371),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,109,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(372,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   yearOfRelease(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [401:1-401:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(372),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(109)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,110,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(373,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   yearOfRelease(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [402:1-402:74])_");
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(373),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,111,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(374,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [403:1-403:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(374),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(111)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,112,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(375,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [404:1-404:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(375),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(112)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,113,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(376,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [405:1-405:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(376),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(113)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,114,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(377,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [406:1-406:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(377),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(114)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,115,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(378,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [407:1-407:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(378),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(115)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,116,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(379,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [408:1-408:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(379),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(116)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,117,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(380,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [409:1-409:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(380),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,118,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(381,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [410:1-410:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(381),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,119,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(382,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [411:1-411:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(382),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(119)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,120,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(383,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [412:1-412:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(383),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(120)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,121,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(384,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [413:1-413:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(384),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(121)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,122,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(385,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [414:1-414:65])_");
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,123,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(386,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [415:1-415:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(386),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(123)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,124,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(387,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [416:1-416:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(387),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(124)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,125,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(388,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [417:1-417:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(388),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(125)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,126,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(389,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [418:1-418:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(389),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(126)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,127,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(390,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [419:1-419:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(390),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(127)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,128,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(391,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [420:1-420:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(391),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(128)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,129,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(392,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [421:1-421:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(392),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,130,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(393,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [422:1-422:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(393),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,131,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(394,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [423:1-423:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(131)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,132,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(395,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [424:1-424:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(395),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(132)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,133,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(396,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [425:1-425:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(396),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(133)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,134,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(397,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [426:1-426:67])_");
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(397),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(134)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,135,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(398,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [427:1-427:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(398),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(135)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(399,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [428:1-428:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,137,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(400,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [429:1-429:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(400),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,138,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(401,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [430:1-430:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(401),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,139,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(402,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [431:1-431:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(402),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(139)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,140,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(403,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [432:1-432:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(403),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(140)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,141,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(404,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [433:1-433:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(404),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,142,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(405,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [434:1-434:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(405),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(142)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,143,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(406,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [435:1-435:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(406),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(143)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,144,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(407,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [436:1-436:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(407),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,145,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(408,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [437:1-437:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(408),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(145)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,146,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(409,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [438:1-438:83])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(409),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,147,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(410,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [439:1-439:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(410),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(147)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,148,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(411,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [440:1-440:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(411),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(148)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,149,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(412,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [441:1-441:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(412),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(149)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,150,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(413,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [442:1-442:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(413),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(150)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,151,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(414,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [443:1-443:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(414),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(151)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,152,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(415,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [444:1-444:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(415),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(152)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,153,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(416,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [445:1-445:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(416),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(153)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,154,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(417,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [446:1-446:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(417),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(154)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,155,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(418,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [447:1-447:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(418),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(155)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,156,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(419,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [448:1-448:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(419),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(156)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,157,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(420,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [449:1-449:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(157)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,158,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(421,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [450:1-450:68])_");
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(421),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(158)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,171,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(434,_,@level_num_0),
   year(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [463:1-463:56])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(434),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(171)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,172,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(435,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   year(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [464:1-464:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(435),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(172)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,173,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(436,_,@level_num_0),
   year(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [465:1-465:56])_");
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(436),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(173)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,174,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(437,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   year(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [466:1-466:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(437),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(174)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,175,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(438,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [467:1-467:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(438),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(175)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,176,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(439,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [468:1-468:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(439),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(176)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,177,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(440,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [469:1-469:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(440),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(177)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,178,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(441,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [470:1-470:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(441),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(178)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,179,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(442,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [471:1-471:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(442),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(179)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,180,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(443,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   year(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [472:1-472:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(443),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(180)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,181,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(444,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   year(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [473:1-473:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(444),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(181)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,182,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(445,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   year(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [474:1-474:56])_");
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(445),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(182)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,183,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(446,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [475:1-475:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(446),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(183)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,184,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(447,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [476:1-476:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(447),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(184)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,185,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(448,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [477:1-477:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(448),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(185)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,186,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(449,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [478:1-478:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(449),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(186)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,187,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(450,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [479:1-479:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(450),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(187)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,188,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(451,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [480:1-480:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(451),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(188)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,189,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(452,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [481:1-481:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(452),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(189)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,190,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(453,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [482:1-482:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(453),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(190)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,191,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(454,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [483:1-483:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(454),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(191)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,192,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(455,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [484:1-484:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(455),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(192)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,193,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(456,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [485:1-485:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(456),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(193)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,194,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(457,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [486:1-486:58])_");
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(457),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(194)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,195,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(458,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [487:1-487:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(458),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(195)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,196,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(459,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [488:1-488:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(459),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(196)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,197,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(460,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [489:1-489:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(460),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(197)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,198,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(461,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [490:1-490:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(461),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(198)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,199,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(462,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [491:1-491:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(462),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(199)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,200,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(463,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [492:1-492:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(463),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(200)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,201,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(464,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [493:1-493:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(464),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(201)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,202,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(465,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [494:1-494:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(465),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(202)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,203,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(466,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [495:1-495:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(466),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(203)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,204,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(467,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [496:1-496:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(467),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(204)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,205,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(468,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [497:1-497:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(468),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(205)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,206,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(469,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [498:1-498:74])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(469),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(206)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,207,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(470,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [499:1-499:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(470),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(207)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,208,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(471,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [500:1-500:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(471),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(208)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,209,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(472,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [501:1-501:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(472),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(209)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,210,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(473,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [502:1-502:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(473),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(210)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,211,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(474,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [503:1-503:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(474),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(211)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,212,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(475,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [504:1-504:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(475),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(212)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,213,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(476,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [505:1-505:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(476),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(213)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,214,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(477,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [506:1-506:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(477),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(214)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,215,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(478,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [507:1-507:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(478),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(215)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,216,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(479,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [508:1-508:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(479),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(216)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,217,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(480,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [509:1-509:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(480),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(217)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,218,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(481,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [510:1-510:59])_");
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(481),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(218)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,231,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(494,_,@level_num_0),
   writer(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [523:1-523:60])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(494),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(231)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,232,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(495,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   writer(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [524:1-524:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(495),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(232)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,233,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(496,_,@level_num_0),
   writer(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [525:1-525:60])_");
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(496),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(233)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,234,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(497,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   writer(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [526:1-526:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(497),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(234)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,235,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(498,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [527:1-527:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(498),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(235)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,236,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(499,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [528:1-528:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(499),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(236)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,237,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(500,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [529:1-529:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(500),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(237)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,238,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(501,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [530:1-530:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(501),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(238)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,239,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(502,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [531:1-531:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(502),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(239)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,240,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(503,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   writer(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [532:1-532:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(503),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(240)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,241,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(504,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   writer(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [533:1-533:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(504),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(241)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,242,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(505,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   writer(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [534:1-534:60])_");
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(505),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(242)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,243,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(506,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [535:1-535:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(506),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(243)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,244,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(507,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [536:1-536:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(507),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(244)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,245,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(508,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [537:1-537:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(508),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(245)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,246,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(509,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [538:1-538:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(509),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(246)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,247,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(510,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [539:1-539:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(510),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(247)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,248,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(511,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [540:1-540:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(511),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(248)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,249,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(512,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [541:1-541:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(512),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(249)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,250,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(513,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [542:1-542:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(513),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(250)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,251,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(514,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [543:1-543:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(251)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,252,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(515,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [544:1-544:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(515),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(252)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,253,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(516,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [545:1-545:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(516),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(253)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,254,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(517,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [546:1-546:76])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(517),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(254)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,255,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(518,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [547:1-547:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(518),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(255)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,256,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(519,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [548:1-548:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(519),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(256)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,257,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(520,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [549:1-549:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(520),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(257)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,258,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(521,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [550:1-550:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(521),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(258)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,259,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(522,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [551:1-551:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(522),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(259)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,260,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(523,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [552:1-552:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(523),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(260)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,261,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(524,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [553:1-553:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(524),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(261)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,262,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(525,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [554:1-554:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(262)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,263,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(526,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [555:1-555:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(526),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(263)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,264,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(527,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [556:1-556:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(264)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,265,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(528,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [557:1-557:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(528),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(265)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,266,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(529,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [558:1-558:61])_");
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(529),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(266)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,279,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(542,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [571:1-571:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(542),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(279)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,280,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(543,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   wikisourcelangProperty(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [572:1-572:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(543),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(280)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,281,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(544,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [573:1-573:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(281)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,282,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(545,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   wikisourcelangProperty(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [574:1-574:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(545),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(282)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,283,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(546,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [575:1-575:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(283)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,284,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(547,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [576:1-576:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(547),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(284)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,285,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(548,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [577:1-577:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(548),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(285)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,286,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(549,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [578:1-578:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(286)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,287,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(550,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [579:1-579:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(550),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(287)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,288,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(551,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   wikisourcelangProperty(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [580:1-580:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(551),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(288)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,289,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(552,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   wikisourcelangProperty(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [581:1-581:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(552),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(289)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,290,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(553,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   wikisourcelangProperty(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [582:1-582:92])_");
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(553),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(290)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,291,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(554,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [583:1-583:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(554),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(291)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,292,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(555,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [584:1-584:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(292)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,293,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(556,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [585:1-585:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(556),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(293)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,294,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(557,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [586:1-586:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(294)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,295,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(558,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [587:1-587:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(558),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(295)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,296,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(559,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [588:1-588:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(559),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(296)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,297,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(560,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [589:1-589:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(297)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,298,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(561,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [590:1-590:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(561),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(298)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,299,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(562,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [591:1-591:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(562),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(299)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,300,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(563,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [592:1-592:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(300)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,301,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(564,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [593:1-593:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(301)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,302,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(565,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [594:1-594:77])_");
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(565),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(302)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,315,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(578,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [607:1-607:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(578),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(315)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,316,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(579,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1),
   livesIn(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [608:1-608:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(316)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,317,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(580,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [609:1-609:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(580),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(317)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,318,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(581,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1),
   livesIn(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [610:1-610:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(581),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(318)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,319,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(582,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [611:1-611:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(582),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(319)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,320,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(583,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [612:1-612:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(583),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(320)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,321,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(584,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [613:1-613:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(584),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(321)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,322,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(585,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [614:1-614:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(585),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(322)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,323,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(586,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [615:1-615:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(586),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(323)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,324,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(587,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   livesIn(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [616:1-616:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(587),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(324)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,325,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(588,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   livesIn(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [617:1-617:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(588),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(325)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,326,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(589,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   livesIn(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [618:1-618:62])_");
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(589),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(326)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_10_inv_0->insert(tuple,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
}
}
}
}
();}
rel_11_delta_inv_0->insertAll(*rel_10_inv_0);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,13,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(276,_,@level_num_0),
   inv_0(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [305:1-305:43])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(276),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,14,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(277,_,@level_num_0),
   inv_0(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [306:1-306:43])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(277),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,87,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(350,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [379:1-379:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(350),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(87)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,88,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(351,_,@level_num_0),
   years(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [380:1-380:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(351),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(88)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,89,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(352,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [381:1-381:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(352),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,90,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(353,_,@level_num_0),
   years(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [382:1-382:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(353),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(90)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,91,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(354,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [383:1-383:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(354),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,92,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(355,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [384:1-384:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,93,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(356,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [385:1-385:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(356),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(93)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,94,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(357,_,@level_num_0),
   years(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [386:1-386:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(94)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,95,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(358,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [387:1-387:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(358),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(95)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,96,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(359,_,@level_num_0),
   years(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [388:1-388:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(359),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(96)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,97,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(360,_,@level_num_0),
   years(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [389:1-389:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(360),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(97)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,98,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(361,_,@level_num_0),
   years(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [390:1-390:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(361),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_years) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,159,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(422,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [451:1-451:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(422),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(159)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,160,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(423,_,@level_num_0),
   yearOfRelease(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [452:1-452:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(423),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(160)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,161,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(424,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [453:1-453:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(424),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(161)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,162,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(425,_,@level_num_0),
   yearOfRelease(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [454:1-454:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(425),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(162)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,163,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(426,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [455:1-455:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(426),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(163)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,164,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(427,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [456:1-456:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(427),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(164)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,165,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(428,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [457:1-457:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(428),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(165)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,166,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(429,_,@level_num_0),
   yearOfRelease(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [458:1-458:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(429),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(166)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,167,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(430,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [459:1-459:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(430),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(167)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,168,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(431,_,@level_num_0),
   yearOfRelease(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [460:1-460:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(431),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(168)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,169,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(432,_,@level_num_0),
   yearOfRelease(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [461:1-461:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(432),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(169)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,170,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(433,_,@level_num_0),
   yearOfRelease(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [462:1-462:66])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(433),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_5_yearOfRelease) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(170)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,219,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(482,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [511:1-511:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(482),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(219)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,220,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(483,_,@level_num_0),
   year(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [512:1-512:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(483),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(220)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,221,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(484,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [513:1-513:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(484),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(221)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,222,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(485,_,@level_num_0),
   year(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [514:1-514:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(485),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(222)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,223,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(486,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [515:1-515:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(486),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(223)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,224,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(487,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [516:1-516:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(487),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(224)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,225,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(488,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [517:1-517:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(488),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(225)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,226,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(489,_,@level_num_0),
   year(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [518:1-518:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(489),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(226)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,227,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(490,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [519:1-519:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(490),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(227)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,228,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(491,_,@level_num_0),
   year(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [520:1-520:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(491),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(228)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,229,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(492,_,@level_num_0),
   year(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [521:1-521:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(492),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(229)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,230,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(493,_,@level_num_0),
   year(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [522:1-522:57])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(493),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_year) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(230)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,267,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(530,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [559:1-559:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(530),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(267)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,268,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(531,_,@level_num_0),
   writer(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [560:1-560:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(531),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(268)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,269,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(532,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [561:1-561:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(532),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(269)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,270,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(533,_,@level_num_0),
   writer(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [562:1-562:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(533),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(270)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,271,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(534,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [563:1-563:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(534),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(271)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,272,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(535,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [564:1-564:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(535),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(272)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,273,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(536,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [565:1-565:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(536),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(273)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,274,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(537,_,@level_num_0),
   writer(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [566:1-566:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(537),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(274)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,275,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(538,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [567:1-567:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(538),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(275)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,276,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(539,_,@level_num_0),
   writer(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [568:1-568:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(539),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(276)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,277,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(540,_,@level_num_0),
   writer(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [569:1-569:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(540),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(277)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,278,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(541,_,@level_num_0),
   writer(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [570:1-570:59])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(541),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_writer) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(278)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,303,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(566,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [595:1-595:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(566),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(303)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,304,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(567,_,@level_num_0),
   wikisourcelangProperty(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [596:1-596:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(567),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(304)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,305,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(568,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [597:1-597:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(568),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(305)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,306,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(569,_,@level_num_0),
   wikisourcelangProperty(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [598:1-598:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(306)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,307,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(570,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [599:1-599:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(570),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(307)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,308,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(571,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [600:1-600:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(571),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(308)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,309,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(572,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [601:1-601:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(572),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(309)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,310,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(573,_,@level_num_0),
   wikisourcelangProperty(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [602:1-602:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(573),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(310)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,311,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(574,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [603:1-603:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(311)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,312,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(575,_,@level_num_0),
   wikisourcelangProperty(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [604:1-604:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(575),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(312)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,313,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(576,_,@level_num_0),
   wikisourcelangProperty(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [605:1-605:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(576),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(313)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,314,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(577,_,@level_num_0),
   wikisourcelangProperty(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [606:1-606:75])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_wikisourcelangProperty) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(314)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,327,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(590,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [619:1-619:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(590),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(327)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,328,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(591,_,@level_num_0),
   livesIn(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [620:1-620:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(591),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(328)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,329,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(592,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [621:1-621:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(592),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(329)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,330,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(593,_,@level_num_0),
   livesIn(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [622:1-622:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(593),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(330)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,331,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(594,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [623:1-623:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(594),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(331)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,332,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(595,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [624:1-624:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(595),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(332)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,333,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(596,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [625:1-625:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(596),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(333)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,334,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(597,_,@level_num_0),
   livesIn(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [626:1-626:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(597),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(334)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,335,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(598,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [627:1-627:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(598),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(335)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,336,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(599,_,@level_num_0),
   livesIn(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [628:1-628:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(599),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(336)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,337,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(600,_,@level_num_0),
   livesIn(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [629:1-629:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(600),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(337)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,338,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(601,_,@level_num_0),
   livesIn(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [630:1-630:60])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(601),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_livesIn) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(338)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,339,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(602,_,@level_num_0),
   inv_0(v0,v1,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [631:1-631:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(602),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(339)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,340,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(603,_,@level_num_0),
   inv_0(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [632:1-632:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(603),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(340)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,340,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(603,_,@level_num_0),
   inv_0(v0,v1,_,@level_num_1),
   inv_0(v1,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [632:1-632:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(603),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(340)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,341,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(604,_,@level_num_0),
   inv_0(v1,v0,_,@level_num_1).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [633:1-633:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(604),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(341)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,342,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(605,_,@level_num_0),
   inv_0(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [634:1-634:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(605),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(342)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,342,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(605,_,@level_num_0),
   inv_0(v1,v0,_,@level_num_1),
   inv_0(v0,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [634:1-634:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(605),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(342)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,343,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(606,_,@level_num_0),
   inv_0(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [635:1-635:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(606),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(343)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,343,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(606,_,@level_num_0),
   inv_0(v2,v1,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [635:1-635:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(606),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(343)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,344,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(607,_,@level_num_0),
   inv_0(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [636:1-636:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(607),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(344)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,344,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(607,_,@level_num_0),
   inv_0(v1,v2,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [636:1-636:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(607),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(344)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,345,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(608,_,@level_num_0),
   inv_0(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [637:1-637:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(345)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,345,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(608,_,@level_num_0),
   inv_0(v2,v0,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [637:1-637:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(345)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,346,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(609,_,@level_num_0),
   inv_0(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [638:1-638:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(609),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(346)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,346,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(609,_,@level_num_0),
   inv_0(v2,v0,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [638:1-638:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(609),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(346)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,347,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(610,_,@level_num_0),
   inv_0(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [639:1-639:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(610),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(347)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,347,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(610,_,@level_num_0),
   inv_0(v0,v2,_,@level_num_1),
   inv_0(v1,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [639:1-639:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(610),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(347)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,348,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(611,_,@level_num_0),
   inv_0(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [640:1-640:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(611),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(348)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,348,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(611,_,@level_num_0),
   inv_0(v0,v2,_,@level_num_1),
   inv_0(v2,v1,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [640:1-640:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(611),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(348)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,349,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(612,_,@level_num_0),
   inv_0(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [641:1-641:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(612),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(349)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,349,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(612,_,@level_num_0),
   inv_0(v2,v1,_,@level_num_1),
   inv_0(v2,v0,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [641:1-641:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(612),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_delta_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(349)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,350,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(613,_,@level_num_0),
   inv_0(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [642:1-642:58])_");
if(!(rel_10_inv_0->empty()) && !(rel_11_delta_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(613),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_11_delta_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_11_delta_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt)).empty()) && !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(350)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
SignalHandler::instance()->setMsg(R"_(inv_0(v0,v1,350,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(613,_,@level_num_0),
   inv_0(v1,v2,_,@level_num_1),
   inv_0(v0,v2,_,@level_num_2).
in file /home/johannes/test/popl2020-artifact/prosynth/kg/rules.dl [642:1-642:58])_");
if(!(rel_11_delta_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt,rel_11_delta_inv_0->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
CREATE_OP_CONTEXT(rel_12_new_inv_0_op_ctxt,rel_12_new_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(613),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_10_inv_0) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_delta_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_11_delta_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(350)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_12_new_inv_0->insert(tuple,READ_OP_CONTEXT(rel_12_new_inv_0_op_ctxt));
}
}
}
}
}
();}
if(rel_12_new_inv_0->empty()) break;
rel_10_inv_0->insertAll(*rel_12_new_inv_0);
std::swap(rel_11_delta_inv_0, rel_12_new_inv_0);
rel_12_new_inv_0->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_11_delta_inv_0->purge();
if (!isHintsProfilingEnabled()) rel_12_new_inv_0->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./inv_0.csv"},{"name","inv_0"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_inv_0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 7 */
/* BEGIN STRATUM 8 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.1(1,"v0,v1","Rule","years,v0,v1","inv_0(v0,v1) :- 
   Rule(264),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_13_inv_0_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(3));
}();
/* END STRATUM 8 */
/* BEGIN STRATUM 9 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.10(10,"v0,v1","Rule","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(273),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_14_inv_0_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(21));
}();
/* END STRATUM 9 */
/* BEGIN STRATUM 10 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.100(100,"v0,v1","Rule","yearOfRelease,v0,v1","yearOfRelease,v1,v0","inv_0(v0,v1) :- 
   Rule(363),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_15_inv_0_info_100->insert(RamDomain(100),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(8),RamDomain(143));
}();
/* END STRATUM 10 */
/* BEGIN STRATUM 11 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.101(101,"v0,v1","Rule","yearOfRelease,v1,v0","inv_0(v0,v1) :- 
   Rule(364),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_16_inv_0_info_101->insert(RamDomain(101),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(144));
}();
/* END STRATUM 11 */
/* BEGIN STRATUM 12 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.102(102,"v0,v1","Rule","yearOfRelease,v1,v0","yearOfRelease,v0,v1","inv_0(v0,v1) :- 
   Rule(365),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_17_inv_0_info_102->insert(RamDomain(102),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(6),RamDomain(145));
}();
/* END STRATUM 12 */
/* BEGIN STRATUM 13 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.103(103,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v0,v2","inv_0(v0,v1) :- 
   Rule(366),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_18_inv_0_info_103->insert(RamDomain(103),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(50),RamDomain(146));
}();
/* END STRATUM 13 */
/* BEGIN STRATUM 14 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.104(104,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v2,v0","inv_0(v0,v1) :- 
   Rule(367),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_19_inv_0_info_104->insert(RamDomain(104),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(52),RamDomain(147));
}();
/* END STRATUM 14 */
/* BEGIN STRATUM 15 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.105(105,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v1,v2","inv_0(v0,v1) :- 
   Rule(368),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_20_inv_0_info_105->insert(RamDomain(105),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(54),RamDomain(148));
}();
/* END STRATUM 15 */
/* BEGIN STRATUM 16 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.106(106,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v2,v1","inv_0(v0,v1) :- 
   Rule(369),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_21_inv_0_info_106->insert(RamDomain(106),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(56),RamDomain(149));
}();
/* END STRATUM 16 */
/* BEGIN STRATUM 17 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.107(107,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v1,v2","inv_0(v0,v1) :- 
   Rule(370),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_22_inv_0_info_107->insert(RamDomain(107),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(54),RamDomain(150));
}();
/* END STRATUM 17 */
/* BEGIN STRATUM 18 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.108(108,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v2,v1","inv_0(v0,v1) :- 
   Rule(371),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_23_inv_0_info_108->insert(RamDomain(108),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(56),RamDomain(151));
}();
/* END STRATUM 18 */
/* BEGIN STRATUM 19 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.109(109,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v2,v0","inv_0(v0,v1) :- 
   Rule(372),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_24_inv_0_info_109->insert(RamDomain(109),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(52),RamDomain(152));
}();
/* END STRATUM 19 */
/* BEGIN STRATUM 20 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.11(11,"v0,v1","Rule","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(274),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_25_inv_0_info_11->insert(RamDomain(11),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(23));
}();
/* END STRATUM 20 */
/* BEGIN STRATUM 21 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.110(110,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v0,v2","inv_0(v0,v1) :- 
   Rule(373),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_26_inv_0_info_110->insert(RamDomain(110),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(50),RamDomain(153));
}();
/* END STRATUM 21 */
/* BEGIN STRATUM 22 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.111(111,"v0,v1","Rule","yearOfRelease,v0,v1","year,v0,v1","inv_0(v0,v1) :- 
   Rule(374),
   yearOfRelease(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_27_inv_0_info_111->insert(RamDomain(111),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(10),RamDomain(154));
}();
/* END STRATUM 22 */
/* BEGIN STRATUM 23 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.112(112,"v0,v1","Rule","yearOfRelease,v0,v1","year,v1,v0","inv_0(v0,v1) :- 
   Rule(375),
   yearOfRelease(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_28_inv_0_info_112->insert(RamDomain(112),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(155));
}();
/* END STRATUM 23 */
/* BEGIN STRATUM 24 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.113(113,"v0,v1","Rule","yearOfRelease,v1,v0","year,v1,v0","inv_0(v0,v1) :- 
   Rule(376),
   yearOfRelease(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_29_inv_0_info_113->insert(RamDomain(113),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(12),RamDomain(156));
}();
/* END STRATUM 24 */
/* BEGIN STRATUM 25 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.114(114,"v0,v1","Rule","yearOfRelease,v1,v0","year,v0,v1","inv_0(v0,v1) :- 
   Rule(377),
   yearOfRelease(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_30_inv_0_info_114->insert(RamDomain(114),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(10),RamDomain(157));
}();
/* END STRATUM 25 */
/* BEGIN STRATUM 26 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.115(115,"v0,v1","Rule","yearOfRelease,v2,v1","year,v0,v2","inv_0(v0,v1) :- 
   Rule(378),
   yearOfRelease(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_31_inv_0_info_115->insert(RamDomain(115),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(66),RamDomain(158));
}();
/* END STRATUM 26 */
/* BEGIN STRATUM 27 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.116(116,"v0,v1","Rule","yearOfRelease,v1,v2","year,v2,v0","inv_0(v0,v1) :- 
   Rule(379),
   yearOfRelease(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_32_inv_0_info_116->insert(RamDomain(116),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(68),RamDomain(159));
}();
/* END STRATUM 27 */
/* BEGIN STRATUM 28 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.117(117,"v0,v1","Rule","yearOfRelease,v2,v0","year,v1,v2","inv_0(v0,v1) :- 
   Rule(380),
   yearOfRelease(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_33_inv_0_info_117->insert(RamDomain(117),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(70),RamDomain(160));
}();
/* END STRATUM 28 */
/* BEGIN STRATUM 29 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.118(118,"v0,v1","Rule","yearOfRelease,v2,v0","year,v2,v1","inv_0(v0,v1) :- 
   Rule(381),
   yearOfRelease(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_34_inv_0_info_118->insert(RamDomain(118),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(72),RamDomain(161));
}();
/* END STRATUM 29 */
/* BEGIN STRATUM 30 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.119(119,"v0,v1","Rule","yearOfRelease,v0,v2","year,v1,v2","inv_0(v0,v1) :- 
   Rule(382),
   yearOfRelease(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_35_inv_0_info_119->insert(RamDomain(119),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(70),RamDomain(162));
}();
/* END STRATUM 30 */
/* BEGIN STRATUM 31 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.12(12,"v0,v1","Rule","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(275),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_36_inv_0_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(25));
}();
/* END STRATUM 31 */
/* BEGIN STRATUM 32 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.120(120,"v0,v1","Rule","yearOfRelease,v0,v2","year,v2,v1","inv_0(v0,v1) :- 
   Rule(383),
   yearOfRelease(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_37_inv_0_info_120->insert(RamDomain(120),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(72),RamDomain(163));
}();
/* END STRATUM 32 */
/* BEGIN STRATUM 33 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.121(121,"v0,v1","Rule","yearOfRelease,v2,v1","year,v2,v0","inv_0(v0,v1) :- 
   Rule(384),
   yearOfRelease(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_38_inv_0_info_121->insert(RamDomain(121),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(68),RamDomain(164));
}();
/* END STRATUM 33 */
/* BEGIN STRATUM 34 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.122(122,"v0,v1","Rule","yearOfRelease,v1,v2","year,v0,v2","inv_0(v0,v1) :- 
   Rule(385),
   yearOfRelease(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_39_inv_0_info_122->insert(RamDomain(122),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(66),RamDomain(165));
}();
/* END STRATUM 34 */
/* BEGIN STRATUM 35 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.123(123,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(386),
   yearOfRelease(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_40_inv_0_info_123->insert(RamDomain(123),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(14),RamDomain(166));
}();
/* END STRATUM 35 */
/* BEGIN STRATUM 36 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.124(124,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(387),
   yearOfRelease(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_41_inv_0_info_124->insert(RamDomain(124),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(16),RamDomain(167));
}();
/* END STRATUM 36 */
/* BEGIN STRATUM 37 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.125(125,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(388),
   yearOfRelease(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_42_inv_0_info_125->insert(RamDomain(125),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(16),RamDomain(168));
}();
/* END STRATUM 37 */
/* BEGIN STRATUM 38 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.126(126,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(389),
   yearOfRelease(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_43_inv_0_info_126->insert(RamDomain(126),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(14),RamDomain(169));
}();
/* END STRATUM 38 */
/* BEGIN STRATUM 39 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.127(127,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(390),
   yearOfRelease(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_44_inv_0_info_127->insert(RamDomain(127),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(82),RamDomain(170));
}();
/* END STRATUM 39 */
/* BEGIN STRATUM 40 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.128(128,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(391),
   yearOfRelease(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_45_inv_0_info_128->insert(RamDomain(128),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(84),RamDomain(171));
}();
/* END STRATUM 40 */
/* BEGIN STRATUM 41 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.129(129,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(392),
   yearOfRelease(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_46_inv_0_info_129->insert(RamDomain(129),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(86),RamDomain(172));
}();
/* END STRATUM 41 */
/* BEGIN STRATUM 42 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.13(13,"v0,v1","Rule","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(276),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_47_inv_0_info_13->insert(RamDomain(13),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(27));
}();
/* END STRATUM 42 */
/* BEGIN STRATUM 43 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.130(130,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(393),
   yearOfRelease(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_48_inv_0_info_130->insert(RamDomain(130),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(88),RamDomain(173));
}();
/* END STRATUM 43 */
/* BEGIN STRATUM 44 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.131(131,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(394),
   yearOfRelease(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_49_inv_0_info_131->insert(RamDomain(131),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(86),RamDomain(174));
}();
/* END STRATUM 44 */
/* BEGIN STRATUM 45 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.132(132,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(395),
   yearOfRelease(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_50_inv_0_info_132->insert(RamDomain(132),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(88),RamDomain(175));
}();
/* END STRATUM 45 */
/* BEGIN STRATUM 46 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.133(133,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(396),
   yearOfRelease(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_51_inv_0_info_133->insert(RamDomain(133),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(84),RamDomain(176));
}();
/* END STRATUM 46 */
/* BEGIN STRATUM 47 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.134(134,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(397),
   yearOfRelease(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_52_inv_0_info_134->insert(RamDomain(134),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(82),RamDomain(177));
}();
/* END STRATUM 47 */
/* BEGIN STRATUM 48 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.135(135,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(398),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_53_inv_0_info_135->insert(RamDomain(135),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(18),RamDomain(178));
}();
/* END STRATUM 48 */
/* BEGIN STRATUM 49 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.136(136,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(399),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_54_inv_0_info_136->insert(RamDomain(136),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(20),RamDomain(179));
}();
/* END STRATUM 49 */
/* BEGIN STRATUM 50 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.137(137,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(400),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_55_inv_0_info_137->insert(RamDomain(137),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(20),RamDomain(180));
}();
/* END STRATUM 50 */
/* BEGIN STRATUM 51 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.138(138,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(401),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_56_inv_0_info_138->insert(RamDomain(138),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(18),RamDomain(181));
}();
/* END STRATUM 51 */
/* BEGIN STRATUM 52 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.139(139,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(402),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_57_inv_0_info_139->insert(RamDomain(139),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(98),RamDomain(182));
}();
/* END STRATUM 52 */
/* BEGIN STRATUM 53 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.14(14,"v0,v1","Rule","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(277),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_58_inv_0_info_14->insert(RamDomain(14),RamDomain(0),RamDomain(1),RamDomain(28),RamDomain(29));
}();
/* END STRATUM 53 */
/* BEGIN STRATUM 54 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.140(140,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(403),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_59_inv_0_info_140->insert(RamDomain(140),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(100),RamDomain(183));
}();
/* END STRATUM 54 */
/* BEGIN STRATUM 55 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.141(141,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(404),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_60_inv_0_info_141->insert(RamDomain(141),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(102),RamDomain(184));
}();
/* END STRATUM 55 */
/* BEGIN STRATUM 56 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.142(142,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(405),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_61_inv_0_info_142->insert(RamDomain(142),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(104),RamDomain(185));
}();
/* END STRATUM 56 */
/* BEGIN STRATUM 57 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.143(143,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(406),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_62_inv_0_info_143->insert(RamDomain(143),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(102),RamDomain(186));
}();
/* END STRATUM 57 */
/* BEGIN STRATUM 58 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.144(144,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(407),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_63_inv_0_info_144->insert(RamDomain(144),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(104),RamDomain(187));
}();
/* END STRATUM 58 */
/* BEGIN STRATUM 59 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.145(145,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(408),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_64_inv_0_info_145->insert(RamDomain(145),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(100),RamDomain(188));
}();
/* END STRATUM 59 */
/* BEGIN STRATUM 60 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.146(146,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(409),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_65_inv_0_info_146->insert(RamDomain(146),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(98),RamDomain(189));
}();
/* END STRATUM 60 */
/* BEGIN STRATUM 61 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.147(147,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(410),
   yearOfRelease(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_66_inv_0_info_147->insert(RamDomain(147),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(22),RamDomain(190));
}();
/* END STRATUM 61 */
/* BEGIN STRATUM 62 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.148(148,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(411),
   yearOfRelease(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_67_inv_0_info_148->insert(RamDomain(148),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(24),RamDomain(191));
}();
/* END STRATUM 62 */
/* BEGIN STRATUM 63 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.149(149,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(412),
   yearOfRelease(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_68_inv_0_info_149->insert(RamDomain(149),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(24),RamDomain(192));
}();
/* END STRATUM 63 */
/* BEGIN STRATUM 64 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.15(15,"v0,v1","Rule","years,v0,v1","inv_0(v0,v1) :- 
   Rule(278),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_69_inv_0_info_15->insert(RamDomain(15),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(30));
}();
/* END STRATUM 64 */
/* BEGIN STRATUM 65 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.150(150,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(413),
   yearOfRelease(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_70_inv_0_info_150->insert(RamDomain(150),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(22),RamDomain(193));
}();
/* END STRATUM 65 */
/* BEGIN STRATUM 66 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.151(151,"v0,v1","Rule","yearOfRelease,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(414),
   yearOfRelease(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_71_inv_0_info_151->insert(RamDomain(151),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(114),RamDomain(194));
}();
/* END STRATUM 66 */
/* BEGIN STRATUM 67 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.152(152,"v0,v1","Rule","yearOfRelease,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(415),
   yearOfRelease(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_72_inv_0_info_152->insert(RamDomain(152),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(116),RamDomain(195));
}();
/* END STRATUM 67 */
/* BEGIN STRATUM 68 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.153(153,"v0,v1","Rule","yearOfRelease,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(416),
   yearOfRelease(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_73_inv_0_info_153->insert(RamDomain(153),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(118),RamDomain(196));
}();
/* END STRATUM 68 */
/* BEGIN STRATUM 69 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.154(154,"v0,v1","Rule","yearOfRelease,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(417),
   yearOfRelease(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_74_inv_0_info_154->insert(RamDomain(154),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(120),RamDomain(197));
}();
/* END STRATUM 69 */
/* BEGIN STRATUM 70 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.155(155,"v0,v1","Rule","yearOfRelease,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(418),
   yearOfRelease(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_75_inv_0_info_155->insert(RamDomain(155),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(118),RamDomain(198));
}();
/* END STRATUM 70 */
/* BEGIN STRATUM 71 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.156(156,"v0,v1","Rule","yearOfRelease,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(419),
   yearOfRelease(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_76_inv_0_info_156->insert(RamDomain(156),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(120),RamDomain(199));
}();
/* END STRATUM 71 */
/* BEGIN STRATUM 72 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.157(157,"v0,v1","Rule","yearOfRelease,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(420),
   yearOfRelease(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_77_inv_0_info_157->insert(RamDomain(157),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(116),RamDomain(200));
}();
/* END STRATUM 72 */
/* BEGIN STRATUM 73 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.158(158,"v0,v1","Rule","yearOfRelease,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(421),
   yearOfRelease(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_78_inv_0_info_158->insert(RamDomain(158),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(114),RamDomain(201));
}();
/* END STRATUM 73 */
/* BEGIN STRATUM 74 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.159(159,"v0,v1","Rule","yearOfRelease,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(422),
   yearOfRelease(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_79_inv_0_info_159->insert(RamDomain(159),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(26),RamDomain(202));
}();
/* END STRATUM 74 */
/* BEGIN STRATUM 75 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.16(16,"v0,v1","Rule","years,v0,v1","years,v1,v0","inv_0(v0,v1) :- 
   Rule(279),
   years(v0,v1),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_80_inv_0_info_16->insert(RamDomain(16),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(4),RamDomain(31));
}();
/* END STRATUM 75 */
/* BEGIN STRATUM 76 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.160(160,"v0,v1","Rule","yearOfRelease,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(423),
   yearOfRelease(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_81_inv_0_info_160->insert(RamDomain(160),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(28),RamDomain(203));
}();
/* END STRATUM 76 */
/* BEGIN STRATUM 77 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.161(161,"v0,v1","Rule","yearOfRelease,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(424),
   yearOfRelease(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_82_inv_0_info_161->insert(RamDomain(161),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(28),RamDomain(204));
}();
/* END STRATUM 77 */
/* BEGIN STRATUM 78 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.162(162,"v0,v1","Rule","yearOfRelease,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(425),
   yearOfRelease(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_83_inv_0_info_162->insert(RamDomain(162),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(26),RamDomain(205));
}();
/* END STRATUM 78 */
/* BEGIN STRATUM 79 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.163(163,"v0,v1","Rule","yearOfRelease,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(426),
   yearOfRelease(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_84_inv_0_info_163->insert(RamDomain(163),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(130),RamDomain(206));
}();
/* END STRATUM 79 */
/* BEGIN STRATUM 80 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.164(164,"v0,v1","Rule","yearOfRelease,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(427),
   yearOfRelease(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_85_inv_0_info_164->insert(RamDomain(164),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(132),RamDomain(207));
}();
/* END STRATUM 80 */
/* BEGIN STRATUM 81 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.165(165,"v0,v1","Rule","yearOfRelease,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(428),
   yearOfRelease(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_86_inv_0_info_165->insert(RamDomain(165),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(134),RamDomain(208));
}();
/* END STRATUM 81 */
/* BEGIN STRATUM 82 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.166(166,"v0,v1","Rule","yearOfRelease,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(429),
   yearOfRelease(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_87_inv_0_info_166->insert(RamDomain(166),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(136),RamDomain(209));
}();
/* END STRATUM 82 */
/* BEGIN STRATUM 83 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.167(167,"v0,v1","Rule","yearOfRelease,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(430),
   yearOfRelease(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_88_inv_0_info_167->insert(RamDomain(167),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(134),RamDomain(210));
}();
/* END STRATUM 83 */
/* BEGIN STRATUM 84 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.168(168,"v0,v1","Rule","yearOfRelease,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(431),
   yearOfRelease(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_89_inv_0_info_168->insert(RamDomain(168),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(136),RamDomain(211));
}();
/* END STRATUM 84 */
/* BEGIN STRATUM 85 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.169(169,"v0,v1","Rule","yearOfRelease,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(432),
   yearOfRelease(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_90_inv_0_info_169->insert(RamDomain(169),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(132),RamDomain(212));
}();
/* END STRATUM 85 */
/* BEGIN STRATUM 86 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.17(17,"v0,v1","Rule","years,v1,v0","inv_0(v0,v1) :- 
   Rule(280),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_91_inv_0_info_17->insert(RamDomain(17),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(32));
}();
/* END STRATUM 86 */
/* BEGIN STRATUM 87 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.170(170,"v0,v1","Rule","yearOfRelease,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(433),
   yearOfRelease(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_92_inv_0_info_170->insert(RamDomain(170),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(130),RamDomain(213));
}();
/* END STRATUM 87 */
/* BEGIN STRATUM 88 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.171(171,"v0,v1","Rule","year,v0,v1","inv_0(v0,v1) :- 
   Rule(434),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_93_inv_0_info_171->insert(RamDomain(171),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(214));
}();
/* END STRATUM 88 */
/* BEGIN STRATUM 89 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.172(172,"v0,v1","Rule","year,v0,v1","year,v1,v0","inv_0(v0,v1) :- 
   Rule(435),
   year(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_94_inv_0_info_172->insert(RamDomain(172),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(215));
}();
/* END STRATUM 89 */
/* BEGIN STRATUM 90 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.173(173,"v0,v1","Rule","year,v1,v0","inv_0(v0,v1) :- 
   Rule(436),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_95_inv_0_info_173->insert(RamDomain(173),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(216));
}();
/* END STRATUM 90 */
/* BEGIN STRATUM 91 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.174(174,"v0,v1","Rule","year,v1,v0","year,v0,v1","inv_0(v0,v1) :- 
   Rule(437),
   year(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_96_inv_0_info_174->insert(RamDomain(174),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(217));
}();
/* END STRATUM 91 */
/* BEGIN STRATUM 92 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.175(175,"v0,v1","Rule","year,v2,v1","year,v0,v2","inv_0(v0,v1) :- 
   Rule(438),
   year(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_97_inv_0_info_175->insert(RamDomain(175),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(66),RamDomain(218));
}();
/* END STRATUM 92 */
/* BEGIN STRATUM 93 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.176(176,"v0,v1","Rule","year,v1,v2","year,v2,v0","inv_0(v0,v1) :- 
   Rule(439),
   year(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_98_inv_0_info_176->insert(RamDomain(176),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(68),RamDomain(219));
}();
/* END STRATUM 93 */
/* BEGIN STRATUM 94 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.177(177,"v0,v1","Rule","year,v2,v0","year,v1,v2","inv_0(v0,v1) :- 
   Rule(440),
   year(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_99_inv_0_info_177->insert(RamDomain(177),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(70),RamDomain(220));
}();
/* END STRATUM 94 */
/* BEGIN STRATUM 95 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.178(178,"v0,v1","Rule","year,v2,v0","year,v2,v1","inv_0(v0,v1) :- 
   Rule(441),
   year(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_100_inv_0_info_178->insert(RamDomain(178),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(72),RamDomain(221));
}();
/* END STRATUM 95 */
/* BEGIN STRATUM 96 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.179(179,"v0,v1","Rule","year,v0,v2","year,v1,v2","inv_0(v0,v1) :- 
   Rule(442),
   year(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_101_inv_0_info_179->insert(RamDomain(179),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(70),RamDomain(222));
}();
/* END STRATUM 96 */
/* BEGIN STRATUM 97 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.18(18,"v0,v1","Rule","years,v1,v0","years,v0,v1","inv_0(v0,v1) :- 
   Rule(281),
   years(v1,v0),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_102_inv_0_info_18->insert(RamDomain(18),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(2),RamDomain(33));
}();
/* END STRATUM 97 */
/* BEGIN STRATUM 98 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.180(180,"v0,v1","Rule","year,v0,v2","year,v2,v1","inv_0(v0,v1) :- 
   Rule(443),
   year(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_103_inv_0_info_180->insert(RamDomain(180),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(72),RamDomain(223));
}();
/* END STRATUM 98 */
/* BEGIN STRATUM 99 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.181(181,"v0,v1","Rule","year,v2,v1","year,v2,v0","inv_0(v0,v1) :- 
   Rule(444),
   year(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_104_inv_0_info_181->insert(RamDomain(181),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(68),RamDomain(224));
}();
/* END STRATUM 99 */
/* BEGIN STRATUM 100 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.182(182,"v0,v1","Rule","year,v1,v2","year,v0,v2","inv_0(v0,v1) :- 
   Rule(445),
   year(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_105_inv_0_info_182->insert(RamDomain(182),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(66),RamDomain(225));
}();
/* END STRATUM 100 */
/* BEGIN STRATUM 101 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.183(183,"v0,v1","Rule","year,v0,v1","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(446),
   year(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_106_inv_0_info_183->insert(RamDomain(183),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(14),RamDomain(226));
}();
/* END STRATUM 101 */
/* BEGIN STRATUM 102 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.184(184,"v0,v1","Rule","year,v0,v1","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(447),
   year(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_107_inv_0_info_184->insert(RamDomain(184),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(227));
}();
/* END STRATUM 102 */
/* BEGIN STRATUM 103 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.185(185,"v0,v1","Rule","year,v1,v0","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(448),
   year(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_108_inv_0_info_185->insert(RamDomain(185),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(228));
}();
/* END STRATUM 103 */
/* BEGIN STRATUM 104 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.186(186,"v0,v1","Rule","year,v1,v0","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(449),
   year(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_109_inv_0_info_186->insert(RamDomain(186),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(14),RamDomain(229));
}();
/* END STRATUM 104 */
/* BEGIN STRATUM 105 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.187(187,"v0,v1","Rule","year,v2,v1","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(450),
   year(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_110_inv_0_info_187->insert(RamDomain(187),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(82),RamDomain(230));
}();
/* END STRATUM 105 */
/* BEGIN STRATUM 106 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.188(188,"v0,v1","Rule","year,v1,v2","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(451),
   year(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_111_inv_0_info_188->insert(RamDomain(188),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(84),RamDomain(231));
}();
/* END STRATUM 106 */
/* BEGIN STRATUM 107 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.189(189,"v0,v1","Rule","year,v2,v0","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(452),
   year(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_112_inv_0_info_189->insert(RamDomain(189),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(86),RamDomain(232));
}();
/* END STRATUM 107 */
/* BEGIN STRATUM 108 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.19(19,"v0,v1","Rule","years,v2,v1","years,v0,v2","inv_0(v0,v1) :- 
   Rule(282),
   years(v2,v1),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_113_inv_0_info_19->insert(RamDomain(19),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(35),RamDomain(36));
}();
/* END STRATUM 108 */
/* BEGIN STRATUM 109 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.190(190,"v0,v1","Rule","year,v2,v0","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(453),
   year(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_114_inv_0_info_190->insert(RamDomain(190),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(88),RamDomain(233));
}();
/* END STRATUM 109 */
/* BEGIN STRATUM 110 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.191(191,"v0,v1","Rule","year,v0,v2","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(454),
   year(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_115_inv_0_info_191->insert(RamDomain(191),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(86),RamDomain(234));
}();
/* END STRATUM 110 */
/* BEGIN STRATUM 111 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.192(192,"v0,v1","Rule","year,v0,v2","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(455),
   year(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_116_inv_0_info_192->insert(RamDomain(192),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(88),RamDomain(235));
}();
/* END STRATUM 111 */
/* BEGIN STRATUM 112 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.193(193,"v0,v1","Rule","year,v2,v1","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(456),
   year(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_117_inv_0_info_193->insert(RamDomain(193),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(84),RamDomain(236));
}();
/* END STRATUM 112 */
/* BEGIN STRATUM 113 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.194(194,"v0,v1","Rule","year,v1,v2","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(457),
   year(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_118_inv_0_info_194->insert(RamDomain(194),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(82),RamDomain(237));
}();
/* END STRATUM 113 */
/* BEGIN STRATUM 114 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.195(195,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(458),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_119_inv_0_info_195->insert(RamDomain(195),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(18),RamDomain(238));
}();
/* END STRATUM 114 */
/* BEGIN STRATUM 115 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.196(196,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(459),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_120_inv_0_info_196->insert(RamDomain(196),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(20),RamDomain(239));
}();
/* END STRATUM 115 */
/* BEGIN STRATUM 116 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.197(197,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(460),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_121_inv_0_info_197->insert(RamDomain(197),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(20),RamDomain(240));
}();
/* END STRATUM 116 */
/* BEGIN STRATUM 117 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.198(198,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(461),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_122_inv_0_info_198->insert(RamDomain(198),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(18),RamDomain(241));
}();
/* END STRATUM 117 */
/* BEGIN STRATUM 118 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.199(199,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(462),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_123_inv_0_info_199->insert(RamDomain(199),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(98),RamDomain(242));
}();
/* END STRATUM 118 */
/* BEGIN STRATUM 119 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.2(2,"v0,v1","Rule","years,v1,v0","inv_0(v0,v1) :- 
   Rule(265),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_124_inv_0_info_2->insert(RamDomain(2),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(5));
}();
/* END STRATUM 119 */
/* BEGIN STRATUM 120 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.20(20,"v0,v1","Rule","years,v1,v2","years,v2,v0","inv_0(v0,v1) :- 
   Rule(283),
   years(v1,v2),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_125_inv_0_info_20->insert(RamDomain(20),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(38),RamDomain(39));
}();
/* END STRATUM 120 */
/* BEGIN STRATUM 121 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.200(200,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(463),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_126_inv_0_info_200->insert(RamDomain(200),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(100),RamDomain(243));
}();
/* END STRATUM 121 */
/* BEGIN STRATUM 122 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.201(201,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(464),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_127_inv_0_info_201->insert(RamDomain(201),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(102),RamDomain(244));
}();
/* END STRATUM 122 */
/* BEGIN STRATUM 123 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.202(202,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(465),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_128_inv_0_info_202->insert(RamDomain(202),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(104),RamDomain(245));
}();
/* END STRATUM 123 */
/* BEGIN STRATUM 124 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.203(203,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(466),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_129_inv_0_info_203->insert(RamDomain(203),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(102),RamDomain(246));
}();
/* END STRATUM 124 */
/* BEGIN STRATUM 125 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.204(204,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(467),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_130_inv_0_info_204->insert(RamDomain(204),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(104),RamDomain(247));
}();
/* END STRATUM 125 */
/* BEGIN STRATUM 126 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.205(205,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(468),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_131_inv_0_info_205->insert(RamDomain(205),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(100),RamDomain(248));
}();
/* END STRATUM 126 */
/* BEGIN STRATUM 127 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.206(206,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(469),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_132_inv_0_info_206->insert(RamDomain(206),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(98),RamDomain(249));
}();
/* END STRATUM 127 */
/* BEGIN STRATUM 128 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.207(207,"v0,v1","Rule","year,v0,v1","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(470),
   year(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_133_inv_0_info_207->insert(RamDomain(207),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(22),RamDomain(250));
}();
/* END STRATUM 128 */
/* BEGIN STRATUM 129 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.208(208,"v0,v1","Rule","year,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(471),
   year(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_134_inv_0_info_208->insert(RamDomain(208),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(251));
}();
/* END STRATUM 129 */
/* BEGIN STRATUM 130 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.209(209,"v0,v1","Rule","year,v1,v0","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(472),
   year(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_135_inv_0_info_209->insert(RamDomain(209),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(24),RamDomain(252));
}();
/* END STRATUM 130 */
/* BEGIN STRATUM 131 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.21(21,"v0,v1","Rule","years,v2,v0","years,v1,v2","inv_0(v0,v1) :- 
   Rule(284),
   years(v2,v0),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_136_inv_0_info_21->insert(RamDomain(21),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(37),RamDomain(40));
}();
/* END STRATUM 131 */
/* BEGIN STRATUM 132 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.210(210,"v0,v1","Rule","year,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(473),
   year(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_137_inv_0_info_210->insert(RamDomain(210),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(22),RamDomain(253));
}();
/* END STRATUM 132 */
/* BEGIN STRATUM 133 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.211(211,"v0,v1","Rule","year,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(474),
   year(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_138_inv_0_info_211->insert(RamDomain(211),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(114),RamDomain(254));
}();
/* END STRATUM 133 */
/* BEGIN STRATUM 134 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.212(212,"v0,v1","Rule","year,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(475),
   year(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_139_inv_0_info_212->insert(RamDomain(212),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(116),RamDomain(255));
}();
/* END STRATUM 134 */
/* BEGIN STRATUM 135 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.213(213,"v0,v1","Rule","year,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(476),
   year(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_140_inv_0_info_213->insert(RamDomain(213),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(118),RamDomain(256));
}();
/* END STRATUM 135 */
/* BEGIN STRATUM 136 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.214(214,"v0,v1","Rule","year,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(477),
   year(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_141_inv_0_info_214->insert(RamDomain(214),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(120),RamDomain(257));
}();
/* END STRATUM 136 */
/* BEGIN STRATUM 137 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.215(215,"v0,v1","Rule","year,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(478),
   year(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_142_inv_0_info_215->insert(RamDomain(215),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(118),RamDomain(258));
}();
/* END STRATUM 137 */
/* BEGIN STRATUM 138 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.216(216,"v0,v1","Rule","year,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(479),
   year(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_143_inv_0_info_216->insert(RamDomain(216),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(120),RamDomain(259));
}();
/* END STRATUM 138 */
/* BEGIN STRATUM 139 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.217(217,"v0,v1","Rule","year,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(480),
   year(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_144_inv_0_info_217->insert(RamDomain(217),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(116),RamDomain(260));
}();
/* END STRATUM 139 */
/* BEGIN STRATUM 140 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.218(218,"v0,v1","Rule","year,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(481),
   year(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_145_inv_0_info_218->insert(RamDomain(218),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(114),RamDomain(261));
}();
/* END STRATUM 140 */
/* BEGIN STRATUM 141 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.219(219,"v0,v1","Rule","year,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(482),
   year(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_146_inv_0_info_219->insert(RamDomain(219),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(26),RamDomain(262));
}();
/* END STRATUM 141 */
/* BEGIN STRATUM 142 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.22(22,"v0,v1","Rule","years,v2,v0","years,v2,v1","inv_0(v0,v1) :- 
   Rule(285),
   years(v2,v0),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_147_inv_0_info_22->insert(RamDomain(22),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(34),RamDomain(41));
}();
/* END STRATUM 142 */
/* BEGIN STRATUM 143 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.220(220,"v0,v1","Rule","year,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(483),
   year(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_148_inv_0_info_220->insert(RamDomain(220),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(28),RamDomain(263));
}();
/* END STRATUM 143 */
/* BEGIN STRATUM 144 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.221(221,"v0,v1","Rule","year,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(484),
   year(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_149_inv_0_info_221->insert(RamDomain(221),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(28),RamDomain(264));
}();
/* END STRATUM 144 */
/* BEGIN STRATUM 145 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.222(222,"v0,v1","Rule","year,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(485),
   year(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_150_inv_0_info_222->insert(RamDomain(222),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(26),RamDomain(265));
}();
/* END STRATUM 145 */
/* BEGIN STRATUM 146 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.223(223,"v0,v1","Rule","year,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(486),
   year(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_151_inv_0_info_223->insert(RamDomain(223),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(130),RamDomain(266));
}();
/* END STRATUM 146 */
/* BEGIN STRATUM 147 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.224(224,"v0,v1","Rule","year,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(487),
   year(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_152_inv_0_info_224->insert(RamDomain(224),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(132),RamDomain(267));
}();
/* END STRATUM 147 */
/* BEGIN STRATUM 148 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.225(225,"v0,v1","Rule","year,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(488),
   year(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_153_inv_0_info_225->insert(RamDomain(225),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(134),RamDomain(268));
}();
/* END STRATUM 148 */
/* BEGIN STRATUM 149 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.226(226,"v0,v1","Rule","year,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(489),
   year(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_154_inv_0_info_226->insert(RamDomain(226),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(136),RamDomain(269));
}();
/* END STRATUM 149 */
/* BEGIN STRATUM 150 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.227(227,"v0,v1","Rule","year,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(490),
   year(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_155_inv_0_info_227->insert(RamDomain(227),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(134),RamDomain(270));
}();
/* END STRATUM 150 */
/* BEGIN STRATUM 151 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.228(228,"v0,v1","Rule","year,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(491),
   year(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_156_inv_0_info_228->insert(RamDomain(228),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(136),RamDomain(271));
}();
/* END STRATUM 151 */
/* BEGIN STRATUM 152 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.229(229,"v0,v1","Rule","year,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(492),
   year(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_157_inv_0_info_229->insert(RamDomain(229),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(132),RamDomain(272));
}();
/* END STRATUM 152 */
/* BEGIN STRATUM 153 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.23(23,"v0,v1","Rule","years,v0,v2","years,v1,v2","inv_0(v0,v1) :- 
   Rule(286),
   years(v0,v2),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_158_inv_0_info_23->insert(RamDomain(23),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(37),RamDomain(42));
}();
/* END STRATUM 153 */
/* BEGIN STRATUM 154 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.230(230,"v0,v1","Rule","year,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(493),
   year(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_159_inv_0_info_230->insert(RamDomain(230),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(130),RamDomain(273));
}();
/* END STRATUM 154 */
/* BEGIN STRATUM 155 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.231(231,"v0,v1","Rule","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(494),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_160_inv_0_info_231->insert(RamDomain(231),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(274));
}();
/* END STRATUM 155 */
/* BEGIN STRATUM 156 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.232(232,"v0,v1","Rule","writer,v0,v1","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(495),
   writer(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_161_inv_0_info_232->insert(RamDomain(232),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(16),RamDomain(275));
}();
/* END STRATUM 156 */
/* BEGIN STRATUM 157 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.233(233,"v0,v1","Rule","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(496),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_162_inv_0_info_233->insert(RamDomain(233),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(276));
}();
/* END STRATUM 157 */
/* BEGIN STRATUM 158 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.234(234,"v0,v1","Rule","writer,v1,v0","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(497),
   writer(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_163_inv_0_info_234->insert(RamDomain(234),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(14),RamDomain(277));
}();
/* END STRATUM 158 */
/* BEGIN STRATUM 159 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.235(235,"v0,v1","Rule","writer,v2,v1","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(498),
   writer(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_164_inv_0_info_235->insert(RamDomain(235),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(82),RamDomain(278));
}();
/* END STRATUM 159 */
/* BEGIN STRATUM 160 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.236(236,"v0,v1","Rule","writer,v1,v2","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(499),
   writer(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_165_inv_0_info_236->insert(RamDomain(236),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(84),RamDomain(279));
}();
/* END STRATUM 160 */
/* BEGIN STRATUM 161 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.237(237,"v0,v1","Rule","writer,v2,v0","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(500),
   writer(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_166_inv_0_info_237->insert(RamDomain(237),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(86),RamDomain(280));
}();
/* END STRATUM 161 */
/* BEGIN STRATUM 162 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.238(238,"v0,v1","Rule","writer,v2,v0","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(501),
   writer(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_167_inv_0_info_238->insert(RamDomain(238),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(88),RamDomain(281));
}();
/* END STRATUM 162 */
/* BEGIN STRATUM 163 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.239(239,"v0,v1","Rule","writer,v0,v2","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(502),
   writer(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_168_inv_0_info_239->insert(RamDomain(239),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(86),RamDomain(282));
}();
/* END STRATUM 163 */
/* BEGIN STRATUM 164 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.24(24,"v0,v1","Rule","years,v0,v2","years,v2,v1","inv_0(v0,v1) :- 
   Rule(287),
   years(v0,v2),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_169_inv_0_info_24->insert(RamDomain(24),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(34),RamDomain(43));
}();
/* END STRATUM 164 */
/* BEGIN STRATUM 165 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.240(240,"v0,v1","Rule","writer,v0,v2","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(503),
   writer(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_170_inv_0_info_240->insert(RamDomain(240),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(88),RamDomain(283));
}();
/* END STRATUM 165 */
/* BEGIN STRATUM 166 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.241(241,"v0,v1","Rule","writer,v2,v1","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(504),
   writer(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_171_inv_0_info_241->insert(RamDomain(241),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(84),RamDomain(284));
}();
/* END STRATUM 166 */
/* BEGIN STRATUM 167 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.242(242,"v0,v1","Rule","writer,v1,v2","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(505),
   writer(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_172_inv_0_info_242->insert(RamDomain(242),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(82),RamDomain(285));
}();
/* END STRATUM 167 */
/* BEGIN STRATUM 168 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.243(243,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(506),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_173_inv_0_info_243->insert(RamDomain(243),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(18),RamDomain(286));
}();
/* END STRATUM 168 */
/* BEGIN STRATUM 169 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.244(244,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(507),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_174_inv_0_info_244->insert(RamDomain(244),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(20),RamDomain(287));
}();
/* END STRATUM 169 */
/* BEGIN STRATUM 170 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.245(245,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(508),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_175_inv_0_info_245->insert(RamDomain(245),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(20),RamDomain(288));
}();
/* END STRATUM 170 */
/* BEGIN STRATUM 171 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.246(246,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(509),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_176_inv_0_info_246->insert(RamDomain(246),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(18),RamDomain(289));
}();
/* END STRATUM 171 */
/* BEGIN STRATUM 172 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.247(247,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(510),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_177_inv_0_info_247->insert(RamDomain(247),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(98),RamDomain(290));
}();
/* END STRATUM 172 */
/* BEGIN STRATUM 173 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.248(248,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(511),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_178_inv_0_info_248->insert(RamDomain(248),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(100),RamDomain(291));
}();
/* END STRATUM 173 */
/* BEGIN STRATUM 174 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.249(249,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(512),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_179_inv_0_info_249->insert(RamDomain(249),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(102),RamDomain(292));
}();
/* END STRATUM 174 */
/* BEGIN STRATUM 175 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.25(25,"v0,v1","Rule","years,v2,v1","years,v2,v0","inv_0(v0,v1) :- 
   Rule(288),
   years(v2,v1),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_180_inv_0_info_25->insert(RamDomain(25),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(38),RamDomain(44));
}();
/* END STRATUM 175 */
/* BEGIN STRATUM 176 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.250(250,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(513),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_181_inv_0_info_250->insert(RamDomain(250),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(104),RamDomain(293));
}();
/* END STRATUM 176 */
/* BEGIN STRATUM 177 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.251(251,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(514),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_182_inv_0_info_251->insert(RamDomain(251),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(102),RamDomain(294));
}();
/* END STRATUM 177 */
/* BEGIN STRATUM 178 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.252(252,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(515),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_183_inv_0_info_252->insert(RamDomain(252),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(104),RamDomain(295));
}();
/* END STRATUM 178 */
/* BEGIN STRATUM 179 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.253(253,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(516),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_184_inv_0_info_253->insert(RamDomain(253),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(100),RamDomain(296));
}();
/* END STRATUM 179 */
/* BEGIN STRATUM 180 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.254(254,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(517),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_185_inv_0_info_254->insert(RamDomain(254),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(98),RamDomain(297));
}();
/* END STRATUM 180 */
/* BEGIN STRATUM 181 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.255(255,"v0,v1","Rule","writer,v0,v1","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(518),
   writer(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_186_inv_0_info_255->insert(RamDomain(255),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(22),RamDomain(298));
}();
/* END STRATUM 181 */
/* BEGIN STRATUM 182 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.256(256,"v0,v1","Rule","writer,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(519),
   writer(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_187_inv_0_info_256->insert(RamDomain(256),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(24),RamDomain(299));
}();
/* END STRATUM 182 */
/* BEGIN STRATUM 183 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.257(257,"v0,v1","Rule","writer,v1,v0","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(520),
   writer(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_188_inv_0_info_257->insert(RamDomain(257),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(24),RamDomain(300));
}();
/* END STRATUM 183 */
/* BEGIN STRATUM 184 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.258(258,"v0,v1","Rule","writer,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(521),
   writer(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_189_inv_0_info_258->insert(RamDomain(258),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(22),RamDomain(301));
}();
/* END STRATUM 184 */
/* BEGIN STRATUM 185 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.259(259,"v0,v1","Rule","writer,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(522),
   writer(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_190_inv_0_info_259->insert(RamDomain(259),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(114),RamDomain(302));
}();
/* END STRATUM 185 */
/* BEGIN STRATUM 186 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.26(26,"v0,v1","Rule","years,v1,v2","years,v0,v2","inv_0(v0,v1) :- 
   Rule(289),
   years(v1,v2),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_191_inv_0_info_26->insert(RamDomain(26),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(35),RamDomain(45));
}();
/* END STRATUM 186 */
/* BEGIN STRATUM 187 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.260(260,"v0,v1","Rule","writer,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(523),
   writer(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_192_inv_0_info_260->insert(RamDomain(260),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(116),RamDomain(303));
}();
/* END STRATUM 187 */
/* BEGIN STRATUM 188 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.261(261,"v0,v1","Rule","writer,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(524),
   writer(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_193_inv_0_info_261->insert(RamDomain(261),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(118),RamDomain(304));
}();
/* END STRATUM 188 */
/* BEGIN STRATUM 189 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.262(262,"v0,v1","Rule","writer,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(525),
   writer(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_194_inv_0_info_262->insert(RamDomain(262),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(120),RamDomain(305));
}();
/* END STRATUM 189 */
/* BEGIN STRATUM 190 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.263(263,"v0,v1","Rule","writer,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(526),
   writer(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_195_inv_0_info_263->insert(RamDomain(263),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(118),RamDomain(306));
}();
/* END STRATUM 190 */
/* BEGIN STRATUM 191 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.264(264,"v0,v1","Rule","writer,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(527),
   writer(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_196_inv_0_info_264->insert(RamDomain(264),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(120),RamDomain(307));
}();
/* END STRATUM 191 */
/* BEGIN STRATUM 192 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.265(265,"v0,v1","Rule","writer,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(528),
   writer(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_197_inv_0_info_265->insert(RamDomain(265),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(116),RamDomain(308));
}();
/* END STRATUM 192 */
/* BEGIN STRATUM 193 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.266(266,"v0,v1","Rule","writer,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(529),
   writer(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_198_inv_0_info_266->insert(RamDomain(266),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(114),RamDomain(309));
}();
/* END STRATUM 193 */
/* BEGIN STRATUM 194 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.267(267,"v0,v1","Rule","writer,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(530),
   writer(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_199_inv_0_info_267->insert(RamDomain(267),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(26),RamDomain(310));
}();
/* END STRATUM 194 */
/* BEGIN STRATUM 195 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.268(268,"v0,v1","Rule","writer,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(531),
   writer(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_200_inv_0_info_268->insert(RamDomain(268),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(28),RamDomain(311));
}();
/* END STRATUM 195 */
/* BEGIN STRATUM 196 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.269(269,"v0,v1","Rule","writer,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(532),
   writer(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_201_inv_0_info_269->insert(RamDomain(269),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(28),RamDomain(312));
}();
/* END STRATUM 196 */
/* BEGIN STRATUM 197 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.27(27,"v0,v1","Rule","years,v0,v1","yearOfRelease,v0,v1","inv_0(v0,v1) :- 
   Rule(290),
   years(v0,v1),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_202_inv_0_info_27->insert(RamDomain(27),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(46));
}();
/* END STRATUM 197 */
/* BEGIN STRATUM 198 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.270(270,"v0,v1","Rule","writer,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(533),
   writer(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_203_inv_0_info_270->insert(RamDomain(270),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(26),RamDomain(313));
}();
/* END STRATUM 198 */
/* BEGIN STRATUM 199 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.271(271,"v0,v1","Rule","writer,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(534),
   writer(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_204_inv_0_info_271->insert(RamDomain(271),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(130),RamDomain(314));
}();
/* END STRATUM 199 */
/* BEGIN STRATUM 200 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.272(272,"v0,v1","Rule","writer,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(535),
   writer(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_205_inv_0_info_272->insert(RamDomain(272),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(132),RamDomain(315));
}();
/* END STRATUM 200 */
/* BEGIN STRATUM 201 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.273(273,"v0,v1","Rule","writer,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(536),
   writer(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_206_inv_0_info_273->insert(RamDomain(273),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(134),RamDomain(316));
}();
/* END STRATUM 201 */
/* BEGIN STRATUM 202 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.274(274,"v0,v1","Rule","writer,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(537),
   writer(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_207_inv_0_info_274->insert(RamDomain(274),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(136),RamDomain(317));
}();
/* END STRATUM 202 */
/* BEGIN STRATUM 203 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.275(275,"v0,v1","Rule","writer,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(538),
   writer(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_208_inv_0_info_275->insert(RamDomain(275),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(134),RamDomain(318));
}();
/* END STRATUM 203 */
/* BEGIN STRATUM 204 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.276(276,"v0,v1","Rule","writer,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(539),
   writer(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_209_inv_0_info_276->insert(RamDomain(276),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(136),RamDomain(319));
}();
/* END STRATUM 204 */
/* BEGIN STRATUM 205 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.277(277,"v0,v1","Rule","writer,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(540),
   writer(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_210_inv_0_info_277->insert(RamDomain(277),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(132),RamDomain(320));
}();
/* END STRATUM 205 */
/* BEGIN STRATUM 206 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.278(278,"v0,v1","Rule","writer,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(541),
   writer(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_211_inv_0_info_278->insert(RamDomain(278),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(130),RamDomain(321));
}();
/* END STRATUM 206 */
/* BEGIN STRATUM 207 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.279(279,"v0,v1","Rule","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(542),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_212_inv_0_info_279->insert(RamDomain(279),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(322));
}();
/* END STRATUM 207 */
/* BEGIN STRATUM 208 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.28(28,"v0,v1","Rule","years,v0,v1","yearOfRelease,v1,v0","inv_0(v0,v1) :- 
   Rule(291),
   years(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_213_inv_0_info_28->insert(RamDomain(28),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(8),RamDomain(47));
}();
/* END STRATUM 208 */
/* BEGIN STRATUM 209 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.280(280,"v0,v1","Rule","wikisourcelangProperty,v0,v1","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(543),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_214_inv_0_info_280->insert(RamDomain(280),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(20),RamDomain(323));
}();
/* END STRATUM 209 */
/* BEGIN STRATUM 210 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.281(281,"v0,v1","Rule","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(544),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_215_inv_0_info_281->insert(RamDomain(281),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(324));
}();
/* END STRATUM 210 */
/* BEGIN STRATUM 211 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.282(282,"v0,v1","Rule","wikisourcelangProperty,v1,v0","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(545),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_216_inv_0_info_282->insert(RamDomain(282),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(18),RamDomain(325));
}();
/* END STRATUM 211 */
/* BEGIN STRATUM 212 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.283(283,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(546),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_217_inv_0_info_283->insert(RamDomain(283),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(98),RamDomain(326));
}();
/* END STRATUM 212 */
/* BEGIN STRATUM 213 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.284(284,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(547),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_218_inv_0_info_284->insert(RamDomain(284),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(100),RamDomain(327));
}();
/* END STRATUM 213 */
/* BEGIN STRATUM 214 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.285(285,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(548),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_219_inv_0_info_285->insert(RamDomain(285),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(102),RamDomain(328));
}();
/* END STRATUM 214 */
/* BEGIN STRATUM 215 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.286(286,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(549),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_220_inv_0_info_286->insert(RamDomain(286),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(104),RamDomain(329));
}();
/* END STRATUM 215 */
/* BEGIN STRATUM 216 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.287(287,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(550),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_221_inv_0_info_287->insert(RamDomain(287),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(102),RamDomain(330));
}();
/* END STRATUM 216 */
/* BEGIN STRATUM 217 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.288(288,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(551),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_222_inv_0_info_288->insert(RamDomain(288),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(104),RamDomain(331));
}();
/* END STRATUM 217 */
/* BEGIN STRATUM 218 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.289(289,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(552),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_223_inv_0_info_289->insert(RamDomain(289),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(100),RamDomain(332));
}();
/* END STRATUM 218 */
/* BEGIN STRATUM 219 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.29(29,"v0,v1","Rule","years,v1,v0","yearOfRelease,v1,v0","inv_0(v0,v1) :- 
   Rule(292),
   years(v1,v0),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_224_inv_0_info_29->insert(RamDomain(29),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(8),RamDomain(48));
}();
/* END STRATUM 219 */
/* BEGIN STRATUM 220 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.290(290,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(553),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_225_inv_0_info_290->insert(RamDomain(290),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(98),RamDomain(333));
}();
/* END STRATUM 220 */
/* BEGIN STRATUM 221 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.291(291,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(554),
   wikisourcelangProperty(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_226_inv_0_info_291->insert(RamDomain(291),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(22),RamDomain(334));
}();
/* END STRATUM 221 */
/* BEGIN STRATUM 222 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.292(292,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(555),
   wikisourcelangProperty(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_227_inv_0_info_292->insert(RamDomain(292),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(24),RamDomain(335));
}();
/* END STRATUM 222 */
/* BEGIN STRATUM 223 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.293(293,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(556),
   wikisourcelangProperty(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_228_inv_0_info_293->insert(RamDomain(293),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(24),RamDomain(336));
}();
/* END STRATUM 223 */
/* BEGIN STRATUM 224 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.294(294,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(557),
   wikisourcelangProperty(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_229_inv_0_info_294->insert(RamDomain(294),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(22),RamDomain(337));
}();
/* END STRATUM 224 */
/* BEGIN STRATUM 225 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.295(295,"v0,v1","Rule","wikisourcelangProperty,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(558),
   wikisourcelangProperty(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_230_inv_0_info_295->insert(RamDomain(295),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(114),RamDomain(338));
}();
/* END STRATUM 225 */
/* BEGIN STRATUM 226 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.296(296,"v0,v1","Rule","wikisourcelangProperty,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(559),
   wikisourcelangProperty(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_231_inv_0_info_296->insert(RamDomain(296),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(116),RamDomain(339));
}();
/* END STRATUM 226 */
/* BEGIN STRATUM 227 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.297(297,"v0,v1","Rule","wikisourcelangProperty,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(560),
   wikisourcelangProperty(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_232_inv_0_info_297->insert(RamDomain(297),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(118),RamDomain(340));
}();
/* END STRATUM 227 */
/* BEGIN STRATUM 228 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.298(298,"v0,v1","Rule","wikisourcelangProperty,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(561),
   wikisourcelangProperty(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_233_inv_0_info_298->insert(RamDomain(298),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(120),RamDomain(341));
}();
/* END STRATUM 228 */
/* BEGIN STRATUM 229 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.299(299,"v0,v1","Rule","wikisourcelangProperty,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(562),
   wikisourcelangProperty(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_234_inv_0_info_299->insert(RamDomain(299),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(118),RamDomain(342));
}();
/* END STRATUM 229 */
/* BEGIN STRATUM 230 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.3(3,"v0,v1","Rule","yearOfRelease,v0,v1","inv_0(v0,v1) :- 
   Rule(266),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_235_inv_0_info_3->insert(RamDomain(3),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7));
}();
/* END STRATUM 230 */
/* BEGIN STRATUM 231 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.30(30,"v0,v1","Rule","years,v1,v0","yearOfRelease,v0,v1","inv_0(v0,v1) :- 
   Rule(293),
   years(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_236_inv_0_info_30->insert(RamDomain(30),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(6),RamDomain(49));
}();
/* END STRATUM 231 */
/* BEGIN STRATUM 232 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.300(300,"v0,v1","Rule","wikisourcelangProperty,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(563),
   wikisourcelangProperty(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_237_inv_0_info_300->insert(RamDomain(300),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(120),RamDomain(343));
}();
/* END STRATUM 232 */
/* BEGIN STRATUM 233 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.301(301,"v0,v1","Rule","wikisourcelangProperty,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(564),
   wikisourcelangProperty(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_238_inv_0_info_301->insert(RamDomain(301),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(116),RamDomain(344));
}();
/* END STRATUM 233 */
/* BEGIN STRATUM 234 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.302(302,"v0,v1","Rule","wikisourcelangProperty,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(565),
   wikisourcelangProperty(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_239_inv_0_info_302->insert(RamDomain(302),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(114),RamDomain(345));
}();
/* END STRATUM 234 */
/* BEGIN STRATUM 235 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.303(303,"v0,v1","Rule","wikisourcelangProperty,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(566),
   wikisourcelangProperty(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_240_inv_0_info_303->insert(RamDomain(303),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(26),RamDomain(346));
}();
/* END STRATUM 235 */
/* BEGIN STRATUM 236 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.304(304,"v0,v1","Rule","wikisourcelangProperty,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(567),
   wikisourcelangProperty(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_241_inv_0_info_304->insert(RamDomain(304),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(28),RamDomain(347));
}();
/* END STRATUM 236 */
/* BEGIN STRATUM 237 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.305(305,"v0,v1","Rule","wikisourcelangProperty,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(568),
   wikisourcelangProperty(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_242_inv_0_info_305->insert(RamDomain(305),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(28),RamDomain(348));
}();
/* END STRATUM 237 */
/* BEGIN STRATUM 238 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.306(306,"v0,v1","Rule","wikisourcelangProperty,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(569),
   wikisourcelangProperty(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_243_inv_0_info_306->insert(RamDomain(306),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(26),RamDomain(349));
}();
/* END STRATUM 238 */
/* BEGIN STRATUM 239 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.307(307,"v0,v1","Rule","wikisourcelangProperty,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(570),
   wikisourcelangProperty(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_244_inv_0_info_307->insert(RamDomain(307),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(130),RamDomain(350));
}();
/* END STRATUM 239 */
/* BEGIN STRATUM 240 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.308(308,"v0,v1","Rule","wikisourcelangProperty,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(571),
   wikisourcelangProperty(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_245_inv_0_info_308->insert(RamDomain(308),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(132),RamDomain(351));
}();
/* END STRATUM 240 */
/* BEGIN STRATUM 241 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.309(309,"v0,v1","Rule","wikisourcelangProperty,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(572),
   wikisourcelangProperty(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_246_inv_0_info_309->insert(RamDomain(309),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(134),RamDomain(352));
}();
/* END STRATUM 241 */
/* BEGIN STRATUM 242 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.31(31,"v0,v1","Rule","years,v2,v1","yearOfRelease,v0,v2","inv_0(v0,v1) :- 
   Rule(294),
   years(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_247_inv_0_info_31->insert(RamDomain(31),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(50),RamDomain(51));
}();
/* END STRATUM 242 */
/* BEGIN STRATUM 243 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.310(310,"v0,v1","Rule","wikisourcelangProperty,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(573),
   wikisourcelangProperty(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_248_inv_0_info_310->insert(RamDomain(310),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(136),RamDomain(353));
}();
/* END STRATUM 243 */
/* BEGIN STRATUM 244 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.311(311,"v0,v1","Rule","wikisourcelangProperty,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(574),
   wikisourcelangProperty(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_249_inv_0_info_311->insert(RamDomain(311),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(134),RamDomain(354));
}();
/* END STRATUM 244 */
/* BEGIN STRATUM 245 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.312(312,"v0,v1","Rule","wikisourcelangProperty,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(575),
   wikisourcelangProperty(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_250_inv_0_info_312->insert(RamDomain(312),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(136),RamDomain(355));
}();
/* END STRATUM 245 */
/* BEGIN STRATUM 246 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.313(313,"v0,v1","Rule","wikisourcelangProperty,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(576),
   wikisourcelangProperty(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_251_inv_0_info_313->insert(RamDomain(313),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(132),RamDomain(356));
}();
/* END STRATUM 246 */
/* BEGIN STRATUM 247 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.314(314,"v0,v1","Rule","wikisourcelangProperty,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(577),
   wikisourcelangProperty(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_252_inv_0_info_314->insert(RamDomain(314),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(130),RamDomain(357));
}();
/* END STRATUM 247 */
/* BEGIN STRATUM 248 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.315(315,"v0,v1","Rule","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(578),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_253_inv_0_info_315->insert(RamDomain(315),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(358));
}();
/* END STRATUM 248 */
/* BEGIN STRATUM 249 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.316(316,"v0,v1","Rule","livesIn,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(579),
   livesIn(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_254_inv_0_info_316->insert(RamDomain(316),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(24),RamDomain(359));
}();
/* END STRATUM 249 */
/* BEGIN STRATUM 250 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.317(317,"v0,v1","Rule","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(580),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_255_inv_0_info_317->insert(RamDomain(317),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(360));
}();
/* END STRATUM 250 */
/* BEGIN STRATUM 251 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.318(318,"v0,v1","Rule","livesIn,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(581),
   livesIn(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_256_inv_0_info_318->insert(RamDomain(318),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(22),RamDomain(361));
}();
/* END STRATUM 251 */
/* BEGIN STRATUM 252 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.319(319,"v0,v1","Rule","livesIn,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(582),
   livesIn(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_257_inv_0_info_319->insert(RamDomain(319),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(114),RamDomain(362));
}();
/* END STRATUM 252 */
/* BEGIN STRATUM 253 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.32(32,"v0,v1","Rule","years,v1,v2","yearOfRelease,v2,v0","inv_0(v0,v1) :- 
   Rule(295),
   years(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_258_inv_0_info_32->insert(RamDomain(32),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(52),RamDomain(53));
}();
/* END STRATUM 253 */
/* BEGIN STRATUM 254 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.320(320,"v0,v1","Rule","livesIn,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(583),
   livesIn(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_259_inv_0_info_320->insert(RamDomain(320),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(116),RamDomain(363));
}();
/* END STRATUM 254 */
/* BEGIN STRATUM 255 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.321(321,"v0,v1","Rule","livesIn,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(584),
   livesIn(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_260_inv_0_info_321->insert(RamDomain(321),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(118),RamDomain(364));
}();
/* END STRATUM 255 */
/* BEGIN STRATUM 256 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.322(322,"v0,v1","Rule","livesIn,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(585),
   livesIn(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_261_inv_0_info_322->insert(RamDomain(322),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(120),RamDomain(365));
}();
/* END STRATUM 256 */
/* BEGIN STRATUM 257 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.323(323,"v0,v1","Rule","livesIn,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(586),
   livesIn(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_262_inv_0_info_323->insert(RamDomain(323),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(118),RamDomain(366));
}();
/* END STRATUM 257 */
/* BEGIN STRATUM 258 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.324(324,"v0,v1","Rule","livesIn,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(587),
   livesIn(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_263_inv_0_info_324->insert(RamDomain(324),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(120),RamDomain(367));
}();
/* END STRATUM 258 */
/* BEGIN STRATUM 259 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.325(325,"v0,v1","Rule","livesIn,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(588),
   livesIn(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_264_inv_0_info_325->insert(RamDomain(325),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(116),RamDomain(368));
}();
/* END STRATUM 259 */
/* BEGIN STRATUM 260 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.326(326,"v0,v1","Rule","livesIn,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(589),
   livesIn(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_265_inv_0_info_326->insert(RamDomain(326),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(114),RamDomain(369));
}();
/* END STRATUM 260 */
/* BEGIN STRATUM 261 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.327(327,"v0,v1","Rule","livesIn,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(590),
   livesIn(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_266_inv_0_info_327->insert(RamDomain(327),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(26),RamDomain(370));
}();
/* END STRATUM 261 */
/* BEGIN STRATUM 262 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.328(328,"v0,v1","Rule","livesIn,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(591),
   livesIn(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_267_inv_0_info_328->insert(RamDomain(328),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(28),RamDomain(371));
}();
/* END STRATUM 262 */
/* BEGIN STRATUM 263 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.329(329,"v0,v1","Rule","livesIn,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(592),
   livesIn(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_268_inv_0_info_329->insert(RamDomain(329),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(28),RamDomain(372));
}();
/* END STRATUM 263 */
/* BEGIN STRATUM 264 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.33(33,"v0,v1","Rule","years,v2,v0","yearOfRelease,v1,v2","inv_0(v0,v1) :- 
   Rule(296),
   years(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_269_inv_0_info_33->insert(RamDomain(33),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(54),RamDomain(55));
}();
/* END STRATUM 264 */
/* BEGIN STRATUM 265 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.330(330,"v0,v1","Rule","livesIn,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(593),
   livesIn(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_270_inv_0_info_330->insert(RamDomain(330),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(26),RamDomain(373));
}();
/* END STRATUM 265 */
/* BEGIN STRATUM 266 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.331(331,"v0,v1","Rule","livesIn,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(594),
   livesIn(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_271_inv_0_info_331->insert(RamDomain(331),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(130),RamDomain(374));
}();
/* END STRATUM 266 */
/* BEGIN STRATUM 267 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.332(332,"v0,v1","Rule","livesIn,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(595),
   livesIn(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_272_inv_0_info_332->insert(RamDomain(332),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(132),RamDomain(375));
}();
/* END STRATUM 267 */
/* BEGIN STRATUM 268 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.333(333,"v0,v1","Rule","livesIn,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(596),
   livesIn(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_273_inv_0_info_333->insert(RamDomain(333),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(134),RamDomain(376));
}();
/* END STRATUM 268 */
/* BEGIN STRATUM 269 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.334(334,"v0,v1","Rule","livesIn,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(597),
   livesIn(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_274_inv_0_info_334->insert(RamDomain(334),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(136),RamDomain(377));
}();
/* END STRATUM 269 */
/* BEGIN STRATUM 270 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.335(335,"v0,v1","Rule","livesIn,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(598),
   livesIn(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_275_inv_0_info_335->insert(RamDomain(335),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(134),RamDomain(378));
}();
/* END STRATUM 270 */
/* BEGIN STRATUM 271 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.336(336,"v0,v1","Rule","livesIn,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(599),
   livesIn(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_276_inv_0_info_336->insert(RamDomain(336),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(136),RamDomain(379));
}();
/* END STRATUM 271 */
/* BEGIN STRATUM 272 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.337(337,"v0,v1","Rule","livesIn,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(600),
   livesIn(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_277_inv_0_info_337->insert(RamDomain(337),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(132),RamDomain(380));
}();
/* END STRATUM 272 */
/* BEGIN STRATUM 273 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.338(338,"v0,v1","Rule","livesIn,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(601),
   livesIn(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_278_inv_0_info_338->insert(RamDomain(338),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(130),RamDomain(381));
}();
/* END STRATUM 273 */
/* BEGIN STRATUM 274 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.339(339,"v0,v1","Rule","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(602),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_279_inv_0_info_339->insert(RamDomain(339),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(382));
}();
/* END STRATUM 274 */
/* BEGIN STRATUM 275 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.34(34,"v0,v1","Rule","years,v2,v0","yearOfRelease,v2,v1","inv_0(v0,v1) :- 
   Rule(297),
   years(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_280_inv_0_info_34->insert(RamDomain(34),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(56),RamDomain(57));
}();
/* END STRATUM 275 */
/* BEGIN STRATUM 276 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.340(340,"v0,v1","Rule","inv_0,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(603),
   inv_0(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_281_inv_0_info_340->insert(RamDomain(340),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(28),RamDomain(383));
}();
/* END STRATUM 276 */
/* BEGIN STRATUM 277 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.341(341,"v0,v1","Rule","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(604),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_282_inv_0_info_341->insert(RamDomain(341),RamDomain(0),RamDomain(1),RamDomain(28),RamDomain(384));
}();
/* END STRATUM 277 */
/* BEGIN STRATUM 278 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.342(342,"v0,v1","Rule","inv_0,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(605),
   inv_0(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_283_inv_0_info_342->insert(RamDomain(342),RamDomain(0),RamDomain(1),RamDomain(28),RamDomain(26),RamDomain(385));
}();
/* END STRATUM 278 */
/* BEGIN STRATUM 279 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.343(343,"v0,v1","Rule","inv_0,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(606),
   inv_0(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_284_inv_0_info_343->insert(RamDomain(343),RamDomain(0),RamDomain(1),RamDomain(136),RamDomain(130),RamDomain(386));
}();
/* END STRATUM 279 */
/* BEGIN STRATUM 280 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.344(344,"v0,v1","Rule","inv_0,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(607),
   inv_0(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_285_inv_0_info_344->insert(RamDomain(344),RamDomain(0),RamDomain(1),RamDomain(134),RamDomain(132),RamDomain(387));
}();
/* END STRATUM 280 */
/* BEGIN STRATUM 281 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.345(345,"v0,v1","Rule","inv_0,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(608),
   inv_0(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_286_inv_0_info_345->insert(RamDomain(345),RamDomain(0),RamDomain(1),RamDomain(132),RamDomain(134),RamDomain(388));
}();
/* END STRATUM 281 */
/* BEGIN STRATUM 282 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.346(346,"v0,v1","Rule","inv_0,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(609),
   inv_0(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_287_inv_0_info_346->insert(RamDomain(346),RamDomain(0),RamDomain(1),RamDomain(132),RamDomain(136),RamDomain(389));
}();
/* END STRATUM 282 */
/* BEGIN STRATUM 283 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.347(347,"v0,v1","Rule","inv_0,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(610),
   inv_0(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_288_inv_0_info_347->insert(RamDomain(347),RamDomain(0),RamDomain(1),RamDomain(130),RamDomain(134),RamDomain(390));
}();
/* END STRATUM 283 */
/* BEGIN STRATUM 284 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.348(348,"v0,v1","Rule","inv_0,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(611),
   inv_0(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_289_inv_0_info_348->insert(RamDomain(348),RamDomain(0),RamDomain(1),RamDomain(130),RamDomain(136),RamDomain(391));
}();
/* END STRATUM 284 */
/* BEGIN STRATUM 285 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.349(349,"v0,v1","Rule","inv_0,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(612),
   inv_0(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_290_inv_0_info_349->insert(RamDomain(349),RamDomain(0),RamDomain(1),RamDomain(136),RamDomain(132),RamDomain(392));
}();
/* END STRATUM 285 */
/* BEGIN STRATUM 286 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.35(35,"v0,v1","Rule","years,v0,v2","yearOfRelease,v1,v2","inv_0(v0,v1) :- 
   Rule(298),
   years(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_291_inv_0_info_35->insert(RamDomain(35),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(54),RamDomain(58));
}();
/* END STRATUM 286 */
/* BEGIN STRATUM 287 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.350(350,"v0,v1","Rule","inv_0,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(613),
   inv_0(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_292_inv_0_info_350->insert(RamDomain(350),RamDomain(0),RamDomain(1),RamDomain(134),RamDomain(130),RamDomain(393));
}();
/* END STRATUM 287 */
/* BEGIN STRATUM 288 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.36(36,"v0,v1","Rule","years,v0,v2","yearOfRelease,v2,v1","inv_0(v0,v1) :- 
   Rule(299),
   years(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_293_inv_0_info_36->insert(RamDomain(36),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(56),RamDomain(59));
}();
/* END STRATUM 288 */
/* BEGIN STRATUM 289 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.37(37,"v0,v1","Rule","years,v2,v1","yearOfRelease,v2,v0","inv_0(v0,v1) :- 
   Rule(300),
   years(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_294_inv_0_info_37->insert(RamDomain(37),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(52),RamDomain(60));
}();
/* END STRATUM 289 */
/* BEGIN STRATUM 290 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.38(38,"v0,v1","Rule","years,v1,v2","yearOfRelease,v0,v2","inv_0(v0,v1) :- 
   Rule(301),
   years(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_295_inv_0_info_38->insert(RamDomain(38),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(50),RamDomain(61));
}();
/* END STRATUM 290 */
/* BEGIN STRATUM 291 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.39(39,"v0,v1","Rule","years,v0,v1","year,v0,v1","inv_0(v0,v1) :- 
   Rule(302),
   years(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_296_inv_0_info_39->insert(RamDomain(39),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(10),RamDomain(62));
}();
/* END STRATUM 291 */
/* BEGIN STRATUM 292 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.4(4,"v0,v1","Rule","yearOfRelease,v1,v0","inv_0(v0,v1) :- 
   Rule(267),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_297_inv_0_info_4->insert(RamDomain(4),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(9));
}();
/* END STRATUM 292 */
/* BEGIN STRATUM 293 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.40(40,"v0,v1","Rule","years,v0,v1","year,v1,v0","inv_0(v0,v1) :- 
   Rule(303),
   years(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_298_inv_0_info_40->insert(RamDomain(40),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(63));
}();
/* END STRATUM 293 */
/* BEGIN STRATUM 294 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.41(41,"v0,v1","Rule","years,v1,v0","year,v1,v0","inv_0(v0,v1) :- 
   Rule(304),
   years(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_299_inv_0_info_41->insert(RamDomain(41),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(12),RamDomain(64));
}();
/* END STRATUM 294 */
/* BEGIN STRATUM 295 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.42(42,"v0,v1","Rule","years,v1,v0","year,v0,v1","inv_0(v0,v1) :- 
   Rule(305),
   years(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_300_inv_0_info_42->insert(RamDomain(42),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(10),RamDomain(65));
}();
/* END STRATUM 295 */
/* BEGIN STRATUM 296 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.43(43,"v0,v1","Rule","years,v2,v1","year,v0,v2","inv_0(v0,v1) :- 
   Rule(306),
   years(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_301_inv_0_info_43->insert(RamDomain(43),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(66),RamDomain(67));
}();
/* END STRATUM 296 */
/* BEGIN STRATUM 297 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.44(44,"v0,v1","Rule","years,v1,v2","year,v2,v0","inv_0(v0,v1) :- 
   Rule(307),
   years(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_302_inv_0_info_44->insert(RamDomain(44),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(68),RamDomain(69));
}();
/* END STRATUM 297 */
/* BEGIN STRATUM 298 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.45(45,"v0,v1","Rule","years,v2,v0","year,v1,v2","inv_0(v0,v1) :- 
   Rule(308),
   years(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_303_inv_0_info_45->insert(RamDomain(45),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(70),RamDomain(71));
}();
/* END STRATUM 298 */
/* BEGIN STRATUM 299 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.46(46,"v0,v1","Rule","years,v2,v0","year,v2,v1","inv_0(v0,v1) :- 
   Rule(309),
   years(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_304_inv_0_info_46->insert(RamDomain(46),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(72),RamDomain(73));
}();
/* END STRATUM 299 */
/* BEGIN STRATUM 300 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.47(47,"v0,v1","Rule","years,v0,v2","year,v1,v2","inv_0(v0,v1) :- 
   Rule(310),
   years(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_305_inv_0_info_47->insert(RamDomain(47),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(70),RamDomain(74));
}();
/* END STRATUM 300 */
/* BEGIN STRATUM 301 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.48(48,"v0,v1","Rule","years,v0,v2","year,v2,v1","inv_0(v0,v1) :- 
   Rule(311),
   years(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_306_inv_0_info_48->insert(RamDomain(48),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(72),RamDomain(75));
}();
/* END STRATUM 301 */
/* BEGIN STRATUM 302 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.49(49,"v0,v1","Rule","years,v2,v1","year,v2,v0","inv_0(v0,v1) :- 
   Rule(312),
   years(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_307_inv_0_info_49->insert(RamDomain(49),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(68),RamDomain(76));
}();
/* END STRATUM 302 */
/* BEGIN STRATUM 303 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.5(5,"v0,v1","Rule","year,v0,v1","inv_0(v0,v1) :- 
   Rule(268),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_308_inv_0_info_5->insert(RamDomain(5),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(11));
}();
/* END STRATUM 303 */
/* BEGIN STRATUM 304 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.50(50,"v0,v1","Rule","years,v1,v2","year,v0,v2","inv_0(v0,v1) :- 
   Rule(313),
   years(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_309_inv_0_info_50->insert(RamDomain(50),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(66),RamDomain(77));
}();
/* END STRATUM 304 */
/* BEGIN STRATUM 305 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.51(51,"v0,v1","Rule","years,v0,v1","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(314),
   years(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_310_inv_0_info_51->insert(RamDomain(51),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(14),RamDomain(78));
}();
/* END STRATUM 305 */
/* BEGIN STRATUM 306 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.52(52,"v0,v1","Rule","years,v0,v1","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(315),
   years(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_311_inv_0_info_52->insert(RamDomain(52),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(16),RamDomain(79));
}();
/* END STRATUM 306 */
/* BEGIN STRATUM 307 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.53(53,"v0,v1","Rule","years,v1,v0","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(316),
   years(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_312_inv_0_info_53->insert(RamDomain(53),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(16),RamDomain(80));
}();
/* END STRATUM 307 */
/* BEGIN STRATUM 308 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.54(54,"v0,v1","Rule","years,v1,v0","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(317),
   years(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_313_inv_0_info_54->insert(RamDomain(54),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(14),RamDomain(81));
}();
/* END STRATUM 308 */
/* BEGIN STRATUM 309 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.55(55,"v0,v1","Rule","years,v2,v1","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(318),
   years(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_314_inv_0_info_55->insert(RamDomain(55),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(82),RamDomain(83));
}();
/* END STRATUM 309 */
/* BEGIN STRATUM 310 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.56(56,"v0,v1","Rule","years,v1,v2","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(319),
   years(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_315_inv_0_info_56->insert(RamDomain(56),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(84),RamDomain(85));
}();
/* END STRATUM 310 */
/* BEGIN STRATUM 311 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.57(57,"v0,v1","Rule","years,v2,v0","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(320),
   years(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_316_inv_0_info_57->insert(RamDomain(57),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(86),RamDomain(87));
}();
/* END STRATUM 311 */
/* BEGIN STRATUM 312 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.58(58,"v0,v1","Rule","years,v2,v0","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(321),
   years(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_317_inv_0_info_58->insert(RamDomain(58),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(88),RamDomain(89));
}();
/* END STRATUM 312 */
/* BEGIN STRATUM 313 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.59(59,"v0,v1","Rule","years,v0,v2","writer,v1,v2","inv_0(v0,v1) :- 
   Rule(322),
   years(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_318_inv_0_info_59->insert(RamDomain(59),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(86),RamDomain(90));
}();
/* END STRATUM 313 */
/* BEGIN STRATUM 314 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.6(6,"v0,v1","Rule","year,v1,v0","inv_0(v0,v1) :- 
   Rule(269),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_319_inv_0_info_6->insert(RamDomain(6),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(13));
}();
/* END STRATUM 314 */
/* BEGIN STRATUM 315 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.60(60,"v0,v1","Rule","years,v0,v2","writer,v2,v1","inv_0(v0,v1) :- 
   Rule(323),
   years(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_320_inv_0_info_60->insert(RamDomain(60),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(88),RamDomain(91));
}();
/* END STRATUM 315 */
/* BEGIN STRATUM 316 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.61(61,"v0,v1","Rule","years,v2,v1","writer,v2,v0","inv_0(v0,v1) :- 
   Rule(324),
   years(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_321_inv_0_info_61->insert(RamDomain(61),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(84),RamDomain(92));
}();
/* END STRATUM 316 */
/* BEGIN STRATUM 317 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.62(62,"v0,v1","Rule","years,v1,v2","writer,v0,v2","inv_0(v0,v1) :- 
   Rule(325),
   years(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_322_inv_0_info_62->insert(RamDomain(62),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(82),RamDomain(93));
}();
/* END STRATUM 317 */
/* BEGIN STRATUM 318 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.63(63,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(326),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_323_inv_0_info_63->insert(RamDomain(63),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(18),RamDomain(94));
}();
/* END STRATUM 318 */
/* BEGIN STRATUM 319 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.64(64,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(327),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_324_inv_0_info_64->insert(RamDomain(64),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(20),RamDomain(95));
}();
/* END STRATUM 319 */
/* BEGIN STRATUM 320 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.65(65,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v1,v0","inv_0(v0,v1) :- 
   Rule(328),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_325_inv_0_info_65->insert(RamDomain(65),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(20),RamDomain(96));
}();
/* END STRATUM 320 */
/* BEGIN STRATUM 321 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.66(66,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(329),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_326_inv_0_info_66->insert(RamDomain(66),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(18),RamDomain(97));
}();
/* END STRATUM 321 */
/* BEGIN STRATUM 322 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.67(67,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(330),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_327_inv_0_info_67->insert(RamDomain(67),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(98),RamDomain(99));
}();
/* END STRATUM 322 */
/* BEGIN STRATUM 323 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.68(68,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(331),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_328_inv_0_info_68->insert(RamDomain(68),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(100),RamDomain(101));
}();
/* END STRATUM 323 */
/* BEGIN STRATUM 324 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.69(69,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(332),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_329_inv_0_info_69->insert(RamDomain(69),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(102),RamDomain(103));
}();
/* END STRATUM 324 */
/* BEGIN STRATUM 325 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.7(7,"v0,v1","Rule","writer,v0,v1","inv_0(v0,v1) :- 
   Rule(270),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_330_inv_0_info_7->insert(RamDomain(7),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(15));
}();
/* END STRATUM 325 */
/* BEGIN STRATUM 326 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.70(70,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(333),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_331_inv_0_info_70->insert(RamDomain(70),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(104),RamDomain(105));
}();
/* END STRATUM 326 */
/* BEGIN STRATUM 327 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.71(71,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v1,v2","inv_0(v0,v1) :- 
   Rule(334),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_332_inv_0_info_71->insert(RamDomain(71),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(102),RamDomain(106));
}();
/* END STRATUM 327 */
/* BEGIN STRATUM 328 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.72(72,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v2,v1","inv_0(v0,v1) :- 
   Rule(335),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_333_inv_0_info_72->insert(RamDomain(72),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(104),RamDomain(107));
}();
/* END STRATUM 328 */
/* BEGIN STRATUM 329 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.73(73,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v2,v0","inv_0(v0,v1) :- 
   Rule(336),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_334_inv_0_info_73->insert(RamDomain(73),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(100),RamDomain(108));
}();
/* END STRATUM 329 */
/* BEGIN STRATUM 330 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.74(74,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v0,v2","inv_0(v0,v1) :- 
   Rule(337),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_335_inv_0_info_74->insert(RamDomain(74),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(98),RamDomain(109));
}();
/* END STRATUM 330 */
/* BEGIN STRATUM 331 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.75(75,"v0,v1","Rule","years,v0,v1","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(338),
   years(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_336_inv_0_info_75->insert(RamDomain(75),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(22),RamDomain(110));
}();
/* END STRATUM 331 */
/* BEGIN STRATUM 332 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.76(76,"v0,v1","Rule","years,v0,v1","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(339),
   years(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_337_inv_0_info_76->insert(RamDomain(76),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(24),RamDomain(111));
}();
/* END STRATUM 332 */
/* BEGIN STRATUM 333 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.77(77,"v0,v1","Rule","years,v1,v0","livesIn,v1,v0","inv_0(v0,v1) :- 
   Rule(340),
   years(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_338_inv_0_info_77->insert(RamDomain(77),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(24),RamDomain(112));
}();
/* END STRATUM 333 */
/* BEGIN STRATUM 334 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.78(78,"v0,v1","Rule","years,v1,v0","livesIn,v0,v1","inv_0(v0,v1) :- 
   Rule(341),
   years(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_339_inv_0_info_78->insert(RamDomain(78),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(22),RamDomain(113));
}();
/* END STRATUM 334 */
/* BEGIN STRATUM 335 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.79(79,"v0,v1","Rule","years,v2,v1","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(342),
   years(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_340_inv_0_info_79->insert(RamDomain(79),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(114),RamDomain(115));
}();
/* END STRATUM 335 */
/* BEGIN STRATUM 336 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.8(8,"v0,v1","Rule","writer,v1,v0","inv_0(v0,v1) :- 
   Rule(271),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_341_inv_0_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(17));
}();
/* END STRATUM 336 */
/* BEGIN STRATUM 337 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.80(80,"v0,v1","Rule","years,v1,v2","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(343),
   years(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_342_inv_0_info_80->insert(RamDomain(80),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(116),RamDomain(117));
}();
/* END STRATUM 337 */
/* BEGIN STRATUM 338 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.81(81,"v0,v1","Rule","years,v2,v0","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(344),
   years(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_343_inv_0_info_81->insert(RamDomain(81),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(118),RamDomain(119));
}();
/* END STRATUM 338 */
/* BEGIN STRATUM 339 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.82(82,"v0,v1","Rule","years,v2,v0","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(345),
   years(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_344_inv_0_info_82->insert(RamDomain(82),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(120),RamDomain(121));
}();
/* END STRATUM 339 */
/* BEGIN STRATUM 340 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.83(83,"v0,v1","Rule","years,v0,v2","livesIn,v1,v2","inv_0(v0,v1) :- 
   Rule(346),
   years(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_345_inv_0_info_83->insert(RamDomain(83),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(118),RamDomain(122));
}();
/* END STRATUM 340 */
/* BEGIN STRATUM 341 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.84(84,"v0,v1","Rule","years,v0,v2","livesIn,v2,v1","inv_0(v0,v1) :- 
   Rule(347),
   years(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_346_inv_0_info_84->insert(RamDomain(84),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(120),RamDomain(123));
}();
/* END STRATUM 341 */
/* BEGIN STRATUM 342 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.85(85,"v0,v1","Rule","years,v2,v1","livesIn,v2,v0","inv_0(v0,v1) :- 
   Rule(348),
   years(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_347_inv_0_info_85->insert(RamDomain(85),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(116),RamDomain(124));
}();
/* END STRATUM 342 */
/* BEGIN STRATUM 343 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.86(86,"v0,v1","Rule","years,v1,v2","livesIn,v0,v2","inv_0(v0,v1) :- 
   Rule(349),
   years(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_348_inv_0_info_86->insert(RamDomain(86),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(114),RamDomain(125));
}();
/* END STRATUM 343 */
/* BEGIN STRATUM 344 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.87(87,"v0,v1","Rule","years,v0,v1","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(350),
   years(v0,v1),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_349_inv_0_info_87->insert(RamDomain(87),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(26),RamDomain(126));
}();
/* END STRATUM 344 */
/* BEGIN STRATUM 345 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.88(88,"v0,v1","Rule","years,v0,v1","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(351),
   years(v0,v1),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_350_inv_0_info_88->insert(RamDomain(88),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(28),RamDomain(127));
}();
/* END STRATUM 345 */
/* BEGIN STRATUM 346 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.89(89,"v0,v1","Rule","years,v1,v0","inv_0,v1,v0","inv_0(v0,v1) :- 
   Rule(352),
   years(v1,v0),
   inv_0(v1,v0).").
in file  [0:0-0:0])_");
rel_351_inv_0_info_89->insert(RamDomain(89),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(28),RamDomain(128));
}();
/* END STRATUM 346 */
/* BEGIN STRATUM 347 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.9(9,"v0,v1","Rule","wikisourcelangProperty,v0,v1","inv_0(v0,v1) :- 
   Rule(272),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_352_inv_0_info_9->insert(RamDomain(9),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(19));
}();
/* END STRATUM 347 */
/* BEGIN STRATUM 348 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.90(90,"v0,v1","Rule","years,v1,v0","inv_0,v0,v1","inv_0(v0,v1) :- 
   Rule(353),
   years(v1,v0),
   inv_0(v0,v1).").
in file  [0:0-0:0])_");
rel_353_inv_0_info_90->insert(RamDomain(90),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(26),RamDomain(129));
}();
/* END STRATUM 348 */
/* BEGIN STRATUM 349 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.91(91,"v0,v1","Rule","years,v2,v1","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(354),
   years(v2,v1),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_354_inv_0_info_91->insert(RamDomain(91),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(130),RamDomain(131));
}();
/* END STRATUM 349 */
/* BEGIN STRATUM 350 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.92(92,"v0,v1","Rule","years,v1,v2","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(355),
   years(v1,v2),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_355_inv_0_info_92->insert(RamDomain(92),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(132),RamDomain(133));
}();
/* END STRATUM 350 */
/* BEGIN STRATUM 351 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.93(93,"v0,v1","Rule","years,v2,v0","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(356),
   years(v2,v0),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_356_inv_0_info_93->insert(RamDomain(93),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(134),RamDomain(135));
}();
/* END STRATUM 351 */
/* BEGIN STRATUM 352 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.94(94,"v0,v1","Rule","years,v2,v0","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(357),
   years(v2,v0),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_357_inv_0_info_94->insert(RamDomain(94),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(136),RamDomain(137));
}();
/* END STRATUM 352 */
/* BEGIN STRATUM 353 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.95(95,"v0,v1","Rule","years,v0,v2","inv_0,v1,v2","inv_0(v0,v1) :- 
   Rule(358),
   years(v0,v2),
   inv_0(v1,v2).").
in file  [0:0-0:0])_");
rel_358_inv_0_info_95->insert(RamDomain(95),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(134),RamDomain(138));
}();
/* END STRATUM 353 */
/* BEGIN STRATUM 354 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.96(96,"v0,v1","Rule","years,v0,v2","inv_0,v2,v1","inv_0(v0,v1) :- 
   Rule(359),
   years(v0,v2),
   inv_0(v2,v1).").
in file  [0:0-0:0])_");
rel_359_inv_0_info_96->insert(RamDomain(96),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(136),RamDomain(139));
}();
/* END STRATUM 354 */
/* BEGIN STRATUM 355 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.97(97,"v0,v1","Rule","years,v2,v1","inv_0,v2,v0","inv_0(v0,v1) :- 
   Rule(360),
   years(v2,v1),
   inv_0(v2,v0).").
in file  [0:0-0:0])_");
rel_360_inv_0_info_97->insert(RamDomain(97),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(132),RamDomain(140));
}();
/* END STRATUM 355 */
/* BEGIN STRATUM 356 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.98(98,"v0,v1","Rule","years,v1,v2","inv_0,v0,v2","inv_0(v0,v1) :- 
   Rule(361),
   years(v1,v2),
   inv_0(v0,v2).").
in file  [0:0-0:0])_");
rel_361_inv_0_info_98->insert(RamDomain(98),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(130),RamDomain(141));
}();
/* END STRATUM 356 */
/* BEGIN STRATUM 357 */
[&]() {
SignalHandler::instance()->setMsg(R"_(inv_0.@info.99(99,"v0,v1","Rule","yearOfRelease,v0,v1","inv_0(v0,v1) :- 
   Rule(362),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_362_inv_0_info_99->insert(RamDomain(99),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(142));
}();
/* END STRATUM 357 */
/* BEGIN STRATUM 358 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.1(1,"v0,v1","Rule","years,v0,v1","livesIn(v0,v1) :- 
   Rule(0),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_363_livesIn_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(394));
}();
/* END STRATUM 358 */
/* BEGIN STRATUM 359 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.10(10,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(9),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_364_livesIn_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(403));
}();
/* END STRATUM 359 */
/* BEGIN STRATUM 360 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.100(100,"v0,v1","Rule","yearOfRelease,v1,v0","year,v0,v1","livesIn(v0,v1) :- 
   Rule(99),
   yearOfRelease(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_365_livesIn_info_100->insert(RamDomain(100),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(10),RamDomain(493));
}();
/* END STRATUM 360 */
/* BEGIN STRATUM 361 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.101(101,"v0,v1","Rule","yearOfRelease,v2,v1","year,v0,v2","livesIn(v0,v1) :- 
   Rule(100),
   yearOfRelease(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_366_livesIn_info_101->insert(RamDomain(101),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(66),RamDomain(494));
}();
/* END STRATUM 361 */
/* BEGIN STRATUM 362 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.102(102,"v0,v1","Rule","yearOfRelease,v1,v2","year,v2,v0","livesIn(v0,v1) :- 
   Rule(101),
   yearOfRelease(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_367_livesIn_info_102->insert(RamDomain(102),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(68),RamDomain(495));
}();
/* END STRATUM 362 */
/* BEGIN STRATUM 363 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.103(103,"v0,v1","Rule","yearOfRelease,v2,v0","year,v1,v2","livesIn(v0,v1) :- 
   Rule(102),
   yearOfRelease(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_368_livesIn_info_103->insert(RamDomain(103),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(70),RamDomain(496));
}();
/* END STRATUM 363 */
/* BEGIN STRATUM 364 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.104(104,"v0,v1","Rule","yearOfRelease,v2,v0","year,v2,v1","livesIn(v0,v1) :- 
   Rule(103),
   yearOfRelease(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_369_livesIn_info_104->insert(RamDomain(104),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(72),RamDomain(497));
}();
/* END STRATUM 364 */
/* BEGIN STRATUM 365 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.105(105,"v0,v1","Rule","yearOfRelease,v0,v2","year,v1,v2","livesIn(v0,v1) :- 
   Rule(104),
   yearOfRelease(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_370_livesIn_info_105->insert(RamDomain(105),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(70),RamDomain(498));
}();
/* END STRATUM 365 */
/* BEGIN STRATUM 366 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.106(106,"v0,v1","Rule","yearOfRelease,v0,v2","year,v2,v1","livesIn(v0,v1) :- 
   Rule(105),
   yearOfRelease(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_371_livesIn_info_106->insert(RamDomain(106),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(72),RamDomain(499));
}();
/* END STRATUM 366 */
/* BEGIN STRATUM 367 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.107(107,"v0,v1","Rule","yearOfRelease,v2,v1","year,v2,v0","livesIn(v0,v1) :- 
   Rule(106),
   yearOfRelease(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_372_livesIn_info_107->insert(RamDomain(107),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(68),RamDomain(500));
}();
/* END STRATUM 367 */
/* BEGIN STRATUM 368 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.108(108,"v0,v1","Rule","yearOfRelease,v1,v2","year,v0,v2","livesIn(v0,v1) :- 
   Rule(107),
   yearOfRelease(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_373_livesIn_info_108->insert(RamDomain(108),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(66),RamDomain(501));
}();
/* END STRATUM 368 */
/* BEGIN STRATUM 369 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.109(109,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(108),
   yearOfRelease(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_374_livesIn_info_109->insert(RamDomain(109),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(14),RamDomain(502));
}();
/* END STRATUM 369 */
/* BEGIN STRATUM 370 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.11(11,"v0,v1","Rule","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(10),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_375_livesIn_info_11->insert(RamDomain(11),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(404));
}();
/* END STRATUM 370 */
/* BEGIN STRATUM 371 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.110(110,"v0,v1","Rule","yearOfRelease,v0,v1","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(109),
   yearOfRelease(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_376_livesIn_info_110->insert(RamDomain(110),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(16),RamDomain(503));
}();
/* END STRATUM 371 */
/* BEGIN STRATUM 372 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.111(111,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(110),
   yearOfRelease(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_377_livesIn_info_111->insert(RamDomain(111),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(16),RamDomain(504));
}();
/* END STRATUM 372 */
/* BEGIN STRATUM 373 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.112(112,"v0,v1","Rule","yearOfRelease,v1,v0","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(111),
   yearOfRelease(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_378_livesIn_info_112->insert(RamDomain(112),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(14),RamDomain(505));
}();
/* END STRATUM 373 */
/* BEGIN STRATUM 374 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.113(113,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(112),
   yearOfRelease(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_379_livesIn_info_113->insert(RamDomain(113),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(82),RamDomain(506));
}();
/* END STRATUM 374 */
/* BEGIN STRATUM 375 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.114(114,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(113),
   yearOfRelease(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_380_livesIn_info_114->insert(RamDomain(114),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(84),RamDomain(507));
}();
/* END STRATUM 375 */
/* BEGIN STRATUM 376 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.115(115,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(114),
   yearOfRelease(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_381_livesIn_info_115->insert(RamDomain(115),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(86),RamDomain(508));
}();
/* END STRATUM 376 */
/* BEGIN STRATUM 377 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.116(116,"v0,v1","Rule","yearOfRelease,v2,v0","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(115),
   yearOfRelease(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_382_livesIn_info_116->insert(RamDomain(116),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(88),RamDomain(509));
}();
/* END STRATUM 377 */
/* BEGIN STRATUM 378 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.117(117,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(116),
   yearOfRelease(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_383_livesIn_info_117->insert(RamDomain(117),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(86),RamDomain(510));
}();
/* END STRATUM 378 */
/* BEGIN STRATUM 379 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.118(118,"v0,v1","Rule","yearOfRelease,v0,v2","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(117),
   yearOfRelease(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_384_livesIn_info_118->insert(RamDomain(118),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(88),RamDomain(511));
}();
/* END STRATUM 379 */
/* BEGIN STRATUM 380 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.119(119,"v0,v1","Rule","yearOfRelease,v2,v1","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(118),
   yearOfRelease(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_385_livesIn_info_119->insert(RamDomain(119),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(84),RamDomain(512));
}();
/* END STRATUM 380 */
/* BEGIN STRATUM 381 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.12(12,"v0,v1","Rule","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(11),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_386_livesIn_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(405));
}();
/* END STRATUM 381 */
/* BEGIN STRATUM 382 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.120(120,"v0,v1","Rule","yearOfRelease,v1,v2","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(119),
   yearOfRelease(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_387_livesIn_info_120->insert(RamDomain(120),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(82),RamDomain(513));
}();
/* END STRATUM 382 */
/* BEGIN STRATUM 383 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.121(121,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(120),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_388_livesIn_info_121->insert(RamDomain(121),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(18),RamDomain(514));
}();
/* END STRATUM 383 */
/* BEGIN STRATUM 384 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.122(122,"v0,v1","Rule","yearOfRelease,v0,v1","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(121),
   yearOfRelease(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_389_livesIn_info_122->insert(RamDomain(122),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(20),RamDomain(515));
}();
/* END STRATUM 384 */
/* BEGIN STRATUM 385 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.123(123,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(122),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_390_livesIn_info_123->insert(RamDomain(123),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(20),RamDomain(516));
}();
/* END STRATUM 385 */
/* BEGIN STRATUM 386 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.124(124,"v0,v1","Rule","yearOfRelease,v1,v0","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(123),
   yearOfRelease(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_391_livesIn_info_124->insert(RamDomain(124),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(18),RamDomain(517));
}();
/* END STRATUM 386 */
/* BEGIN STRATUM 387 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.125(125,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(124),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_392_livesIn_info_125->insert(RamDomain(125),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(98),RamDomain(518));
}();
/* END STRATUM 387 */
/* BEGIN STRATUM 388 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.126(126,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(125),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_393_livesIn_info_126->insert(RamDomain(126),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(100),RamDomain(519));
}();
/* END STRATUM 388 */
/* BEGIN STRATUM 389 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.127(127,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(126),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_394_livesIn_info_127->insert(RamDomain(127),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(102),RamDomain(520));
}();
/* END STRATUM 389 */
/* BEGIN STRATUM 390 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.128(128,"v0,v1","Rule","yearOfRelease,v2,v0","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(127),
   yearOfRelease(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_395_livesIn_info_128->insert(RamDomain(128),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(104),RamDomain(521));
}();
/* END STRATUM 390 */
/* BEGIN STRATUM 391 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.129(129,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(128),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_396_livesIn_info_129->insert(RamDomain(129),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(102),RamDomain(522));
}();
/* END STRATUM 391 */
/* BEGIN STRATUM 392 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.13(13,"v0,v1","Rule","years,v0,v1","livesIn(v0,v1) :- 
   Rule(12),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_397_livesIn_info_13->insert(RamDomain(13),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(406));
}();
/* END STRATUM 392 */
/* BEGIN STRATUM 393 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.130(130,"v0,v1","Rule","yearOfRelease,v0,v2","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(129),
   yearOfRelease(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_398_livesIn_info_130->insert(RamDomain(130),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(104),RamDomain(523));
}();
/* END STRATUM 393 */
/* BEGIN STRATUM 394 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.131(131,"v0,v1","Rule","yearOfRelease,v2,v1","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(130),
   yearOfRelease(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_399_livesIn_info_131->insert(RamDomain(131),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(100),RamDomain(524));
}();
/* END STRATUM 394 */
/* BEGIN STRATUM 395 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.132(132,"v0,v1","Rule","yearOfRelease,v1,v2","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(131),
   yearOfRelease(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_400_livesIn_info_132->insert(RamDomain(132),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(98),RamDomain(525));
}();
/* END STRATUM 395 */
/* BEGIN STRATUM 396 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.133(133,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(132),
   yearOfRelease(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_401_livesIn_info_133->insert(RamDomain(133),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(22),RamDomain(526));
}();
/* END STRATUM 396 */
/* BEGIN STRATUM 397 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.134(134,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(133),
   yearOfRelease(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_402_livesIn_info_134->insert(RamDomain(134),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(24),RamDomain(527));
}();
/* END STRATUM 397 */
/* BEGIN STRATUM 398 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.135(135,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(134),
   yearOfRelease(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_403_livesIn_info_135->insert(RamDomain(135),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(24),RamDomain(528));
}();
/* END STRATUM 398 */
/* BEGIN STRATUM 399 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.136(136,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(135),
   yearOfRelease(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_404_livesIn_info_136->insert(RamDomain(136),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(22),RamDomain(529));
}();
/* END STRATUM 399 */
/* BEGIN STRATUM 400 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.137(137,"v0,v1","Rule","yearOfRelease,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(136),
   yearOfRelease(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_405_livesIn_info_137->insert(RamDomain(137),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(114),RamDomain(530));
}();
/* END STRATUM 400 */
/* BEGIN STRATUM 401 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.138(138,"v0,v1","Rule","yearOfRelease,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(137),
   yearOfRelease(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_406_livesIn_info_138->insert(RamDomain(138),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(116),RamDomain(531));
}();
/* END STRATUM 401 */
/* BEGIN STRATUM 402 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.139(139,"v0,v1","Rule","yearOfRelease,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(138),
   yearOfRelease(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_407_livesIn_info_139->insert(RamDomain(139),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(118),RamDomain(532));
}();
/* END STRATUM 402 */
/* BEGIN STRATUM 403 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.14(14,"v0,v1","Rule","years,v0,v1","years,v1,v0","livesIn(v0,v1) :- 
   Rule(13),
   years(v0,v1),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_408_livesIn_info_14->insert(RamDomain(14),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(4),RamDomain(407));
}();
/* END STRATUM 403 */
/* BEGIN STRATUM 404 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.140(140,"v0,v1","Rule","yearOfRelease,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(139),
   yearOfRelease(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_409_livesIn_info_140->insert(RamDomain(140),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(120),RamDomain(533));
}();
/* END STRATUM 404 */
/* BEGIN STRATUM 405 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.141(141,"v0,v1","Rule","yearOfRelease,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(140),
   yearOfRelease(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_410_livesIn_info_141->insert(RamDomain(141),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(118),RamDomain(534));
}();
/* END STRATUM 405 */
/* BEGIN STRATUM 406 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.142(142,"v0,v1","Rule","yearOfRelease,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(141),
   yearOfRelease(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_411_livesIn_info_142->insert(RamDomain(142),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(120),RamDomain(535));
}();
/* END STRATUM 406 */
/* BEGIN STRATUM 407 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.143(143,"v0,v1","Rule","yearOfRelease,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(142),
   yearOfRelease(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_412_livesIn_info_143->insert(RamDomain(143),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(116),RamDomain(536));
}();
/* END STRATUM 407 */
/* BEGIN STRATUM 408 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.144(144,"v0,v1","Rule","yearOfRelease,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(143),
   yearOfRelease(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_413_livesIn_info_144->insert(RamDomain(144),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(114),RamDomain(537));
}();
/* END STRATUM 408 */
/* BEGIN STRATUM 409 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.145(145,"v0,v1","Rule","year,v0,v1","livesIn(v0,v1) :- 
   Rule(144),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_414_livesIn_info_145->insert(RamDomain(145),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(538));
}();
/* END STRATUM 409 */
/* BEGIN STRATUM 410 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.146(146,"v0,v1","Rule","year,v0,v1","year,v1,v0","livesIn(v0,v1) :- 
   Rule(145),
   year(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_415_livesIn_info_146->insert(RamDomain(146),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(539));
}();
/* END STRATUM 410 */
/* BEGIN STRATUM 411 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.147(147,"v0,v1","Rule","year,v1,v0","livesIn(v0,v1) :- 
   Rule(146),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_416_livesIn_info_147->insert(RamDomain(147),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(540));
}();
/* END STRATUM 411 */
/* BEGIN STRATUM 412 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.148(148,"v0,v1","Rule","year,v1,v0","year,v0,v1","livesIn(v0,v1) :- 
   Rule(147),
   year(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_417_livesIn_info_148->insert(RamDomain(148),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(541));
}();
/* END STRATUM 412 */
/* BEGIN STRATUM 413 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.149(149,"v0,v1","Rule","year,v2,v1","year,v0,v2","livesIn(v0,v1) :- 
   Rule(148),
   year(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_418_livesIn_info_149->insert(RamDomain(149),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(66),RamDomain(542));
}();
/* END STRATUM 413 */
/* BEGIN STRATUM 414 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.15(15,"v0,v1","Rule","years,v1,v0","livesIn(v0,v1) :- 
   Rule(14),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_419_livesIn_info_15->insert(RamDomain(15),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(408));
}();
/* END STRATUM 414 */
/* BEGIN STRATUM 415 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.150(150,"v0,v1","Rule","year,v1,v2","year,v2,v0","livesIn(v0,v1) :- 
   Rule(149),
   year(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_420_livesIn_info_150->insert(RamDomain(150),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(68),RamDomain(543));
}();
/* END STRATUM 415 */
/* BEGIN STRATUM 416 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.151(151,"v0,v1","Rule","year,v2,v0","year,v1,v2","livesIn(v0,v1) :- 
   Rule(150),
   year(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_421_livesIn_info_151->insert(RamDomain(151),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(70),RamDomain(544));
}();
/* END STRATUM 416 */
/* BEGIN STRATUM 417 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.152(152,"v0,v1","Rule","year,v2,v0","year,v2,v1","livesIn(v0,v1) :- 
   Rule(151),
   year(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_422_livesIn_info_152->insert(RamDomain(152),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(72),RamDomain(545));
}();
/* END STRATUM 417 */
/* BEGIN STRATUM 418 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.153(153,"v0,v1","Rule","year,v0,v2","year,v1,v2","livesIn(v0,v1) :- 
   Rule(152),
   year(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_423_livesIn_info_153->insert(RamDomain(153),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(70),RamDomain(546));
}();
/* END STRATUM 418 */
/* BEGIN STRATUM 419 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.154(154,"v0,v1","Rule","year,v0,v2","year,v2,v1","livesIn(v0,v1) :- 
   Rule(153),
   year(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_424_livesIn_info_154->insert(RamDomain(154),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(72),RamDomain(547));
}();
/* END STRATUM 419 */
/* BEGIN STRATUM 420 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.155(155,"v0,v1","Rule","year,v2,v1","year,v2,v0","livesIn(v0,v1) :- 
   Rule(154),
   year(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_425_livesIn_info_155->insert(RamDomain(155),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(68),RamDomain(548));
}();
/* END STRATUM 420 */
/* BEGIN STRATUM 421 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.156(156,"v0,v1","Rule","year,v1,v2","year,v0,v2","livesIn(v0,v1) :- 
   Rule(155),
   year(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_426_livesIn_info_156->insert(RamDomain(156),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(66),RamDomain(549));
}();
/* END STRATUM 421 */
/* BEGIN STRATUM 422 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.157(157,"v0,v1","Rule","year,v0,v1","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(156),
   year(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_427_livesIn_info_157->insert(RamDomain(157),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(14),RamDomain(550));
}();
/* END STRATUM 422 */
/* BEGIN STRATUM 423 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.158(158,"v0,v1","Rule","year,v0,v1","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(157),
   year(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_428_livesIn_info_158->insert(RamDomain(158),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(551));
}();
/* END STRATUM 423 */
/* BEGIN STRATUM 424 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.159(159,"v0,v1","Rule","year,v1,v0","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(158),
   year(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_429_livesIn_info_159->insert(RamDomain(159),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(552));
}();
/* END STRATUM 424 */
/* BEGIN STRATUM 425 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.16(16,"v0,v1","Rule","years,v1,v0","years,v0,v1","livesIn(v0,v1) :- 
   Rule(15),
   years(v1,v0),
   years(v0,v1).").
in file  [0:0-0:0])_");
rel_430_livesIn_info_16->insert(RamDomain(16),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(2),RamDomain(409));
}();
/* END STRATUM 425 */
/* BEGIN STRATUM 426 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.160(160,"v0,v1","Rule","year,v1,v0","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(159),
   year(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_431_livesIn_info_160->insert(RamDomain(160),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(14),RamDomain(553));
}();
/* END STRATUM 426 */
/* BEGIN STRATUM 427 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.161(161,"v0,v1","Rule","year,v2,v1","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(160),
   year(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_432_livesIn_info_161->insert(RamDomain(161),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(82),RamDomain(554));
}();
/* END STRATUM 427 */
/* BEGIN STRATUM 428 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.162(162,"v0,v1","Rule","year,v1,v2","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(161),
   year(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_433_livesIn_info_162->insert(RamDomain(162),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(84),RamDomain(555));
}();
/* END STRATUM 428 */
/* BEGIN STRATUM 429 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.163(163,"v0,v1","Rule","year,v2,v0","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(162),
   year(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_434_livesIn_info_163->insert(RamDomain(163),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(86),RamDomain(556));
}();
/* END STRATUM 429 */
/* BEGIN STRATUM 430 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.164(164,"v0,v1","Rule","year,v2,v0","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(163),
   year(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_435_livesIn_info_164->insert(RamDomain(164),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(88),RamDomain(557));
}();
/* END STRATUM 430 */
/* BEGIN STRATUM 431 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.165(165,"v0,v1","Rule","year,v0,v2","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(164),
   year(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_436_livesIn_info_165->insert(RamDomain(165),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(86),RamDomain(558));
}();
/* END STRATUM 431 */
/* BEGIN STRATUM 432 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.166(166,"v0,v1","Rule","year,v0,v2","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(165),
   year(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_437_livesIn_info_166->insert(RamDomain(166),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(88),RamDomain(559));
}();
/* END STRATUM 432 */
/* BEGIN STRATUM 433 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.167(167,"v0,v1","Rule","year,v2,v1","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(166),
   year(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_438_livesIn_info_167->insert(RamDomain(167),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(84),RamDomain(560));
}();
/* END STRATUM 433 */
/* BEGIN STRATUM 434 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.168(168,"v0,v1","Rule","year,v1,v2","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(167),
   year(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_439_livesIn_info_168->insert(RamDomain(168),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(82),RamDomain(561));
}();
/* END STRATUM 434 */
/* BEGIN STRATUM 435 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.169(169,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(168),
   year(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_440_livesIn_info_169->insert(RamDomain(169),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(18),RamDomain(562));
}();
/* END STRATUM 435 */
/* BEGIN STRATUM 436 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.17(17,"v0,v1","Rule","years,v2,v1","years,v0,v2","livesIn(v0,v1) :- 
   Rule(16),
   years(v2,v1),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_441_livesIn_info_17->insert(RamDomain(17),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(35),RamDomain(410));
}();
/* END STRATUM 436 */
/* BEGIN STRATUM 437 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.170(170,"v0,v1","Rule","year,v0,v1","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(169),
   year(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_442_livesIn_info_170->insert(RamDomain(170),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(20),RamDomain(563));
}();
/* END STRATUM 437 */
/* BEGIN STRATUM 438 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.171(171,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(170),
   year(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_443_livesIn_info_171->insert(RamDomain(171),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(20),RamDomain(564));
}();
/* END STRATUM 438 */
/* BEGIN STRATUM 439 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.172(172,"v0,v1","Rule","year,v1,v0","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(171),
   year(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_444_livesIn_info_172->insert(RamDomain(172),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(18),RamDomain(565));
}();
/* END STRATUM 439 */
/* BEGIN STRATUM 440 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.173(173,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(172),
   year(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_445_livesIn_info_173->insert(RamDomain(173),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(98),RamDomain(566));
}();
/* END STRATUM 440 */
/* BEGIN STRATUM 441 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.174(174,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(173),
   year(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_446_livesIn_info_174->insert(RamDomain(174),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(100),RamDomain(567));
}();
/* END STRATUM 441 */
/* BEGIN STRATUM 442 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.175(175,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(174),
   year(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_447_livesIn_info_175->insert(RamDomain(175),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(102),RamDomain(568));
}();
/* END STRATUM 442 */
/* BEGIN STRATUM 443 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.176(176,"v0,v1","Rule","year,v2,v0","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(175),
   year(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_448_livesIn_info_176->insert(RamDomain(176),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(104),RamDomain(569));
}();
/* END STRATUM 443 */
/* BEGIN STRATUM 444 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.177(177,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(176),
   year(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_449_livesIn_info_177->insert(RamDomain(177),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(102),RamDomain(570));
}();
/* END STRATUM 444 */
/* BEGIN STRATUM 445 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.178(178,"v0,v1","Rule","year,v0,v2","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(177),
   year(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_450_livesIn_info_178->insert(RamDomain(178),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(104),RamDomain(571));
}();
/* END STRATUM 445 */
/* BEGIN STRATUM 446 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.179(179,"v0,v1","Rule","year,v2,v1","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(178),
   year(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_451_livesIn_info_179->insert(RamDomain(179),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(100),RamDomain(572));
}();
/* END STRATUM 446 */
/* BEGIN STRATUM 447 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.18(18,"v0,v1","Rule","years,v1,v2","years,v2,v0","livesIn(v0,v1) :- 
   Rule(17),
   years(v1,v2),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_452_livesIn_info_18->insert(RamDomain(18),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(38),RamDomain(411));
}();
/* END STRATUM 447 */
/* BEGIN STRATUM 448 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.180(180,"v0,v1","Rule","year,v1,v2","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(179),
   year(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_453_livesIn_info_180->insert(RamDomain(180),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(98),RamDomain(573));
}();
/* END STRATUM 448 */
/* BEGIN STRATUM 449 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.181(181,"v0,v1","Rule","year,v0,v1","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(180),
   year(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_454_livesIn_info_181->insert(RamDomain(181),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(22),RamDomain(574));
}();
/* END STRATUM 449 */
/* BEGIN STRATUM 450 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.182(182,"v0,v1","Rule","year,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(181),
   year(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_455_livesIn_info_182->insert(RamDomain(182),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(575));
}();
/* END STRATUM 450 */
/* BEGIN STRATUM 451 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.183(183,"v0,v1","Rule","year,v1,v0","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(182),
   year(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_456_livesIn_info_183->insert(RamDomain(183),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(24),RamDomain(576));
}();
/* END STRATUM 451 */
/* BEGIN STRATUM 452 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.184(184,"v0,v1","Rule","year,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(183),
   year(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_457_livesIn_info_184->insert(RamDomain(184),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(22),RamDomain(577));
}();
/* END STRATUM 452 */
/* BEGIN STRATUM 453 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.185(185,"v0,v1","Rule","year,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(184),
   year(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_458_livesIn_info_185->insert(RamDomain(185),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(114),RamDomain(578));
}();
/* END STRATUM 453 */
/* BEGIN STRATUM 454 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.186(186,"v0,v1","Rule","year,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(185),
   year(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_459_livesIn_info_186->insert(RamDomain(186),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(116),RamDomain(579));
}();
/* END STRATUM 454 */
/* BEGIN STRATUM 455 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.187(187,"v0,v1","Rule","year,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(186),
   year(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_460_livesIn_info_187->insert(RamDomain(187),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(118),RamDomain(580));
}();
/* END STRATUM 455 */
/* BEGIN STRATUM 456 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.188(188,"v0,v1","Rule","year,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(187),
   year(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_461_livesIn_info_188->insert(RamDomain(188),RamDomain(0),RamDomain(1),RamDomain(68),RamDomain(120),RamDomain(581));
}();
/* END STRATUM 456 */
/* BEGIN STRATUM 457 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.189(189,"v0,v1","Rule","year,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(188),
   year(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_462_livesIn_info_189->insert(RamDomain(189),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(118),RamDomain(582));
}();
/* END STRATUM 457 */
/* BEGIN STRATUM 458 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.19(19,"v0,v1","Rule","years,v2,v0","years,v1,v2","livesIn(v0,v1) :- 
   Rule(18),
   years(v2,v0),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_463_livesIn_info_19->insert(RamDomain(19),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(37),RamDomain(412));
}();
/* END STRATUM 458 */
/* BEGIN STRATUM 459 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.190(190,"v0,v1","Rule","year,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(189),
   year(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_464_livesIn_info_190->insert(RamDomain(190),RamDomain(0),RamDomain(1),RamDomain(66),RamDomain(120),RamDomain(583));
}();
/* END STRATUM 459 */
/* BEGIN STRATUM 460 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.191(191,"v0,v1","Rule","year,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(190),
   year(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_465_livesIn_info_191->insert(RamDomain(191),RamDomain(0),RamDomain(1),RamDomain(72),RamDomain(116),RamDomain(584));
}();
/* END STRATUM 460 */
/* BEGIN STRATUM 461 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.192(192,"v0,v1","Rule","year,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(191),
   year(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_466_livesIn_info_192->insert(RamDomain(192),RamDomain(0),RamDomain(1),RamDomain(70),RamDomain(114),RamDomain(585));
}();
/* END STRATUM 461 */
/* BEGIN STRATUM 462 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.193(193,"v0,v1","Rule","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(192),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_467_livesIn_info_193->insert(RamDomain(193),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(586));
}();
/* END STRATUM 462 */
/* BEGIN STRATUM 463 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.194(194,"v0,v1","Rule","writer,v0,v1","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(193),
   writer(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_468_livesIn_info_194->insert(RamDomain(194),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(16),RamDomain(587));
}();
/* END STRATUM 463 */
/* BEGIN STRATUM 464 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.195(195,"v0,v1","Rule","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(194),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_469_livesIn_info_195->insert(RamDomain(195),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(588));
}();
/* END STRATUM 464 */
/* BEGIN STRATUM 465 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.196(196,"v0,v1","Rule","writer,v1,v0","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(195),
   writer(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_470_livesIn_info_196->insert(RamDomain(196),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(14),RamDomain(589));
}();
/* END STRATUM 465 */
/* BEGIN STRATUM 466 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.197(197,"v0,v1","Rule","writer,v2,v1","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(196),
   writer(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_471_livesIn_info_197->insert(RamDomain(197),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(82),RamDomain(590));
}();
/* END STRATUM 466 */
/* BEGIN STRATUM 467 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.198(198,"v0,v1","Rule","writer,v1,v2","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(197),
   writer(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_472_livesIn_info_198->insert(RamDomain(198),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(84),RamDomain(591));
}();
/* END STRATUM 467 */
/* BEGIN STRATUM 468 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.199(199,"v0,v1","Rule","writer,v2,v0","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(198),
   writer(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_473_livesIn_info_199->insert(RamDomain(199),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(86),RamDomain(592));
}();
/* END STRATUM 468 */
/* BEGIN STRATUM 469 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.2(2,"v0,v1","Rule","years,v1,v0","livesIn(v0,v1) :- 
   Rule(1),
   years(v1,v0).").
in file  [0:0-0:0])_");
rel_474_livesIn_info_2->insert(RamDomain(2),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(395));
}();
/* END STRATUM 469 */
/* BEGIN STRATUM 470 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.20(20,"v0,v1","Rule","years,v2,v0","years,v2,v1","livesIn(v0,v1) :- 
   Rule(19),
   years(v2,v0),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_475_livesIn_info_20->insert(RamDomain(20),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(34),RamDomain(413));
}();
/* END STRATUM 470 */
/* BEGIN STRATUM 471 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.200(200,"v0,v1","Rule","writer,v2,v0","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(199),
   writer(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_476_livesIn_info_200->insert(RamDomain(200),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(88),RamDomain(593));
}();
/* END STRATUM 471 */
/* BEGIN STRATUM 472 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.201(201,"v0,v1","Rule","writer,v0,v2","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(200),
   writer(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_477_livesIn_info_201->insert(RamDomain(201),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(86),RamDomain(594));
}();
/* END STRATUM 472 */
/* BEGIN STRATUM 473 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.202(202,"v0,v1","Rule","writer,v0,v2","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(201),
   writer(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_478_livesIn_info_202->insert(RamDomain(202),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(88),RamDomain(595));
}();
/* END STRATUM 473 */
/* BEGIN STRATUM 474 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.203(203,"v0,v1","Rule","writer,v2,v1","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(202),
   writer(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_479_livesIn_info_203->insert(RamDomain(203),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(84),RamDomain(596));
}();
/* END STRATUM 474 */
/* BEGIN STRATUM 475 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.204(204,"v0,v1","Rule","writer,v1,v2","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(203),
   writer(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_480_livesIn_info_204->insert(RamDomain(204),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(82),RamDomain(597));
}();
/* END STRATUM 475 */
/* BEGIN STRATUM 476 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.205(205,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(204),
   writer(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_481_livesIn_info_205->insert(RamDomain(205),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(18),RamDomain(598));
}();
/* END STRATUM 476 */
/* BEGIN STRATUM 477 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.206(206,"v0,v1","Rule","writer,v0,v1","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(205),
   writer(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_482_livesIn_info_206->insert(RamDomain(206),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(20),RamDomain(599));
}();
/* END STRATUM 477 */
/* BEGIN STRATUM 478 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.207(207,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(206),
   writer(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_483_livesIn_info_207->insert(RamDomain(207),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(20),RamDomain(600));
}();
/* END STRATUM 478 */
/* BEGIN STRATUM 479 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.208(208,"v0,v1","Rule","writer,v1,v0","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(207),
   writer(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_484_livesIn_info_208->insert(RamDomain(208),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(18),RamDomain(601));
}();
/* END STRATUM 479 */
/* BEGIN STRATUM 480 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.209(209,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(208),
   writer(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_485_livesIn_info_209->insert(RamDomain(209),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(98),RamDomain(602));
}();
/* END STRATUM 480 */
/* BEGIN STRATUM 481 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.21(21,"v0,v1","Rule","years,v0,v2","years,v1,v2","livesIn(v0,v1) :- 
   Rule(20),
   years(v0,v2),
   years(v1,v2).").
in file  [0:0-0:0])_");
rel_486_livesIn_info_21->insert(RamDomain(21),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(37),RamDomain(414));
}();
/* END STRATUM 481 */
/* BEGIN STRATUM 482 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.210(210,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(209),
   writer(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_487_livesIn_info_210->insert(RamDomain(210),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(100),RamDomain(603));
}();
/* END STRATUM 482 */
/* BEGIN STRATUM 483 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.211(211,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(210),
   writer(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_488_livesIn_info_211->insert(RamDomain(211),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(102),RamDomain(604));
}();
/* END STRATUM 483 */
/* BEGIN STRATUM 484 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.212(212,"v0,v1","Rule","writer,v2,v0","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(211),
   writer(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_489_livesIn_info_212->insert(RamDomain(212),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(104),RamDomain(605));
}();
/* END STRATUM 484 */
/* BEGIN STRATUM 485 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.213(213,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(212),
   writer(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_490_livesIn_info_213->insert(RamDomain(213),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(102),RamDomain(606));
}();
/* END STRATUM 485 */
/* BEGIN STRATUM 486 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.214(214,"v0,v1","Rule","writer,v0,v2","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(213),
   writer(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_491_livesIn_info_214->insert(RamDomain(214),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(104),RamDomain(607));
}();
/* END STRATUM 486 */
/* BEGIN STRATUM 487 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.215(215,"v0,v1","Rule","writer,v2,v1","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(214),
   writer(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_492_livesIn_info_215->insert(RamDomain(215),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(100),RamDomain(608));
}();
/* END STRATUM 487 */
/* BEGIN STRATUM 488 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.216(216,"v0,v1","Rule","writer,v1,v2","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(215),
   writer(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_493_livesIn_info_216->insert(RamDomain(216),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(98),RamDomain(609));
}();
/* END STRATUM 488 */
/* BEGIN STRATUM 489 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.217(217,"v0,v1","Rule","writer,v0,v1","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(216),
   writer(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_494_livesIn_info_217->insert(RamDomain(217),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(22),RamDomain(610));
}();
/* END STRATUM 489 */
/* BEGIN STRATUM 490 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.218(218,"v0,v1","Rule","writer,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(217),
   writer(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_495_livesIn_info_218->insert(RamDomain(218),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(24),RamDomain(611));
}();
/* END STRATUM 490 */
/* BEGIN STRATUM 491 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.219(219,"v0,v1","Rule","writer,v1,v0","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(218),
   writer(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_496_livesIn_info_219->insert(RamDomain(219),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(24),RamDomain(612));
}();
/* END STRATUM 491 */
/* BEGIN STRATUM 492 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.22(22,"v0,v1","Rule","years,v0,v2","years,v2,v1","livesIn(v0,v1) :- 
   Rule(21),
   years(v0,v2),
   years(v2,v1).").
in file  [0:0-0:0])_");
rel_497_livesIn_info_22->insert(RamDomain(22),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(34),RamDomain(415));
}();
/* END STRATUM 492 */
/* BEGIN STRATUM 493 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.220(220,"v0,v1","Rule","writer,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(219),
   writer(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_498_livesIn_info_220->insert(RamDomain(220),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(22),RamDomain(613));
}();
/* END STRATUM 493 */
/* BEGIN STRATUM 494 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.221(221,"v0,v1","Rule","writer,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(220),
   writer(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_499_livesIn_info_221->insert(RamDomain(221),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(114),RamDomain(614));
}();
/* END STRATUM 494 */
/* BEGIN STRATUM 495 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.222(222,"v0,v1","Rule","writer,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(221),
   writer(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_500_livesIn_info_222->insert(RamDomain(222),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(116),RamDomain(615));
}();
/* END STRATUM 495 */
/* BEGIN STRATUM 496 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.223(223,"v0,v1","Rule","writer,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(222),
   writer(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_501_livesIn_info_223->insert(RamDomain(223),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(118),RamDomain(616));
}();
/* END STRATUM 496 */
/* BEGIN STRATUM 497 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.224(224,"v0,v1","Rule","writer,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(223),
   writer(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_502_livesIn_info_224->insert(RamDomain(224),RamDomain(0),RamDomain(1),RamDomain(84),RamDomain(120),RamDomain(617));
}();
/* END STRATUM 497 */
/* BEGIN STRATUM 498 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.225(225,"v0,v1","Rule","writer,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(224),
   writer(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_503_livesIn_info_225->insert(RamDomain(225),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(118),RamDomain(618));
}();
/* END STRATUM 498 */
/* BEGIN STRATUM 499 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.226(226,"v0,v1","Rule","writer,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(225),
   writer(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_504_livesIn_info_226->insert(RamDomain(226),RamDomain(0),RamDomain(1),RamDomain(82),RamDomain(120),RamDomain(619));
}();
/* END STRATUM 499 */
/* BEGIN STRATUM 500 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.227(227,"v0,v1","Rule","writer,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(226),
   writer(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_505_livesIn_info_227->insert(RamDomain(227),RamDomain(0),RamDomain(1),RamDomain(88),RamDomain(116),RamDomain(620));
}();
/* END STRATUM 500 */
/* BEGIN STRATUM 501 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.228(228,"v0,v1","Rule","writer,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(227),
   writer(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_506_livesIn_info_228->insert(RamDomain(228),RamDomain(0),RamDomain(1),RamDomain(86),RamDomain(114),RamDomain(621));
}();
/* END STRATUM 501 */
/* BEGIN STRATUM 502 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.229(229,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(228),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_507_livesIn_info_229->insert(RamDomain(229),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(622));
}();
/* END STRATUM 502 */
/* BEGIN STRATUM 503 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.23(23,"v0,v1","Rule","years,v2,v1","years,v2,v0","livesIn(v0,v1) :- 
   Rule(22),
   years(v2,v1),
   years(v2,v0).").
in file  [0:0-0:0])_");
rel_508_livesIn_info_23->insert(RamDomain(23),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(38),RamDomain(416));
}();
/* END STRATUM 503 */
/* BEGIN STRATUM 504 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.230(230,"v0,v1","Rule","wikisourcelangProperty,v0,v1","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(229),
   wikisourcelangProperty(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_509_livesIn_info_230->insert(RamDomain(230),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(20),RamDomain(623));
}();
/* END STRATUM 504 */
/* BEGIN STRATUM 505 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.231(231,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(230),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_510_livesIn_info_231->insert(RamDomain(231),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(624));
}();
/* END STRATUM 505 */
/* BEGIN STRATUM 506 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.232(232,"v0,v1","Rule","wikisourcelangProperty,v1,v0","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(231),
   wikisourcelangProperty(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_511_livesIn_info_232->insert(RamDomain(232),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(18),RamDomain(625));
}();
/* END STRATUM 506 */
/* BEGIN STRATUM 507 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.233(233,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(232),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_512_livesIn_info_233->insert(RamDomain(233),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(98),RamDomain(626));
}();
/* END STRATUM 507 */
/* BEGIN STRATUM 508 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.234(234,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(233),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_513_livesIn_info_234->insert(RamDomain(234),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(100),RamDomain(627));
}();
/* END STRATUM 508 */
/* BEGIN STRATUM 509 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.235(235,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(234),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_514_livesIn_info_235->insert(RamDomain(235),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(102),RamDomain(628));
}();
/* END STRATUM 509 */
/* BEGIN STRATUM 510 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.236(236,"v0,v1","Rule","wikisourcelangProperty,v2,v0","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(235),
   wikisourcelangProperty(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_515_livesIn_info_236->insert(RamDomain(236),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(104),RamDomain(629));
}();
/* END STRATUM 510 */
/* BEGIN STRATUM 511 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.237(237,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(236),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_516_livesIn_info_237->insert(RamDomain(237),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(102),RamDomain(630));
}();
/* END STRATUM 511 */
/* BEGIN STRATUM 512 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.238(238,"v0,v1","Rule","wikisourcelangProperty,v0,v2","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(237),
   wikisourcelangProperty(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_517_livesIn_info_238->insert(RamDomain(238),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(104),RamDomain(631));
}();
/* END STRATUM 512 */
/* BEGIN STRATUM 513 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.239(239,"v0,v1","Rule","wikisourcelangProperty,v2,v1","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(238),
   wikisourcelangProperty(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_518_livesIn_info_239->insert(RamDomain(239),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(100),RamDomain(632));
}();
/* END STRATUM 513 */
/* BEGIN STRATUM 514 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.24(24,"v0,v1","Rule","years,v1,v2","years,v0,v2","livesIn(v0,v1) :- 
   Rule(23),
   years(v1,v2),
   years(v0,v2).").
in file  [0:0-0:0])_");
rel_519_livesIn_info_24->insert(RamDomain(24),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(35),RamDomain(417));
}();
/* END STRATUM 514 */
/* BEGIN STRATUM 515 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.240(240,"v0,v1","Rule","wikisourcelangProperty,v1,v2","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(239),
   wikisourcelangProperty(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_520_livesIn_info_240->insert(RamDomain(240),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(98),RamDomain(633));
}();
/* END STRATUM 515 */
/* BEGIN STRATUM 516 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.241(241,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(240),
   wikisourcelangProperty(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_521_livesIn_info_241->insert(RamDomain(241),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(22),RamDomain(634));
}();
/* END STRATUM 516 */
/* BEGIN STRATUM 517 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.242(242,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(241),
   wikisourcelangProperty(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_522_livesIn_info_242->insert(RamDomain(242),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(24),RamDomain(635));
}();
/* END STRATUM 517 */
/* BEGIN STRATUM 518 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.243(243,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(242),
   wikisourcelangProperty(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_523_livesIn_info_243->insert(RamDomain(243),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(24),RamDomain(636));
}();
/* END STRATUM 518 */
/* BEGIN STRATUM 519 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.244(244,"v0,v1","Rule","wikisourcelangProperty,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(243),
   wikisourcelangProperty(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_524_livesIn_info_244->insert(RamDomain(244),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(22),RamDomain(637));
}();
/* END STRATUM 519 */
/* BEGIN STRATUM 520 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.245(245,"v0,v1","Rule","wikisourcelangProperty,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(244),
   wikisourcelangProperty(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_525_livesIn_info_245->insert(RamDomain(245),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(114),RamDomain(638));
}();
/* END STRATUM 520 */
/* BEGIN STRATUM 521 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.246(246,"v0,v1","Rule","wikisourcelangProperty,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(245),
   wikisourcelangProperty(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_526_livesIn_info_246->insert(RamDomain(246),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(116),RamDomain(639));
}();
/* END STRATUM 521 */
/* BEGIN STRATUM 522 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.247(247,"v0,v1","Rule","wikisourcelangProperty,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(246),
   wikisourcelangProperty(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_527_livesIn_info_247->insert(RamDomain(247),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(118),RamDomain(640));
}();
/* END STRATUM 522 */
/* BEGIN STRATUM 523 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.248(248,"v0,v1","Rule","wikisourcelangProperty,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(247),
   wikisourcelangProperty(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_528_livesIn_info_248->insert(RamDomain(248),RamDomain(0),RamDomain(1),RamDomain(100),RamDomain(120),RamDomain(641));
}();
/* END STRATUM 523 */
/* BEGIN STRATUM 524 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.249(249,"v0,v1","Rule","wikisourcelangProperty,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(248),
   wikisourcelangProperty(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_529_livesIn_info_249->insert(RamDomain(249),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(118),RamDomain(642));
}();
/* END STRATUM 524 */
/* BEGIN STRATUM 525 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.25(25,"v0,v1","Rule","years,v0,v1","yearOfRelease,v0,v1","livesIn(v0,v1) :- 
   Rule(24),
   years(v0,v1),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_530_livesIn_info_25->insert(RamDomain(25),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(418));
}();
/* END STRATUM 525 */
/* BEGIN STRATUM 526 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.250(250,"v0,v1","Rule","wikisourcelangProperty,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(249),
   wikisourcelangProperty(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_531_livesIn_info_250->insert(RamDomain(250),RamDomain(0),RamDomain(1),RamDomain(98),RamDomain(120),RamDomain(643));
}();
/* END STRATUM 526 */
/* BEGIN STRATUM 527 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.251(251,"v0,v1","Rule","wikisourcelangProperty,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(250),
   wikisourcelangProperty(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_532_livesIn_info_251->insert(RamDomain(251),RamDomain(0),RamDomain(1),RamDomain(104),RamDomain(116),RamDomain(644));
}();
/* END STRATUM 527 */
/* BEGIN STRATUM 528 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.252(252,"v0,v1","Rule","wikisourcelangProperty,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(251),
   wikisourcelangProperty(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_533_livesIn_info_252->insert(RamDomain(252),RamDomain(0),RamDomain(1),RamDomain(102),RamDomain(114),RamDomain(645));
}();
/* END STRATUM 528 */
/* BEGIN STRATUM 529 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.253(253,"v0,v1","Rule","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(252),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_534_livesIn_info_253->insert(RamDomain(253),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(646));
}();
/* END STRATUM 529 */
/* BEGIN STRATUM 530 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.254(254,"v0,v1","Rule","livesIn,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(253),
   livesIn(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_535_livesIn_info_254->insert(RamDomain(254),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(24),RamDomain(647));
}();
/* END STRATUM 530 */
/* BEGIN STRATUM 531 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.255(255,"v0,v1","Rule","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(254),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_536_livesIn_info_255->insert(RamDomain(255),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(648));
}();
/* END STRATUM 531 */
/* BEGIN STRATUM 532 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.256(256,"v0,v1","Rule","livesIn,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(255),
   livesIn(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_537_livesIn_info_256->insert(RamDomain(256),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(22),RamDomain(649));
}();
/* END STRATUM 532 */
/* BEGIN STRATUM 533 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.257(257,"v0,v1","Rule","livesIn,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(256),
   livesIn(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_538_livesIn_info_257->insert(RamDomain(257),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(114),RamDomain(650));
}();
/* END STRATUM 533 */
/* BEGIN STRATUM 534 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.258(258,"v0,v1","Rule","livesIn,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(257),
   livesIn(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_539_livesIn_info_258->insert(RamDomain(258),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(116),RamDomain(651));
}();
/* END STRATUM 534 */
/* BEGIN STRATUM 535 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.259(259,"v0,v1","Rule","livesIn,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(258),
   livesIn(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_540_livesIn_info_259->insert(RamDomain(259),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(118),RamDomain(652));
}();
/* END STRATUM 535 */
/* BEGIN STRATUM 536 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.26(26,"v0,v1","Rule","years,v0,v1","yearOfRelease,v1,v0","livesIn(v0,v1) :- 
   Rule(25),
   years(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_541_livesIn_info_26->insert(RamDomain(26),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(8),RamDomain(419));
}();
/* END STRATUM 536 */
/* BEGIN STRATUM 537 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.260(260,"v0,v1","Rule","livesIn,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(259),
   livesIn(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_542_livesIn_info_260->insert(RamDomain(260),RamDomain(0),RamDomain(1),RamDomain(116),RamDomain(120),RamDomain(653));
}();
/* END STRATUM 537 */
/* BEGIN STRATUM 538 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.261(261,"v0,v1","Rule","livesIn,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(260),
   livesIn(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_543_livesIn_info_261->insert(RamDomain(261),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(118),RamDomain(654));
}();
/* END STRATUM 538 */
/* BEGIN STRATUM 539 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.262(262,"v0,v1","Rule","livesIn,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(261),
   livesIn(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_544_livesIn_info_262->insert(RamDomain(262),RamDomain(0),RamDomain(1),RamDomain(114),RamDomain(120),RamDomain(655));
}();
/* END STRATUM 539 */
/* BEGIN STRATUM 540 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.263(263,"v0,v1","Rule","livesIn,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(262),
   livesIn(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_545_livesIn_info_263->insert(RamDomain(263),RamDomain(0),RamDomain(1),RamDomain(120),RamDomain(116),RamDomain(656));
}();
/* END STRATUM 540 */
/* BEGIN STRATUM 541 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.264(264,"v0,v1","Rule","livesIn,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(263),
   livesIn(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_546_livesIn_info_264->insert(RamDomain(264),RamDomain(0),RamDomain(1),RamDomain(118),RamDomain(114),RamDomain(657));
}();
/* END STRATUM 541 */
/* BEGIN STRATUM 542 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.27(27,"v0,v1","Rule","years,v1,v0","yearOfRelease,v1,v0","livesIn(v0,v1) :- 
   Rule(26),
   years(v1,v0),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_547_livesIn_info_27->insert(RamDomain(27),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(8),RamDomain(420));
}();
/* END STRATUM 542 */
/* BEGIN STRATUM 543 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.28(28,"v0,v1","Rule","years,v1,v0","yearOfRelease,v0,v1","livesIn(v0,v1) :- 
   Rule(27),
   years(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_548_livesIn_info_28->insert(RamDomain(28),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(6),RamDomain(421));
}();
/* END STRATUM 543 */
/* BEGIN STRATUM 544 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.29(29,"v0,v1","Rule","years,v2,v1","yearOfRelease,v0,v2","livesIn(v0,v1) :- 
   Rule(28),
   years(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_549_livesIn_info_29->insert(RamDomain(29),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(50),RamDomain(422));
}();
/* END STRATUM 544 */
/* BEGIN STRATUM 545 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.3(3,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn(v0,v1) :- 
   Rule(2),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_550_livesIn_info_3->insert(RamDomain(3),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(396));
}();
/* END STRATUM 545 */
/* BEGIN STRATUM 546 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.30(30,"v0,v1","Rule","years,v1,v2","yearOfRelease,v2,v0","livesIn(v0,v1) :- 
   Rule(29),
   years(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_551_livesIn_info_30->insert(RamDomain(30),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(52),RamDomain(423));
}();
/* END STRATUM 546 */
/* BEGIN STRATUM 547 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.31(31,"v0,v1","Rule","years,v2,v0","yearOfRelease,v1,v2","livesIn(v0,v1) :- 
   Rule(30),
   years(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_552_livesIn_info_31->insert(RamDomain(31),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(54),RamDomain(424));
}();
/* END STRATUM 547 */
/* BEGIN STRATUM 548 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.32(32,"v0,v1","Rule","years,v2,v0","yearOfRelease,v2,v1","livesIn(v0,v1) :- 
   Rule(31),
   years(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_553_livesIn_info_32->insert(RamDomain(32),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(56),RamDomain(425));
}();
/* END STRATUM 548 */
/* BEGIN STRATUM 549 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.33(33,"v0,v1","Rule","years,v0,v2","yearOfRelease,v1,v2","livesIn(v0,v1) :- 
   Rule(32),
   years(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_554_livesIn_info_33->insert(RamDomain(33),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(54),RamDomain(426));
}();
/* END STRATUM 549 */
/* BEGIN STRATUM 550 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.34(34,"v0,v1","Rule","years,v0,v2","yearOfRelease,v2,v1","livesIn(v0,v1) :- 
   Rule(33),
   years(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_555_livesIn_info_34->insert(RamDomain(34),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(56),RamDomain(427));
}();
/* END STRATUM 550 */
/* BEGIN STRATUM 551 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.35(35,"v0,v1","Rule","years,v2,v1","yearOfRelease,v2,v0","livesIn(v0,v1) :- 
   Rule(34),
   years(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_556_livesIn_info_35->insert(RamDomain(35),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(52),RamDomain(428));
}();
/* END STRATUM 551 */
/* BEGIN STRATUM 552 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.36(36,"v0,v1","Rule","years,v1,v2","yearOfRelease,v0,v2","livesIn(v0,v1) :- 
   Rule(35),
   years(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_557_livesIn_info_36->insert(RamDomain(36),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(50),RamDomain(429));
}();
/* END STRATUM 552 */
/* BEGIN STRATUM 553 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.37(37,"v0,v1","Rule","years,v0,v1","year,v0,v1","livesIn(v0,v1) :- 
   Rule(36),
   years(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_558_livesIn_info_37->insert(RamDomain(37),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(10),RamDomain(430));
}();
/* END STRATUM 553 */
/* BEGIN STRATUM 554 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.38(38,"v0,v1","Rule","years,v0,v1","year,v1,v0","livesIn(v0,v1) :- 
   Rule(37),
   years(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_559_livesIn_info_38->insert(RamDomain(38),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(431));
}();
/* END STRATUM 554 */
/* BEGIN STRATUM 555 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.39(39,"v0,v1","Rule","years,v1,v0","year,v1,v0","livesIn(v0,v1) :- 
   Rule(38),
   years(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_560_livesIn_info_39->insert(RamDomain(39),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(12),RamDomain(432));
}();
/* END STRATUM 555 */
/* BEGIN STRATUM 556 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.4(4,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn(v0,v1) :- 
   Rule(3),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_561_livesIn_info_4->insert(RamDomain(4),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(397));
}();
/* END STRATUM 556 */
/* BEGIN STRATUM 557 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.40(40,"v0,v1","Rule","years,v1,v0","year,v0,v1","livesIn(v0,v1) :- 
   Rule(39),
   years(v1,v0),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_562_livesIn_info_40->insert(RamDomain(40),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(10),RamDomain(433));
}();
/* END STRATUM 557 */
/* BEGIN STRATUM 558 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.41(41,"v0,v1","Rule","years,v2,v1","year,v0,v2","livesIn(v0,v1) :- 
   Rule(40),
   years(v2,v1),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_563_livesIn_info_41->insert(RamDomain(41),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(66),RamDomain(434));
}();
/* END STRATUM 558 */
/* BEGIN STRATUM 559 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.42(42,"v0,v1","Rule","years,v1,v2","year,v2,v0","livesIn(v0,v1) :- 
   Rule(41),
   years(v1,v2),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_564_livesIn_info_42->insert(RamDomain(42),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(68),RamDomain(435));
}();
/* END STRATUM 559 */
/* BEGIN STRATUM 560 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.43(43,"v0,v1","Rule","years,v2,v0","year,v1,v2","livesIn(v0,v1) :- 
   Rule(42),
   years(v2,v0),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_565_livesIn_info_43->insert(RamDomain(43),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(70),RamDomain(436));
}();
/* END STRATUM 560 */
/* BEGIN STRATUM 561 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.44(44,"v0,v1","Rule","years,v2,v0","year,v2,v1","livesIn(v0,v1) :- 
   Rule(43),
   years(v2,v0),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_566_livesIn_info_44->insert(RamDomain(44),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(72),RamDomain(437));
}();
/* END STRATUM 561 */
/* BEGIN STRATUM 562 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.45(45,"v0,v1","Rule","years,v0,v2","year,v1,v2","livesIn(v0,v1) :- 
   Rule(44),
   years(v0,v2),
   year(v1,v2).").
in file  [0:0-0:0])_");
rel_567_livesIn_info_45->insert(RamDomain(45),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(70),RamDomain(438));
}();
/* END STRATUM 562 */
/* BEGIN STRATUM 563 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.46(46,"v0,v1","Rule","years,v0,v2","year,v2,v1","livesIn(v0,v1) :- 
   Rule(45),
   years(v0,v2),
   year(v2,v1).").
in file  [0:0-0:0])_");
rel_568_livesIn_info_46->insert(RamDomain(46),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(72),RamDomain(439));
}();
/* END STRATUM 563 */
/* BEGIN STRATUM 564 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.47(47,"v0,v1","Rule","years,v2,v1","year,v2,v0","livesIn(v0,v1) :- 
   Rule(46),
   years(v2,v1),
   year(v2,v0).").
in file  [0:0-0:0])_");
rel_569_livesIn_info_47->insert(RamDomain(47),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(68),RamDomain(440));
}();
/* END STRATUM 564 */
/* BEGIN STRATUM 565 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.48(48,"v0,v1","Rule","years,v1,v2","year,v0,v2","livesIn(v0,v1) :- 
   Rule(47),
   years(v1,v2),
   year(v0,v2).").
in file  [0:0-0:0])_");
rel_570_livesIn_info_48->insert(RamDomain(48),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(66),RamDomain(441));
}();
/* END STRATUM 565 */
/* BEGIN STRATUM 566 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.49(49,"v0,v1","Rule","years,v0,v1","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(48),
   years(v0,v1),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_571_livesIn_info_49->insert(RamDomain(49),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(14),RamDomain(442));
}();
/* END STRATUM 566 */
/* BEGIN STRATUM 567 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.5(5,"v0,v1","Rule","year,v0,v1","livesIn(v0,v1) :- 
   Rule(4),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_572_livesIn_info_5->insert(RamDomain(5),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(398));
}();
/* END STRATUM 567 */
/* BEGIN STRATUM 568 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.50(50,"v0,v1","Rule","years,v0,v1","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(49),
   years(v0,v1),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_573_livesIn_info_50->insert(RamDomain(50),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(16),RamDomain(443));
}();
/* END STRATUM 568 */
/* BEGIN STRATUM 569 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.51(51,"v0,v1","Rule","years,v1,v0","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(50),
   years(v1,v0),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_574_livesIn_info_51->insert(RamDomain(51),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(16),RamDomain(444));
}();
/* END STRATUM 569 */
/* BEGIN STRATUM 570 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.52(52,"v0,v1","Rule","years,v1,v0","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(51),
   years(v1,v0),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_575_livesIn_info_52->insert(RamDomain(52),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(14),RamDomain(445));
}();
/* END STRATUM 570 */
/* BEGIN STRATUM 571 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.53(53,"v0,v1","Rule","years,v2,v1","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(52),
   years(v2,v1),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_576_livesIn_info_53->insert(RamDomain(53),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(82),RamDomain(446));
}();
/* END STRATUM 571 */
/* BEGIN STRATUM 572 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.54(54,"v0,v1","Rule","years,v1,v2","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(53),
   years(v1,v2),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_577_livesIn_info_54->insert(RamDomain(54),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(84),RamDomain(447));
}();
/* END STRATUM 572 */
/* BEGIN STRATUM 573 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.55(55,"v0,v1","Rule","years,v2,v0","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(54),
   years(v2,v0),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_578_livesIn_info_55->insert(RamDomain(55),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(86),RamDomain(448));
}();
/* END STRATUM 573 */
/* BEGIN STRATUM 574 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.56(56,"v0,v1","Rule","years,v2,v0","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(55),
   years(v2,v0),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_579_livesIn_info_56->insert(RamDomain(56),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(88),RamDomain(449));
}();
/* END STRATUM 574 */
/* BEGIN STRATUM 575 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.57(57,"v0,v1","Rule","years,v0,v2","writer,v1,v2","livesIn(v0,v1) :- 
   Rule(56),
   years(v0,v2),
   writer(v1,v2).").
in file  [0:0-0:0])_");
rel_580_livesIn_info_57->insert(RamDomain(57),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(86),RamDomain(450));
}();
/* END STRATUM 575 */
/* BEGIN STRATUM 576 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.58(58,"v0,v1","Rule","years,v0,v2","writer,v2,v1","livesIn(v0,v1) :- 
   Rule(57),
   years(v0,v2),
   writer(v2,v1).").
in file  [0:0-0:0])_");
rel_581_livesIn_info_58->insert(RamDomain(58),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(88),RamDomain(451));
}();
/* END STRATUM 576 */
/* BEGIN STRATUM 577 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.59(59,"v0,v1","Rule","years,v2,v1","writer,v2,v0","livesIn(v0,v1) :- 
   Rule(58),
   years(v2,v1),
   writer(v2,v0).").
in file  [0:0-0:0])_");
rel_582_livesIn_info_59->insert(RamDomain(59),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(84),RamDomain(452));
}();
/* END STRATUM 577 */
/* BEGIN STRATUM 578 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.6(6,"v0,v1","Rule","year,v1,v0","livesIn(v0,v1) :- 
   Rule(5),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_583_livesIn_info_6->insert(RamDomain(6),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(399));
}();
/* END STRATUM 578 */
/* BEGIN STRATUM 579 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.60(60,"v0,v1","Rule","years,v1,v2","writer,v0,v2","livesIn(v0,v1) :- 
   Rule(59),
   years(v1,v2),
   writer(v0,v2).").
in file  [0:0-0:0])_");
rel_584_livesIn_info_60->insert(RamDomain(60),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(82),RamDomain(453));
}();
/* END STRATUM 579 */
/* BEGIN STRATUM 580 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.61(61,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(60),
   years(v0,v1),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_585_livesIn_info_61->insert(RamDomain(61),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(18),RamDomain(454));
}();
/* END STRATUM 580 */
/* BEGIN STRATUM 581 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.62(62,"v0,v1","Rule","years,v0,v1","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(61),
   years(v0,v1),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_586_livesIn_info_62->insert(RamDomain(62),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(20),RamDomain(455));
}();
/* END STRATUM 581 */
/* BEGIN STRATUM 582 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.63(63,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v1,v0","livesIn(v0,v1) :- 
   Rule(62),
   years(v1,v0),
   wikisourcelangProperty(v1,v0).").
in file  [0:0-0:0])_");
rel_587_livesIn_info_63->insert(RamDomain(63),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(20),RamDomain(456));
}();
/* END STRATUM 582 */
/* BEGIN STRATUM 583 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.64(64,"v0,v1","Rule","years,v1,v0","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(63),
   years(v1,v0),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_588_livesIn_info_64->insert(RamDomain(64),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(18),RamDomain(457));
}();
/* END STRATUM 583 */
/* BEGIN STRATUM 584 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.65(65,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(64),
   years(v2,v1),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_589_livesIn_info_65->insert(RamDomain(65),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(98),RamDomain(458));
}();
/* END STRATUM 584 */
/* BEGIN STRATUM 585 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.66(66,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(65),
   years(v1,v2),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_590_livesIn_info_66->insert(RamDomain(66),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(100),RamDomain(459));
}();
/* END STRATUM 585 */
/* BEGIN STRATUM 586 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.67(67,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(66),
   years(v2,v0),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_591_livesIn_info_67->insert(RamDomain(67),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(102),RamDomain(460));
}();
/* END STRATUM 586 */
/* BEGIN STRATUM 587 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.68(68,"v0,v1","Rule","years,v2,v0","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(67),
   years(v2,v0),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_592_livesIn_info_68->insert(RamDomain(68),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(104),RamDomain(461));
}();
/* END STRATUM 587 */
/* BEGIN STRATUM 588 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.69(69,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v1,v2","livesIn(v0,v1) :- 
   Rule(68),
   years(v0,v2),
   wikisourcelangProperty(v1,v2).").
in file  [0:0-0:0])_");
rel_593_livesIn_info_69->insert(RamDomain(69),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(102),RamDomain(462));
}();
/* END STRATUM 588 */
/* BEGIN STRATUM 589 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.7(7,"v0,v1","Rule","writer,v0,v1","livesIn(v0,v1) :- 
   Rule(6),
   writer(v0,v1).").
in file  [0:0-0:0])_");
rel_594_livesIn_info_7->insert(RamDomain(7),RamDomain(0),RamDomain(1),RamDomain(14),RamDomain(400));
}();
/* END STRATUM 589 */
/* BEGIN STRATUM 590 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.70(70,"v0,v1","Rule","years,v0,v2","wikisourcelangProperty,v2,v1","livesIn(v0,v1) :- 
   Rule(69),
   years(v0,v2),
   wikisourcelangProperty(v2,v1).").
in file  [0:0-0:0])_");
rel_595_livesIn_info_70->insert(RamDomain(70),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(104),RamDomain(463));
}();
/* END STRATUM 590 */
/* BEGIN STRATUM 591 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.71(71,"v0,v1","Rule","years,v2,v1","wikisourcelangProperty,v2,v0","livesIn(v0,v1) :- 
   Rule(70),
   years(v2,v1),
   wikisourcelangProperty(v2,v0).").
in file  [0:0-0:0])_");
rel_596_livesIn_info_71->insert(RamDomain(71),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(100),RamDomain(464));
}();
/* END STRATUM 591 */
/* BEGIN STRATUM 592 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.72(72,"v0,v1","Rule","years,v1,v2","wikisourcelangProperty,v0,v2","livesIn(v0,v1) :- 
   Rule(71),
   years(v1,v2),
   wikisourcelangProperty(v0,v2).").
in file  [0:0-0:0])_");
rel_597_livesIn_info_72->insert(RamDomain(72),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(98),RamDomain(465));
}();
/* END STRATUM 592 */
/* BEGIN STRATUM 593 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.73(73,"v0,v1","Rule","years,v0,v1","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(72),
   years(v0,v1),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_598_livesIn_info_73->insert(RamDomain(73),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(22),RamDomain(466));
}();
/* END STRATUM 593 */
/* BEGIN STRATUM 594 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.74(74,"v0,v1","Rule","years,v0,v1","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(73),
   years(v0,v1),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_599_livesIn_info_74->insert(RamDomain(74),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(24),RamDomain(467));
}();
/* END STRATUM 594 */
/* BEGIN STRATUM 595 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.75(75,"v0,v1","Rule","years,v1,v0","livesIn,v1,v0","livesIn(v0,v1) :- 
   Rule(74),
   years(v1,v0),
   livesIn(v1,v0).").
in file  [0:0-0:0])_");
rel_600_livesIn_info_75->insert(RamDomain(75),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(24),RamDomain(468));
}();
/* END STRATUM 595 */
/* BEGIN STRATUM 596 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.76(76,"v0,v1","Rule","years,v1,v0","livesIn,v0,v1","livesIn(v0,v1) :- 
   Rule(75),
   years(v1,v0),
   livesIn(v0,v1).").
in file  [0:0-0:0])_");
rel_601_livesIn_info_76->insert(RamDomain(76),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(22),RamDomain(469));
}();
/* END STRATUM 596 */
/* BEGIN STRATUM 597 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.77(77,"v0,v1","Rule","years,v2,v1","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(76),
   years(v2,v1),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_602_livesIn_info_77->insert(RamDomain(77),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(114),RamDomain(470));
}();
/* END STRATUM 597 */
/* BEGIN STRATUM 598 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.78(78,"v0,v1","Rule","years,v1,v2","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(77),
   years(v1,v2),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_603_livesIn_info_78->insert(RamDomain(78),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(116),RamDomain(471));
}();
/* END STRATUM 598 */
/* BEGIN STRATUM 599 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.79(79,"v0,v1","Rule","years,v2,v0","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(78),
   years(v2,v0),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_604_livesIn_info_79->insert(RamDomain(79),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(118),RamDomain(472));
}();
/* END STRATUM 599 */
/* BEGIN STRATUM 600 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.8(8,"v0,v1","Rule","writer,v1,v0","livesIn(v0,v1) :- 
   Rule(7),
   writer(v1,v0).").
in file  [0:0-0:0])_");
rel_605_livesIn_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(401));
}();
/* END STRATUM 600 */
/* BEGIN STRATUM 601 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.80(80,"v0,v1","Rule","years,v2,v0","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(79),
   years(v2,v0),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_606_livesIn_info_80->insert(RamDomain(80),RamDomain(0),RamDomain(1),RamDomain(38),RamDomain(120),RamDomain(473));
}();
/* END STRATUM 601 */
/* BEGIN STRATUM 602 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.81(81,"v0,v1","Rule","years,v0,v2","livesIn,v1,v2","livesIn(v0,v1) :- 
   Rule(80),
   years(v0,v2),
   livesIn(v1,v2).").
in file  [0:0-0:0])_");
rel_607_livesIn_info_81->insert(RamDomain(81),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(118),RamDomain(474));
}();
/* END STRATUM 602 */
/* BEGIN STRATUM 603 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.82(82,"v0,v1","Rule","years,v0,v2","livesIn,v2,v1","livesIn(v0,v1) :- 
   Rule(81),
   years(v0,v2),
   livesIn(v2,v1).").
in file  [0:0-0:0])_");
rel_608_livesIn_info_82->insert(RamDomain(82),RamDomain(0),RamDomain(1),RamDomain(35),RamDomain(120),RamDomain(475));
}();
/* END STRATUM 603 */
/* BEGIN STRATUM 604 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.83(83,"v0,v1","Rule","years,v2,v1","livesIn,v2,v0","livesIn(v0,v1) :- 
   Rule(82),
   years(v2,v1),
   livesIn(v2,v0).").
in file  [0:0-0:0])_");
rel_609_livesIn_info_83->insert(RamDomain(83),RamDomain(0),RamDomain(1),RamDomain(34),RamDomain(116),RamDomain(476));
}();
/* END STRATUM 604 */
/* BEGIN STRATUM 605 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.84(84,"v0,v1","Rule","years,v1,v2","livesIn,v0,v2","livesIn(v0,v1) :- 
   Rule(83),
   years(v1,v2),
   livesIn(v0,v2).").
in file  [0:0-0:0])_");
rel_610_livesIn_info_84->insert(RamDomain(84),RamDomain(0),RamDomain(1),RamDomain(37),RamDomain(114),RamDomain(477));
}();
/* END STRATUM 605 */
/* BEGIN STRATUM 606 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.85(85,"v0,v1","Rule","yearOfRelease,v0,v1","livesIn(v0,v1) :- 
   Rule(84),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_611_livesIn_info_85->insert(RamDomain(85),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(478));
}();
/* END STRATUM 606 */
/* BEGIN STRATUM 607 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.86(86,"v0,v1","Rule","yearOfRelease,v0,v1","yearOfRelease,v1,v0","livesIn(v0,v1) :- 
   Rule(85),
   yearOfRelease(v0,v1),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_612_livesIn_info_86->insert(RamDomain(86),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(8),RamDomain(479));
}();
/* END STRATUM 607 */
/* BEGIN STRATUM 608 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.87(87,"v0,v1","Rule","yearOfRelease,v1,v0","livesIn(v0,v1) :- 
   Rule(86),
   yearOfRelease(v1,v0).").
in file  [0:0-0:0])_");
rel_613_livesIn_info_87->insert(RamDomain(87),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(480));
}();
/* END STRATUM 608 */
/* BEGIN STRATUM 609 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.88(88,"v0,v1","Rule","yearOfRelease,v1,v0","yearOfRelease,v0,v1","livesIn(v0,v1) :- 
   Rule(87),
   yearOfRelease(v1,v0),
   yearOfRelease(v0,v1).").
in file  [0:0-0:0])_");
rel_614_livesIn_info_88->insert(RamDomain(88),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(6),RamDomain(481));
}();
/* END STRATUM 609 */
/* BEGIN STRATUM 610 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.89(89,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v0,v2","livesIn(v0,v1) :- 
   Rule(88),
   yearOfRelease(v2,v1),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_615_livesIn_info_89->insert(RamDomain(89),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(50),RamDomain(482));
}();
/* END STRATUM 610 */
/* BEGIN STRATUM 611 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.9(9,"v0,v1","Rule","wikisourcelangProperty,v0,v1","livesIn(v0,v1) :- 
   Rule(8),
   wikisourcelangProperty(v0,v1).").
in file  [0:0-0:0])_");
rel_616_livesIn_info_9->insert(RamDomain(9),RamDomain(0),RamDomain(1),RamDomain(18),RamDomain(402));
}();
/* END STRATUM 611 */
/* BEGIN STRATUM 612 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.90(90,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v2,v0","livesIn(v0,v1) :- 
   Rule(89),
   yearOfRelease(v1,v2),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_617_livesIn_info_90->insert(RamDomain(90),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(52),RamDomain(483));
}();
/* END STRATUM 612 */
/* BEGIN STRATUM 613 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.91(91,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v1,v2","livesIn(v0,v1) :- 
   Rule(90),
   yearOfRelease(v2,v0),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_618_livesIn_info_91->insert(RamDomain(91),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(54),RamDomain(484));
}();
/* END STRATUM 613 */
/* BEGIN STRATUM 614 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.92(92,"v0,v1","Rule","yearOfRelease,v2,v0","yearOfRelease,v2,v1","livesIn(v0,v1) :- 
   Rule(91),
   yearOfRelease(v2,v0),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_619_livesIn_info_92->insert(RamDomain(92),RamDomain(0),RamDomain(1),RamDomain(52),RamDomain(56),RamDomain(485));
}();
/* END STRATUM 614 */
/* BEGIN STRATUM 615 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.93(93,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v1,v2","livesIn(v0,v1) :- 
   Rule(92),
   yearOfRelease(v0,v2),
   yearOfRelease(v1,v2).").
in file  [0:0-0:0])_");
rel_620_livesIn_info_93->insert(RamDomain(93),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(54),RamDomain(486));
}();
/* END STRATUM 615 */
/* BEGIN STRATUM 616 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.94(94,"v0,v1","Rule","yearOfRelease,v0,v2","yearOfRelease,v2,v1","livesIn(v0,v1) :- 
   Rule(93),
   yearOfRelease(v0,v2),
   yearOfRelease(v2,v1).").
in file  [0:0-0:0])_");
rel_621_livesIn_info_94->insert(RamDomain(94),RamDomain(0),RamDomain(1),RamDomain(50),RamDomain(56),RamDomain(487));
}();
/* END STRATUM 616 */
/* BEGIN STRATUM 617 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.95(95,"v0,v1","Rule","yearOfRelease,v2,v1","yearOfRelease,v2,v0","livesIn(v0,v1) :- 
   Rule(94),
   yearOfRelease(v2,v1),
   yearOfRelease(v2,v0).").
in file  [0:0-0:0])_");
rel_622_livesIn_info_95->insert(RamDomain(95),RamDomain(0),RamDomain(1),RamDomain(56),RamDomain(52),RamDomain(488));
}();
/* END STRATUM 617 */
/* BEGIN STRATUM 618 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.96(96,"v0,v1","Rule","yearOfRelease,v1,v2","yearOfRelease,v0,v2","livesIn(v0,v1) :- 
   Rule(95),
   yearOfRelease(v1,v2),
   yearOfRelease(v0,v2).").
in file  [0:0-0:0])_");
rel_623_livesIn_info_96->insert(RamDomain(96),RamDomain(0),RamDomain(1),RamDomain(54),RamDomain(50),RamDomain(489));
}();
/* END STRATUM 618 */
/* BEGIN STRATUM 619 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.97(97,"v0,v1","Rule","yearOfRelease,v0,v1","year,v0,v1","livesIn(v0,v1) :- 
   Rule(96),
   yearOfRelease(v0,v1),
   year(v0,v1).").
in file  [0:0-0:0])_");
rel_624_livesIn_info_97->insert(RamDomain(97),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(10),RamDomain(490));
}();
/* END STRATUM 619 */
/* BEGIN STRATUM 620 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.98(98,"v0,v1","Rule","yearOfRelease,v0,v1","year,v1,v0","livesIn(v0,v1) :- 
   Rule(97),
   yearOfRelease(v0,v1),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_625_livesIn_info_98->insert(RamDomain(98),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(491));
}();
/* END STRATUM 620 */
/* BEGIN STRATUM 621 */
[&]() {
SignalHandler::instance()->setMsg(R"_(livesIn.@info.99(99,"v0,v1","Rule","yearOfRelease,v1,v0","year,v1,v0","livesIn(v0,v1) :- 
   Rule(98),
   yearOfRelease(v1,v0),
   year(v1,v0).").
in file  [0:0-0:0])_");
rel_626_livesIn_info_99->insert(RamDomain(99),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(12),RamDomain(492));
}();
/* END STRATUM 621 */

// -- relation hint statistics --
if(isHintsProfilingEnabled()) {
std::cout << " -- Operation Hint Statistics --\n";
std::cout << "Relation rel_1_Rule:\n";
rel_1_Rule->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_2_wikisourcelangProperty:\n";
rel_2_wikisourcelangProperty->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_3_writer:\n";
rel_3_writer->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_4_year:\n";
rel_4_year->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_5_yearOfRelease:\n";
rel_5_yearOfRelease->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_6_years:\n";
rel_6_years->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_7_livesIn:\n";
rel_7_livesIn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_8_delta_livesIn:\n";
rel_8_delta_livesIn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_9_new_livesIn:\n";
rel_9_new_livesIn->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_10_inv_0:\n";
rel_10_inv_0->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_11_delta_inv_0:\n";
rel_11_delta_inv_0->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_12_new_inv_0:\n";
rel_12_new_inv_0->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_13_inv_0_info_1:\n";
rel_13_inv_0_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_14_inv_0_info_10:\n";
rel_14_inv_0_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_15_inv_0_info_100:\n";
rel_15_inv_0_info_100->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_16_inv_0_info_101:\n";
rel_16_inv_0_info_101->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_17_inv_0_info_102:\n";
rel_17_inv_0_info_102->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_18_inv_0_info_103:\n";
rel_18_inv_0_info_103->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_19_inv_0_info_104:\n";
rel_19_inv_0_info_104->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_20_inv_0_info_105:\n";
rel_20_inv_0_info_105->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_21_inv_0_info_106:\n";
rel_21_inv_0_info_106->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_22_inv_0_info_107:\n";
rel_22_inv_0_info_107->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_23_inv_0_info_108:\n";
rel_23_inv_0_info_108->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_24_inv_0_info_109:\n";
rel_24_inv_0_info_109->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_25_inv_0_info_11:\n";
rel_25_inv_0_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_26_inv_0_info_110:\n";
rel_26_inv_0_info_110->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_27_inv_0_info_111:\n";
rel_27_inv_0_info_111->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_28_inv_0_info_112:\n";
rel_28_inv_0_info_112->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_29_inv_0_info_113:\n";
rel_29_inv_0_info_113->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_30_inv_0_info_114:\n";
rel_30_inv_0_info_114->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_31_inv_0_info_115:\n";
rel_31_inv_0_info_115->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_32_inv_0_info_116:\n";
rel_32_inv_0_info_116->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_33_inv_0_info_117:\n";
rel_33_inv_0_info_117->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_34_inv_0_info_118:\n";
rel_34_inv_0_info_118->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_35_inv_0_info_119:\n";
rel_35_inv_0_info_119->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_36_inv_0_info_12:\n";
rel_36_inv_0_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_37_inv_0_info_120:\n";
rel_37_inv_0_info_120->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_38_inv_0_info_121:\n";
rel_38_inv_0_info_121->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_39_inv_0_info_122:\n";
rel_39_inv_0_info_122->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_40_inv_0_info_123:\n";
rel_40_inv_0_info_123->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_41_inv_0_info_124:\n";
rel_41_inv_0_info_124->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_42_inv_0_info_125:\n";
rel_42_inv_0_info_125->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_43_inv_0_info_126:\n";
rel_43_inv_0_info_126->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_44_inv_0_info_127:\n";
rel_44_inv_0_info_127->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_45_inv_0_info_128:\n";
rel_45_inv_0_info_128->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_46_inv_0_info_129:\n";
rel_46_inv_0_info_129->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_47_inv_0_info_13:\n";
rel_47_inv_0_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_48_inv_0_info_130:\n";
rel_48_inv_0_info_130->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_49_inv_0_info_131:\n";
rel_49_inv_0_info_131->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_50_inv_0_info_132:\n";
rel_50_inv_0_info_132->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_51_inv_0_info_133:\n";
rel_51_inv_0_info_133->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_52_inv_0_info_134:\n";
rel_52_inv_0_info_134->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_53_inv_0_info_135:\n";
rel_53_inv_0_info_135->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_54_inv_0_info_136:\n";
rel_54_inv_0_info_136->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_55_inv_0_info_137:\n";
rel_55_inv_0_info_137->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_56_inv_0_info_138:\n";
rel_56_inv_0_info_138->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_57_inv_0_info_139:\n";
rel_57_inv_0_info_139->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_58_inv_0_info_14:\n";
rel_58_inv_0_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_59_inv_0_info_140:\n";
rel_59_inv_0_info_140->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_60_inv_0_info_141:\n";
rel_60_inv_0_info_141->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_61_inv_0_info_142:\n";
rel_61_inv_0_info_142->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_62_inv_0_info_143:\n";
rel_62_inv_0_info_143->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_63_inv_0_info_144:\n";
rel_63_inv_0_info_144->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_64_inv_0_info_145:\n";
rel_64_inv_0_info_145->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_65_inv_0_info_146:\n";
rel_65_inv_0_info_146->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_66_inv_0_info_147:\n";
rel_66_inv_0_info_147->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_67_inv_0_info_148:\n";
rel_67_inv_0_info_148->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_68_inv_0_info_149:\n";
rel_68_inv_0_info_149->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_69_inv_0_info_15:\n";
rel_69_inv_0_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_70_inv_0_info_150:\n";
rel_70_inv_0_info_150->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_71_inv_0_info_151:\n";
rel_71_inv_0_info_151->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_72_inv_0_info_152:\n";
rel_72_inv_0_info_152->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_73_inv_0_info_153:\n";
rel_73_inv_0_info_153->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_74_inv_0_info_154:\n";
rel_74_inv_0_info_154->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_75_inv_0_info_155:\n";
rel_75_inv_0_info_155->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_76_inv_0_info_156:\n";
rel_76_inv_0_info_156->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_77_inv_0_info_157:\n";
rel_77_inv_0_info_157->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_78_inv_0_info_158:\n";
rel_78_inv_0_info_158->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_79_inv_0_info_159:\n";
rel_79_inv_0_info_159->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_80_inv_0_info_16:\n";
rel_80_inv_0_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_81_inv_0_info_160:\n";
rel_81_inv_0_info_160->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_82_inv_0_info_161:\n";
rel_82_inv_0_info_161->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_83_inv_0_info_162:\n";
rel_83_inv_0_info_162->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_84_inv_0_info_163:\n";
rel_84_inv_0_info_163->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_85_inv_0_info_164:\n";
rel_85_inv_0_info_164->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_86_inv_0_info_165:\n";
rel_86_inv_0_info_165->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_87_inv_0_info_166:\n";
rel_87_inv_0_info_166->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_88_inv_0_info_167:\n";
rel_88_inv_0_info_167->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_89_inv_0_info_168:\n";
rel_89_inv_0_info_168->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_90_inv_0_info_169:\n";
rel_90_inv_0_info_169->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_91_inv_0_info_17:\n";
rel_91_inv_0_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_92_inv_0_info_170:\n";
rel_92_inv_0_info_170->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_93_inv_0_info_171:\n";
rel_93_inv_0_info_171->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_94_inv_0_info_172:\n";
rel_94_inv_0_info_172->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_95_inv_0_info_173:\n";
rel_95_inv_0_info_173->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_96_inv_0_info_174:\n";
rel_96_inv_0_info_174->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_97_inv_0_info_175:\n";
rel_97_inv_0_info_175->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_98_inv_0_info_176:\n";
rel_98_inv_0_info_176->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_99_inv_0_info_177:\n";
rel_99_inv_0_info_177->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_100_inv_0_info_178:\n";
rel_100_inv_0_info_178->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_101_inv_0_info_179:\n";
rel_101_inv_0_info_179->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_102_inv_0_info_18:\n";
rel_102_inv_0_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_103_inv_0_info_180:\n";
rel_103_inv_0_info_180->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_104_inv_0_info_181:\n";
rel_104_inv_0_info_181->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_105_inv_0_info_182:\n";
rel_105_inv_0_info_182->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_106_inv_0_info_183:\n";
rel_106_inv_0_info_183->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_107_inv_0_info_184:\n";
rel_107_inv_0_info_184->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_108_inv_0_info_185:\n";
rel_108_inv_0_info_185->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_109_inv_0_info_186:\n";
rel_109_inv_0_info_186->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_110_inv_0_info_187:\n";
rel_110_inv_0_info_187->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_111_inv_0_info_188:\n";
rel_111_inv_0_info_188->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_112_inv_0_info_189:\n";
rel_112_inv_0_info_189->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_113_inv_0_info_19:\n";
rel_113_inv_0_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_114_inv_0_info_190:\n";
rel_114_inv_0_info_190->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_115_inv_0_info_191:\n";
rel_115_inv_0_info_191->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_116_inv_0_info_192:\n";
rel_116_inv_0_info_192->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_117_inv_0_info_193:\n";
rel_117_inv_0_info_193->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_118_inv_0_info_194:\n";
rel_118_inv_0_info_194->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_119_inv_0_info_195:\n";
rel_119_inv_0_info_195->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_120_inv_0_info_196:\n";
rel_120_inv_0_info_196->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_121_inv_0_info_197:\n";
rel_121_inv_0_info_197->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_122_inv_0_info_198:\n";
rel_122_inv_0_info_198->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_123_inv_0_info_199:\n";
rel_123_inv_0_info_199->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_124_inv_0_info_2:\n";
rel_124_inv_0_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_125_inv_0_info_20:\n";
rel_125_inv_0_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_126_inv_0_info_200:\n";
rel_126_inv_0_info_200->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_127_inv_0_info_201:\n";
rel_127_inv_0_info_201->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_128_inv_0_info_202:\n";
rel_128_inv_0_info_202->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_129_inv_0_info_203:\n";
rel_129_inv_0_info_203->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_130_inv_0_info_204:\n";
rel_130_inv_0_info_204->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_131_inv_0_info_205:\n";
rel_131_inv_0_info_205->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_132_inv_0_info_206:\n";
rel_132_inv_0_info_206->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_133_inv_0_info_207:\n";
rel_133_inv_0_info_207->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_134_inv_0_info_208:\n";
rel_134_inv_0_info_208->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_135_inv_0_info_209:\n";
rel_135_inv_0_info_209->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_136_inv_0_info_21:\n";
rel_136_inv_0_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_137_inv_0_info_210:\n";
rel_137_inv_0_info_210->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_138_inv_0_info_211:\n";
rel_138_inv_0_info_211->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_139_inv_0_info_212:\n";
rel_139_inv_0_info_212->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_140_inv_0_info_213:\n";
rel_140_inv_0_info_213->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_141_inv_0_info_214:\n";
rel_141_inv_0_info_214->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_142_inv_0_info_215:\n";
rel_142_inv_0_info_215->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_143_inv_0_info_216:\n";
rel_143_inv_0_info_216->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_144_inv_0_info_217:\n";
rel_144_inv_0_info_217->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_145_inv_0_info_218:\n";
rel_145_inv_0_info_218->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_146_inv_0_info_219:\n";
rel_146_inv_0_info_219->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_147_inv_0_info_22:\n";
rel_147_inv_0_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_148_inv_0_info_220:\n";
rel_148_inv_0_info_220->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_149_inv_0_info_221:\n";
rel_149_inv_0_info_221->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_150_inv_0_info_222:\n";
rel_150_inv_0_info_222->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_151_inv_0_info_223:\n";
rel_151_inv_0_info_223->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_152_inv_0_info_224:\n";
rel_152_inv_0_info_224->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_153_inv_0_info_225:\n";
rel_153_inv_0_info_225->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_154_inv_0_info_226:\n";
rel_154_inv_0_info_226->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_155_inv_0_info_227:\n";
rel_155_inv_0_info_227->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_156_inv_0_info_228:\n";
rel_156_inv_0_info_228->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_157_inv_0_info_229:\n";
rel_157_inv_0_info_229->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_158_inv_0_info_23:\n";
rel_158_inv_0_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_159_inv_0_info_230:\n";
rel_159_inv_0_info_230->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_160_inv_0_info_231:\n";
rel_160_inv_0_info_231->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_161_inv_0_info_232:\n";
rel_161_inv_0_info_232->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_162_inv_0_info_233:\n";
rel_162_inv_0_info_233->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_163_inv_0_info_234:\n";
rel_163_inv_0_info_234->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_164_inv_0_info_235:\n";
rel_164_inv_0_info_235->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_165_inv_0_info_236:\n";
rel_165_inv_0_info_236->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_166_inv_0_info_237:\n";
rel_166_inv_0_info_237->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_167_inv_0_info_238:\n";
rel_167_inv_0_info_238->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_168_inv_0_info_239:\n";
rel_168_inv_0_info_239->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_169_inv_0_info_24:\n";
rel_169_inv_0_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_170_inv_0_info_240:\n";
rel_170_inv_0_info_240->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_171_inv_0_info_241:\n";
rel_171_inv_0_info_241->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_172_inv_0_info_242:\n";
rel_172_inv_0_info_242->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_173_inv_0_info_243:\n";
rel_173_inv_0_info_243->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_174_inv_0_info_244:\n";
rel_174_inv_0_info_244->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_175_inv_0_info_245:\n";
rel_175_inv_0_info_245->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_176_inv_0_info_246:\n";
rel_176_inv_0_info_246->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_177_inv_0_info_247:\n";
rel_177_inv_0_info_247->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_178_inv_0_info_248:\n";
rel_178_inv_0_info_248->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_179_inv_0_info_249:\n";
rel_179_inv_0_info_249->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_180_inv_0_info_25:\n";
rel_180_inv_0_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_181_inv_0_info_250:\n";
rel_181_inv_0_info_250->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_182_inv_0_info_251:\n";
rel_182_inv_0_info_251->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_183_inv_0_info_252:\n";
rel_183_inv_0_info_252->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_184_inv_0_info_253:\n";
rel_184_inv_0_info_253->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_185_inv_0_info_254:\n";
rel_185_inv_0_info_254->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_186_inv_0_info_255:\n";
rel_186_inv_0_info_255->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_187_inv_0_info_256:\n";
rel_187_inv_0_info_256->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_188_inv_0_info_257:\n";
rel_188_inv_0_info_257->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_189_inv_0_info_258:\n";
rel_189_inv_0_info_258->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_190_inv_0_info_259:\n";
rel_190_inv_0_info_259->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_191_inv_0_info_26:\n";
rel_191_inv_0_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_192_inv_0_info_260:\n";
rel_192_inv_0_info_260->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_193_inv_0_info_261:\n";
rel_193_inv_0_info_261->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_194_inv_0_info_262:\n";
rel_194_inv_0_info_262->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_195_inv_0_info_263:\n";
rel_195_inv_0_info_263->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_196_inv_0_info_264:\n";
rel_196_inv_0_info_264->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_197_inv_0_info_265:\n";
rel_197_inv_0_info_265->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_198_inv_0_info_266:\n";
rel_198_inv_0_info_266->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_199_inv_0_info_267:\n";
rel_199_inv_0_info_267->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_200_inv_0_info_268:\n";
rel_200_inv_0_info_268->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_201_inv_0_info_269:\n";
rel_201_inv_0_info_269->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_202_inv_0_info_27:\n";
rel_202_inv_0_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_203_inv_0_info_270:\n";
rel_203_inv_0_info_270->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_204_inv_0_info_271:\n";
rel_204_inv_0_info_271->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_205_inv_0_info_272:\n";
rel_205_inv_0_info_272->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_206_inv_0_info_273:\n";
rel_206_inv_0_info_273->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_207_inv_0_info_274:\n";
rel_207_inv_0_info_274->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_208_inv_0_info_275:\n";
rel_208_inv_0_info_275->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_209_inv_0_info_276:\n";
rel_209_inv_0_info_276->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_210_inv_0_info_277:\n";
rel_210_inv_0_info_277->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_211_inv_0_info_278:\n";
rel_211_inv_0_info_278->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_212_inv_0_info_279:\n";
rel_212_inv_0_info_279->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_213_inv_0_info_28:\n";
rel_213_inv_0_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_214_inv_0_info_280:\n";
rel_214_inv_0_info_280->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_215_inv_0_info_281:\n";
rel_215_inv_0_info_281->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_216_inv_0_info_282:\n";
rel_216_inv_0_info_282->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_217_inv_0_info_283:\n";
rel_217_inv_0_info_283->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_218_inv_0_info_284:\n";
rel_218_inv_0_info_284->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_219_inv_0_info_285:\n";
rel_219_inv_0_info_285->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_220_inv_0_info_286:\n";
rel_220_inv_0_info_286->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_221_inv_0_info_287:\n";
rel_221_inv_0_info_287->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_222_inv_0_info_288:\n";
rel_222_inv_0_info_288->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_223_inv_0_info_289:\n";
rel_223_inv_0_info_289->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_224_inv_0_info_29:\n";
rel_224_inv_0_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_225_inv_0_info_290:\n";
rel_225_inv_0_info_290->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_226_inv_0_info_291:\n";
rel_226_inv_0_info_291->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_227_inv_0_info_292:\n";
rel_227_inv_0_info_292->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_228_inv_0_info_293:\n";
rel_228_inv_0_info_293->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_229_inv_0_info_294:\n";
rel_229_inv_0_info_294->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_230_inv_0_info_295:\n";
rel_230_inv_0_info_295->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_231_inv_0_info_296:\n";
rel_231_inv_0_info_296->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_232_inv_0_info_297:\n";
rel_232_inv_0_info_297->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_233_inv_0_info_298:\n";
rel_233_inv_0_info_298->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_234_inv_0_info_299:\n";
rel_234_inv_0_info_299->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_235_inv_0_info_3:\n";
rel_235_inv_0_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_236_inv_0_info_30:\n";
rel_236_inv_0_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_237_inv_0_info_300:\n";
rel_237_inv_0_info_300->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_238_inv_0_info_301:\n";
rel_238_inv_0_info_301->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_239_inv_0_info_302:\n";
rel_239_inv_0_info_302->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_240_inv_0_info_303:\n";
rel_240_inv_0_info_303->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_241_inv_0_info_304:\n";
rel_241_inv_0_info_304->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_242_inv_0_info_305:\n";
rel_242_inv_0_info_305->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_243_inv_0_info_306:\n";
rel_243_inv_0_info_306->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_244_inv_0_info_307:\n";
rel_244_inv_0_info_307->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_245_inv_0_info_308:\n";
rel_245_inv_0_info_308->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_246_inv_0_info_309:\n";
rel_246_inv_0_info_309->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_247_inv_0_info_31:\n";
rel_247_inv_0_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_248_inv_0_info_310:\n";
rel_248_inv_0_info_310->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_249_inv_0_info_311:\n";
rel_249_inv_0_info_311->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_250_inv_0_info_312:\n";
rel_250_inv_0_info_312->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_251_inv_0_info_313:\n";
rel_251_inv_0_info_313->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_252_inv_0_info_314:\n";
rel_252_inv_0_info_314->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_253_inv_0_info_315:\n";
rel_253_inv_0_info_315->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_254_inv_0_info_316:\n";
rel_254_inv_0_info_316->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_255_inv_0_info_317:\n";
rel_255_inv_0_info_317->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_256_inv_0_info_318:\n";
rel_256_inv_0_info_318->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_257_inv_0_info_319:\n";
rel_257_inv_0_info_319->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_258_inv_0_info_32:\n";
rel_258_inv_0_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_259_inv_0_info_320:\n";
rel_259_inv_0_info_320->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_260_inv_0_info_321:\n";
rel_260_inv_0_info_321->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_261_inv_0_info_322:\n";
rel_261_inv_0_info_322->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_262_inv_0_info_323:\n";
rel_262_inv_0_info_323->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_263_inv_0_info_324:\n";
rel_263_inv_0_info_324->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_264_inv_0_info_325:\n";
rel_264_inv_0_info_325->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_265_inv_0_info_326:\n";
rel_265_inv_0_info_326->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_266_inv_0_info_327:\n";
rel_266_inv_0_info_327->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_267_inv_0_info_328:\n";
rel_267_inv_0_info_328->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_268_inv_0_info_329:\n";
rel_268_inv_0_info_329->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_269_inv_0_info_33:\n";
rel_269_inv_0_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_270_inv_0_info_330:\n";
rel_270_inv_0_info_330->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_271_inv_0_info_331:\n";
rel_271_inv_0_info_331->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_272_inv_0_info_332:\n";
rel_272_inv_0_info_332->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_273_inv_0_info_333:\n";
rel_273_inv_0_info_333->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_274_inv_0_info_334:\n";
rel_274_inv_0_info_334->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_275_inv_0_info_335:\n";
rel_275_inv_0_info_335->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_276_inv_0_info_336:\n";
rel_276_inv_0_info_336->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_277_inv_0_info_337:\n";
rel_277_inv_0_info_337->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_278_inv_0_info_338:\n";
rel_278_inv_0_info_338->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_279_inv_0_info_339:\n";
rel_279_inv_0_info_339->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_280_inv_0_info_34:\n";
rel_280_inv_0_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_281_inv_0_info_340:\n";
rel_281_inv_0_info_340->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_282_inv_0_info_341:\n";
rel_282_inv_0_info_341->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_283_inv_0_info_342:\n";
rel_283_inv_0_info_342->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_284_inv_0_info_343:\n";
rel_284_inv_0_info_343->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_285_inv_0_info_344:\n";
rel_285_inv_0_info_344->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_286_inv_0_info_345:\n";
rel_286_inv_0_info_345->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_287_inv_0_info_346:\n";
rel_287_inv_0_info_346->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_288_inv_0_info_347:\n";
rel_288_inv_0_info_347->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_289_inv_0_info_348:\n";
rel_289_inv_0_info_348->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_290_inv_0_info_349:\n";
rel_290_inv_0_info_349->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_291_inv_0_info_35:\n";
rel_291_inv_0_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_292_inv_0_info_350:\n";
rel_292_inv_0_info_350->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_293_inv_0_info_36:\n";
rel_293_inv_0_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_294_inv_0_info_37:\n";
rel_294_inv_0_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_295_inv_0_info_38:\n";
rel_295_inv_0_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_296_inv_0_info_39:\n";
rel_296_inv_0_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_297_inv_0_info_4:\n";
rel_297_inv_0_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_298_inv_0_info_40:\n";
rel_298_inv_0_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_299_inv_0_info_41:\n";
rel_299_inv_0_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_300_inv_0_info_42:\n";
rel_300_inv_0_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_301_inv_0_info_43:\n";
rel_301_inv_0_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_302_inv_0_info_44:\n";
rel_302_inv_0_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_303_inv_0_info_45:\n";
rel_303_inv_0_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_304_inv_0_info_46:\n";
rel_304_inv_0_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_305_inv_0_info_47:\n";
rel_305_inv_0_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_306_inv_0_info_48:\n";
rel_306_inv_0_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_307_inv_0_info_49:\n";
rel_307_inv_0_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_308_inv_0_info_5:\n";
rel_308_inv_0_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_309_inv_0_info_50:\n";
rel_309_inv_0_info_50->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_310_inv_0_info_51:\n";
rel_310_inv_0_info_51->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_311_inv_0_info_52:\n";
rel_311_inv_0_info_52->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_312_inv_0_info_53:\n";
rel_312_inv_0_info_53->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_313_inv_0_info_54:\n";
rel_313_inv_0_info_54->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_314_inv_0_info_55:\n";
rel_314_inv_0_info_55->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_315_inv_0_info_56:\n";
rel_315_inv_0_info_56->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_316_inv_0_info_57:\n";
rel_316_inv_0_info_57->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_317_inv_0_info_58:\n";
rel_317_inv_0_info_58->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_318_inv_0_info_59:\n";
rel_318_inv_0_info_59->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_319_inv_0_info_6:\n";
rel_319_inv_0_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_320_inv_0_info_60:\n";
rel_320_inv_0_info_60->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_321_inv_0_info_61:\n";
rel_321_inv_0_info_61->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_322_inv_0_info_62:\n";
rel_322_inv_0_info_62->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_323_inv_0_info_63:\n";
rel_323_inv_0_info_63->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_324_inv_0_info_64:\n";
rel_324_inv_0_info_64->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_325_inv_0_info_65:\n";
rel_325_inv_0_info_65->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_326_inv_0_info_66:\n";
rel_326_inv_0_info_66->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_327_inv_0_info_67:\n";
rel_327_inv_0_info_67->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_328_inv_0_info_68:\n";
rel_328_inv_0_info_68->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_329_inv_0_info_69:\n";
rel_329_inv_0_info_69->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_330_inv_0_info_7:\n";
rel_330_inv_0_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_331_inv_0_info_70:\n";
rel_331_inv_0_info_70->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_332_inv_0_info_71:\n";
rel_332_inv_0_info_71->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_333_inv_0_info_72:\n";
rel_333_inv_0_info_72->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_334_inv_0_info_73:\n";
rel_334_inv_0_info_73->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_335_inv_0_info_74:\n";
rel_335_inv_0_info_74->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_336_inv_0_info_75:\n";
rel_336_inv_0_info_75->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_337_inv_0_info_76:\n";
rel_337_inv_0_info_76->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_338_inv_0_info_77:\n";
rel_338_inv_0_info_77->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_339_inv_0_info_78:\n";
rel_339_inv_0_info_78->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_340_inv_0_info_79:\n";
rel_340_inv_0_info_79->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_341_inv_0_info_8:\n";
rel_341_inv_0_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_342_inv_0_info_80:\n";
rel_342_inv_0_info_80->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_343_inv_0_info_81:\n";
rel_343_inv_0_info_81->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_344_inv_0_info_82:\n";
rel_344_inv_0_info_82->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_345_inv_0_info_83:\n";
rel_345_inv_0_info_83->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_346_inv_0_info_84:\n";
rel_346_inv_0_info_84->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_347_inv_0_info_85:\n";
rel_347_inv_0_info_85->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_348_inv_0_info_86:\n";
rel_348_inv_0_info_86->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_349_inv_0_info_87:\n";
rel_349_inv_0_info_87->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_350_inv_0_info_88:\n";
rel_350_inv_0_info_88->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_351_inv_0_info_89:\n";
rel_351_inv_0_info_89->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_352_inv_0_info_9:\n";
rel_352_inv_0_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_353_inv_0_info_90:\n";
rel_353_inv_0_info_90->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_354_inv_0_info_91:\n";
rel_354_inv_0_info_91->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_355_inv_0_info_92:\n";
rel_355_inv_0_info_92->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_356_inv_0_info_93:\n";
rel_356_inv_0_info_93->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_357_inv_0_info_94:\n";
rel_357_inv_0_info_94->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_358_inv_0_info_95:\n";
rel_358_inv_0_info_95->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_359_inv_0_info_96:\n";
rel_359_inv_0_info_96->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_360_inv_0_info_97:\n";
rel_360_inv_0_info_97->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_361_inv_0_info_98:\n";
rel_361_inv_0_info_98->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_362_inv_0_info_99:\n";
rel_362_inv_0_info_99->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_363_livesIn_info_1:\n";
rel_363_livesIn_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_364_livesIn_info_10:\n";
rel_364_livesIn_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_365_livesIn_info_100:\n";
rel_365_livesIn_info_100->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_366_livesIn_info_101:\n";
rel_366_livesIn_info_101->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_367_livesIn_info_102:\n";
rel_367_livesIn_info_102->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_368_livesIn_info_103:\n";
rel_368_livesIn_info_103->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_369_livesIn_info_104:\n";
rel_369_livesIn_info_104->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_370_livesIn_info_105:\n";
rel_370_livesIn_info_105->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_371_livesIn_info_106:\n";
rel_371_livesIn_info_106->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_372_livesIn_info_107:\n";
rel_372_livesIn_info_107->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_373_livesIn_info_108:\n";
rel_373_livesIn_info_108->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_374_livesIn_info_109:\n";
rel_374_livesIn_info_109->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_375_livesIn_info_11:\n";
rel_375_livesIn_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_376_livesIn_info_110:\n";
rel_376_livesIn_info_110->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_377_livesIn_info_111:\n";
rel_377_livesIn_info_111->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_378_livesIn_info_112:\n";
rel_378_livesIn_info_112->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_379_livesIn_info_113:\n";
rel_379_livesIn_info_113->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_380_livesIn_info_114:\n";
rel_380_livesIn_info_114->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_381_livesIn_info_115:\n";
rel_381_livesIn_info_115->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_382_livesIn_info_116:\n";
rel_382_livesIn_info_116->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_383_livesIn_info_117:\n";
rel_383_livesIn_info_117->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_384_livesIn_info_118:\n";
rel_384_livesIn_info_118->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_385_livesIn_info_119:\n";
rel_385_livesIn_info_119->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_386_livesIn_info_12:\n";
rel_386_livesIn_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_387_livesIn_info_120:\n";
rel_387_livesIn_info_120->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_388_livesIn_info_121:\n";
rel_388_livesIn_info_121->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_389_livesIn_info_122:\n";
rel_389_livesIn_info_122->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_390_livesIn_info_123:\n";
rel_390_livesIn_info_123->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_391_livesIn_info_124:\n";
rel_391_livesIn_info_124->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_392_livesIn_info_125:\n";
rel_392_livesIn_info_125->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_393_livesIn_info_126:\n";
rel_393_livesIn_info_126->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_394_livesIn_info_127:\n";
rel_394_livesIn_info_127->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_395_livesIn_info_128:\n";
rel_395_livesIn_info_128->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_396_livesIn_info_129:\n";
rel_396_livesIn_info_129->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_397_livesIn_info_13:\n";
rel_397_livesIn_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_398_livesIn_info_130:\n";
rel_398_livesIn_info_130->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_399_livesIn_info_131:\n";
rel_399_livesIn_info_131->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_400_livesIn_info_132:\n";
rel_400_livesIn_info_132->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_401_livesIn_info_133:\n";
rel_401_livesIn_info_133->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_402_livesIn_info_134:\n";
rel_402_livesIn_info_134->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_403_livesIn_info_135:\n";
rel_403_livesIn_info_135->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_404_livesIn_info_136:\n";
rel_404_livesIn_info_136->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_405_livesIn_info_137:\n";
rel_405_livesIn_info_137->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_406_livesIn_info_138:\n";
rel_406_livesIn_info_138->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_407_livesIn_info_139:\n";
rel_407_livesIn_info_139->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_408_livesIn_info_14:\n";
rel_408_livesIn_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_409_livesIn_info_140:\n";
rel_409_livesIn_info_140->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_410_livesIn_info_141:\n";
rel_410_livesIn_info_141->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_411_livesIn_info_142:\n";
rel_411_livesIn_info_142->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_412_livesIn_info_143:\n";
rel_412_livesIn_info_143->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_413_livesIn_info_144:\n";
rel_413_livesIn_info_144->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_414_livesIn_info_145:\n";
rel_414_livesIn_info_145->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_415_livesIn_info_146:\n";
rel_415_livesIn_info_146->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_416_livesIn_info_147:\n";
rel_416_livesIn_info_147->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_417_livesIn_info_148:\n";
rel_417_livesIn_info_148->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_418_livesIn_info_149:\n";
rel_418_livesIn_info_149->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_419_livesIn_info_15:\n";
rel_419_livesIn_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_420_livesIn_info_150:\n";
rel_420_livesIn_info_150->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_421_livesIn_info_151:\n";
rel_421_livesIn_info_151->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_422_livesIn_info_152:\n";
rel_422_livesIn_info_152->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_423_livesIn_info_153:\n";
rel_423_livesIn_info_153->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_424_livesIn_info_154:\n";
rel_424_livesIn_info_154->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_425_livesIn_info_155:\n";
rel_425_livesIn_info_155->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_426_livesIn_info_156:\n";
rel_426_livesIn_info_156->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_427_livesIn_info_157:\n";
rel_427_livesIn_info_157->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_428_livesIn_info_158:\n";
rel_428_livesIn_info_158->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_429_livesIn_info_159:\n";
rel_429_livesIn_info_159->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_430_livesIn_info_16:\n";
rel_430_livesIn_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_431_livesIn_info_160:\n";
rel_431_livesIn_info_160->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_432_livesIn_info_161:\n";
rel_432_livesIn_info_161->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_433_livesIn_info_162:\n";
rel_433_livesIn_info_162->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_434_livesIn_info_163:\n";
rel_434_livesIn_info_163->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_435_livesIn_info_164:\n";
rel_435_livesIn_info_164->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_436_livesIn_info_165:\n";
rel_436_livesIn_info_165->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_437_livesIn_info_166:\n";
rel_437_livesIn_info_166->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_438_livesIn_info_167:\n";
rel_438_livesIn_info_167->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_439_livesIn_info_168:\n";
rel_439_livesIn_info_168->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_440_livesIn_info_169:\n";
rel_440_livesIn_info_169->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_441_livesIn_info_17:\n";
rel_441_livesIn_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_442_livesIn_info_170:\n";
rel_442_livesIn_info_170->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_443_livesIn_info_171:\n";
rel_443_livesIn_info_171->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_444_livesIn_info_172:\n";
rel_444_livesIn_info_172->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_445_livesIn_info_173:\n";
rel_445_livesIn_info_173->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_446_livesIn_info_174:\n";
rel_446_livesIn_info_174->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_447_livesIn_info_175:\n";
rel_447_livesIn_info_175->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_448_livesIn_info_176:\n";
rel_448_livesIn_info_176->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_449_livesIn_info_177:\n";
rel_449_livesIn_info_177->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_450_livesIn_info_178:\n";
rel_450_livesIn_info_178->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_451_livesIn_info_179:\n";
rel_451_livesIn_info_179->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_452_livesIn_info_18:\n";
rel_452_livesIn_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_453_livesIn_info_180:\n";
rel_453_livesIn_info_180->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_454_livesIn_info_181:\n";
rel_454_livesIn_info_181->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_455_livesIn_info_182:\n";
rel_455_livesIn_info_182->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_456_livesIn_info_183:\n";
rel_456_livesIn_info_183->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_457_livesIn_info_184:\n";
rel_457_livesIn_info_184->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_458_livesIn_info_185:\n";
rel_458_livesIn_info_185->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_459_livesIn_info_186:\n";
rel_459_livesIn_info_186->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_460_livesIn_info_187:\n";
rel_460_livesIn_info_187->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_461_livesIn_info_188:\n";
rel_461_livesIn_info_188->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_462_livesIn_info_189:\n";
rel_462_livesIn_info_189->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_463_livesIn_info_19:\n";
rel_463_livesIn_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_464_livesIn_info_190:\n";
rel_464_livesIn_info_190->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_465_livesIn_info_191:\n";
rel_465_livesIn_info_191->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_466_livesIn_info_192:\n";
rel_466_livesIn_info_192->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_467_livesIn_info_193:\n";
rel_467_livesIn_info_193->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_468_livesIn_info_194:\n";
rel_468_livesIn_info_194->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_469_livesIn_info_195:\n";
rel_469_livesIn_info_195->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_470_livesIn_info_196:\n";
rel_470_livesIn_info_196->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_471_livesIn_info_197:\n";
rel_471_livesIn_info_197->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_472_livesIn_info_198:\n";
rel_472_livesIn_info_198->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_473_livesIn_info_199:\n";
rel_473_livesIn_info_199->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_474_livesIn_info_2:\n";
rel_474_livesIn_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_475_livesIn_info_20:\n";
rel_475_livesIn_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_476_livesIn_info_200:\n";
rel_476_livesIn_info_200->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_477_livesIn_info_201:\n";
rel_477_livesIn_info_201->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_478_livesIn_info_202:\n";
rel_478_livesIn_info_202->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_479_livesIn_info_203:\n";
rel_479_livesIn_info_203->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_480_livesIn_info_204:\n";
rel_480_livesIn_info_204->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_481_livesIn_info_205:\n";
rel_481_livesIn_info_205->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_482_livesIn_info_206:\n";
rel_482_livesIn_info_206->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_483_livesIn_info_207:\n";
rel_483_livesIn_info_207->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_484_livesIn_info_208:\n";
rel_484_livesIn_info_208->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_485_livesIn_info_209:\n";
rel_485_livesIn_info_209->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_486_livesIn_info_21:\n";
rel_486_livesIn_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_487_livesIn_info_210:\n";
rel_487_livesIn_info_210->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_488_livesIn_info_211:\n";
rel_488_livesIn_info_211->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_489_livesIn_info_212:\n";
rel_489_livesIn_info_212->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_490_livesIn_info_213:\n";
rel_490_livesIn_info_213->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_491_livesIn_info_214:\n";
rel_491_livesIn_info_214->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_492_livesIn_info_215:\n";
rel_492_livesIn_info_215->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_493_livesIn_info_216:\n";
rel_493_livesIn_info_216->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_494_livesIn_info_217:\n";
rel_494_livesIn_info_217->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_495_livesIn_info_218:\n";
rel_495_livesIn_info_218->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_496_livesIn_info_219:\n";
rel_496_livesIn_info_219->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_497_livesIn_info_22:\n";
rel_497_livesIn_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_498_livesIn_info_220:\n";
rel_498_livesIn_info_220->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_499_livesIn_info_221:\n";
rel_499_livesIn_info_221->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_500_livesIn_info_222:\n";
rel_500_livesIn_info_222->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_501_livesIn_info_223:\n";
rel_501_livesIn_info_223->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_502_livesIn_info_224:\n";
rel_502_livesIn_info_224->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_503_livesIn_info_225:\n";
rel_503_livesIn_info_225->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_504_livesIn_info_226:\n";
rel_504_livesIn_info_226->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_505_livesIn_info_227:\n";
rel_505_livesIn_info_227->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_506_livesIn_info_228:\n";
rel_506_livesIn_info_228->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_507_livesIn_info_229:\n";
rel_507_livesIn_info_229->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_508_livesIn_info_23:\n";
rel_508_livesIn_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_509_livesIn_info_230:\n";
rel_509_livesIn_info_230->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_510_livesIn_info_231:\n";
rel_510_livesIn_info_231->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_511_livesIn_info_232:\n";
rel_511_livesIn_info_232->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_512_livesIn_info_233:\n";
rel_512_livesIn_info_233->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_513_livesIn_info_234:\n";
rel_513_livesIn_info_234->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_514_livesIn_info_235:\n";
rel_514_livesIn_info_235->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_515_livesIn_info_236:\n";
rel_515_livesIn_info_236->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_516_livesIn_info_237:\n";
rel_516_livesIn_info_237->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_517_livesIn_info_238:\n";
rel_517_livesIn_info_238->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_518_livesIn_info_239:\n";
rel_518_livesIn_info_239->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_519_livesIn_info_24:\n";
rel_519_livesIn_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_520_livesIn_info_240:\n";
rel_520_livesIn_info_240->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_521_livesIn_info_241:\n";
rel_521_livesIn_info_241->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_522_livesIn_info_242:\n";
rel_522_livesIn_info_242->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_523_livesIn_info_243:\n";
rel_523_livesIn_info_243->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_524_livesIn_info_244:\n";
rel_524_livesIn_info_244->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_525_livesIn_info_245:\n";
rel_525_livesIn_info_245->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_526_livesIn_info_246:\n";
rel_526_livesIn_info_246->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_527_livesIn_info_247:\n";
rel_527_livesIn_info_247->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_528_livesIn_info_248:\n";
rel_528_livesIn_info_248->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_529_livesIn_info_249:\n";
rel_529_livesIn_info_249->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_530_livesIn_info_25:\n";
rel_530_livesIn_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_531_livesIn_info_250:\n";
rel_531_livesIn_info_250->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_532_livesIn_info_251:\n";
rel_532_livesIn_info_251->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_533_livesIn_info_252:\n";
rel_533_livesIn_info_252->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_534_livesIn_info_253:\n";
rel_534_livesIn_info_253->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_535_livesIn_info_254:\n";
rel_535_livesIn_info_254->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_536_livesIn_info_255:\n";
rel_536_livesIn_info_255->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_537_livesIn_info_256:\n";
rel_537_livesIn_info_256->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_538_livesIn_info_257:\n";
rel_538_livesIn_info_257->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_539_livesIn_info_258:\n";
rel_539_livesIn_info_258->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_540_livesIn_info_259:\n";
rel_540_livesIn_info_259->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_541_livesIn_info_26:\n";
rel_541_livesIn_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_542_livesIn_info_260:\n";
rel_542_livesIn_info_260->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_543_livesIn_info_261:\n";
rel_543_livesIn_info_261->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_544_livesIn_info_262:\n";
rel_544_livesIn_info_262->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_545_livesIn_info_263:\n";
rel_545_livesIn_info_263->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_546_livesIn_info_264:\n";
rel_546_livesIn_info_264->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_547_livesIn_info_27:\n";
rel_547_livesIn_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_548_livesIn_info_28:\n";
rel_548_livesIn_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_549_livesIn_info_29:\n";
rel_549_livesIn_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_550_livesIn_info_3:\n";
rel_550_livesIn_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_551_livesIn_info_30:\n";
rel_551_livesIn_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_552_livesIn_info_31:\n";
rel_552_livesIn_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_553_livesIn_info_32:\n";
rel_553_livesIn_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_554_livesIn_info_33:\n";
rel_554_livesIn_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_555_livesIn_info_34:\n";
rel_555_livesIn_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_556_livesIn_info_35:\n";
rel_556_livesIn_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_557_livesIn_info_36:\n";
rel_557_livesIn_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_558_livesIn_info_37:\n";
rel_558_livesIn_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_559_livesIn_info_38:\n";
rel_559_livesIn_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_560_livesIn_info_39:\n";
rel_560_livesIn_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_561_livesIn_info_4:\n";
rel_561_livesIn_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_562_livesIn_info_40:\n";
rel_562_livesIn_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_563_livesIn_info_41:\n";
rel_563_livesIn_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_564_livesIn_info_42:\n";
rel_564_livesIn_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_565_livesIn_info_43:\n";
rel_565_livesIn_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_566_livesIn_info_44:\n";
rel_566_livesIn_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_567_livesIn_info_45:\n";
rel_567_livesIn_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_568_livesIn_info_46:\n";
rel_568_livesIn_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_569_livesIn_info_47:\n";
rel_569_livesIn_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_570_livesIn_info_48:\n";
rel_570_livesIn_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_571_livesIn_info_49:\n";
rel_571_livesIn_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_572_livesIn_info_5:\n";
rel_572_livesIn_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_573_livesIn_info_50:\n";
rel_573_livesIn_info_50->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_574_livesIn_info_51:\n";
rel_574_livesIn_info_51->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_575_livesIn_info_52:\n";
rel_575_livesIn_info_52->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_576_livesIn_info_53:\n";
rel_576_livesIn_info_53->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_577_livesIn_info_54:\n";
rel_577_livesIn_info_54->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_578_livesIn_info_55:\n";
rel_578_livesIn_info_55->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_579_livesIn_info_56:\n";
rel_579_livesIn_info_56->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_580_livesIn_info_57:\n";
rel_580_livesIn_info_57->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_581_livesIn_info_58:\n";
rel_581_livesIn_info_58->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_582_livesIn_info_59:\n";
rel_582_livesIn_info_59->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_583_livesIn_info_6:\n";
rel_583_livesIn_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_584_livesIn_info_60:\n";
rel_584_livesIn_info_60->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_585_livesIn_info_61:\n";
rel_585_livesIn_info_61->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_586_livesIn_info_62:\n";
rel_586_livesIn_info_62->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_587_livesIn_info_63:\n";
rel_587_livesIn_info_63->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_588_livesIn_info_64:\n";
rel_588_livesIn_info_64->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_589_livesIn_info_65:\n";
rel_589_livesIn_info_65->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_590_livesIn_info_66:\n";
rel_590_livesIn_info_66->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_591_livesIn_info_67:\n";
rel_591_livesIn_info_67->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_592_livesIn_info_68:\n";
rel_592_livesIn_info_68->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_593_livesIn_info_69:\n";
rel_593_livesIn_info_69->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_594_livesIn_info_7:\n";
rel_594_livesIn_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_595_livesIn_info_70:\n";
rel_595_livesIn_info_70->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_596_livesIn_info_71:\n";
rel_596_livesIn_info_71->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_597_livesIn_info_72:\n";
rel_597_livesIn_info_72->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_598_livesIn_info_73:\n";
rel_598_livesIn_info_73->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_599_livesIn_info_74:\n";
rel_599_livesIn_info_74->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_600_livesIn_info_75:\n";
rel_600_livesIn_info_75->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_601_livesIn_info_76:\n";
rel_601_livesIn_info_76->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_602_livesIn_info_77:\n";
rel_602_livesIn_info_77->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_603_livesIn_info_78:\n";
rel_603_livesIn_info_78->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_604_livesIn_info_79:\n";
rel_604_livesIn_info_79->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_605_livesIn_info_8:\n";
rel_605_livesIn_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_606_livesIn_info_80:\n";
rel_606_livesIn_info_80->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_607_livesIn_info_81:\n";
rel_607_livesIn_info_81->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_608_livesIn_info_82:\n";
rel_608_livesIn_info_82->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_609_livesIn_info_83:\n";
rel_609_livesIn_info_83->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_610_livesIn_info_84:\n";
rel_610_livesIn_info_84->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_611_livesIn_info_85:\n";
rel_611_livesIn_info_85->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_612_livesIn_info_86:\n";
rel_612_livesIn_info_86->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_613_livesIn_info_87:\n";
rel_613_livesIn_info_87->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_614_livesIn_info_88:\n";
rel_614_livesIn_info_88->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_615_livesIn_info_89:\n";
rel_615_livesIn_info_89->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_616_livesIn_info_9:\n";
rel_616_livesIn_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_617_livesIn_info_90:\n";
rel_617_livesIn_info_90->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_618_livesIn_info_91:\n";
rel_618_livesIn_info_91->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_619_livesIn_info_92:\n";
rel_619_livesIn_info_92->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_620_livesIn_info_93:\n";
rel_620_livesIn_info_93->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_621_livesIn_info_94:\n";
rel_621_livesIn_info_94->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_622_livesIn_info_95:\n";
rel_622_livesIn_info_95->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_623_livesIn_info_96:\n";
rel_623_livesIn_info_96->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_624_livesIn_info_97:\n";
rel_624_livesIn_info_97->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_625_livesIn_info_98:\n";
rel_625_livesIn_info_98->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_626_livesIn_info_99:\n";
rel_626_livesIn_info_99->printHintStatistics(std::cout,"  ");
std::cout << "\n";
}
SignalHandler::instance()->reset();
}
public:
void run(size_t stratumIndex = (size_t) -1) override { runFunction(".", ".", stratumIndex, false); }
public:
void runAll(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1) override { runFunction(inputDirectory, outputDirectory, stratumIndex, true);
}
public:
void printAll(std::string outputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./livesIn.csv"},{"name","livesIn"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_7_livesIn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./inv_0.csv"},{"name","inv_0"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_inv_0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./wikisourcelangProperty.facts"},{"name","wikisourcelangProperty"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./writer.facts"},{"name","writer"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_writer);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./year.facts"},{"name","year"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_year);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./yearOfRelease.facts"},{"name","yearOfRelease"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_yearOfRelease);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./years.facts"},{"name","years"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_6_years);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
public:
void dumpInputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_1_Rule");
IOSystem::getInstance().getWriter(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->writeAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_2_wikisourcelangProperty");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_2_wikisourcelangProperty);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_3_writer");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_writer);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_4_year");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_4_year);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_5_yearOfRelease");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_5_yearOfRelease);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_6_years");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_years);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_7_livesIn");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_7_livesIn);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_10_inv_0");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_inv_0);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
SymbolTable& getSymbolTable() override {
return symTable;
}
void executeSubroutine(std::string name, const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) override {
if (name == "inv_0_100_negation_subproof") {
subproof_0(args, ret, err);
}
if (name == "inv_0_100_subproof") {
subproof_1(args, ret, err);
}
if (name == "inv_0_101_negation_subproof") {
subproof_2(args, ret, err);
}
if (name == "inv_0_101_subproof") {
subproof_3(args, ret, err);
}
if (name == "inv_0_102_negation_subproof") {
subproof_4(args, ret, err);
}
if (name == "inv_0_102_subproof") {
subproof_5(args, ret, err);
}
if (name == "inv_0_103_negation_subproof") {
subproof_6(args, ret, err);
}
if (name == "inv_0_103_subproof") {
subproof_7(args, ret, err);
}
if (name == "inv_0_104_negation_subproof") {
subproof_8(args, ret, err);
}
if (name == "inv_0_104_subproof") {
subproof_9(args, ret, err);
}
if (name == "inv_0_105_negation_subproof") {
subproof_10(args, ret, err);
}
if (name == "inv_0_105_subproof") {
subproof_11(args, ret, err);
}
if (name == "inv_0_106_negation_subproof") {
subproof_12(args, ret, err);
}
if (name == "inv_0_106_subproof") {
subproof_13(args, ret, err);
}
if (name == "inv_0_107_negation_subproof") {
subproof_14(args, ret, err);
}
if (name == "inv_0_107_subproof") {
subproof_15(args, ret, err);
}
if (name == "inv_0_108_negation_subproof") {
subproof_16(args, ret, err);
}
if (name == "inv_0_108_subproof") {
subproof_17(args, ret, err);
}
if (name == "inv_0_109_negation_subproof") {
subproof_18(args, ret, err);
}
if (name == "inv_0_109_subproof") {
subproof_19(args, ret, err);
}
if (name == "inv_0_10_negation_subproof") {
subproof_20(args, ret, err);
}
if (name == "inv_0_10_subproof") {
subproof_21(args, ret, err);
}
if (name == "inv_0_110_negation_subproof") {
subproof_22(args, ret, err);
}
if (name == "inv_0_110_subproof") {
subproof_23(args, ret, err);
}
if (name == "inv_0_111_negation_subproof") {
subproof_24(args, ret, err);
}
if (name == "inv_0_111_subproof") {
subproof_25(args, ret, err);
}
if (name == "inv_0_112_negation_subproof") {
subproof_26(args, ret, err);
}
if (name == "inv_0_112_subproof") {
subproof_27(args, ret, err);
}
if (name == "inv_0_113_negation_subproof") {
subproof_28(args, ret, err);
}
if (name == "inv_0_113_subproof") {
subproof_29(args, ret, err);
}
if (name == "inv_0_114_negation_subproof") {
subproof_30(args, ret, err);
}
if (name == "inv_0_114_subproof") {
subproof_31(args, ret, err);
}
if (name == "inv_0_115_negation_subproof") {
subproof_32(args, ret, err);
}
if (name == "inv_0_115_subproof") {
subproof_33(args, ret, err);
}
if (name == "inv_0_116_negation_subproof") {
subproof_34(args, ret, err);
}
if (name == "inv_0_116_subproof") {
subproof_35(args, ret, err);
}
if (name == "inv_0_117_negation_subproof") {
subproof_36(args, ret, err);
}
if (name == "inv_0_117_subproof") {
subproof_37(args, ret, err);
}
if (name == "inv_0_118_negation_subproof") {
subproof_38(args, ret, err);
}
if (name == "inv_0_118_subproof") {
subproof_39(args, ret, err);
}
if (name == "inv_0_119_negation_subproof") {
subproof_40(args, ret, err);
}
if (name == "inv_0_119_subproof") {
subproof_41(args, ret, err);
}
if (name == "inv_0_11_negation_subproof") {
subproof_42(args, ret, err);
}
if (name == "inv_0_11_subproof") {
subproof_43(args, ret, err);
}
if (name == "inv_0_120_negation_subproof") {
subproof_44(args, ret, err);
}
if (name == "inv_0_120_subproof") {
subproof_45(args, ret, err);
}
if (name == "inv_0_121_negation_subproof") {
subproof_46(args, ret, err);
}
if (name == "inv_0_121_subproof") {
subproof_47(args, ret, err);
}
if (name == "inv_0_122_negation_subproof") {
subproof_48(args, ret, err);
}
if (name == "inv_0_122_subproof") {
subproof_49(args, ret, err);
}
if (name == "inv_0_123_negation_subproof") {
subproof_50(args, ret, err);
}
if (name == "inv_0_123_subproof") {
subproof_51(args, ret, err);
}
if (name == "inv_0_124_negation_subproof") {
subproof_52(args, ret, err);
}
if (name == "inv_0_124_subproof") {
subproof_53(args, ret, err);
}
if (name == "inv_0_125_negation_subproof") {
subproof_54(args, ret, err);
}
if (name == "inv_0_125_subproof") {
subproof_55(args, ret, err);
}
if (name == "inv_0_126_negation_subproof") {
subproof_56(args, ret, err);
}
if (name == "inv_0_126_subproof") {
subproof_57(args, ret, err);
}
if (name == "inv_0_127_negation_subproof") {
subproof_58(args, ret, err);
}
if (name == "inv_0_127_subproof") {
subproof_59(args, ret, err);
}
if (name == "inv_0_128_negation_subproof") {
subproof_60(args, ret, err);
}
if (name == "inv_0_128_subproof") {
subproof_61(args, ret, err);
}
if (name == "inv_0_129_negation_subproof") {
subproof_62(args, ret, err);
}
if (name == "inv_0_129_subproof") {
subproof_63(args, ret, err);
}
if (name == "inv_0_12_negation_subproof") {
subproof_64(args, ret, err);
}
if (name == "inv_0_12_subproof") {
subproof_65(args, ret, err);
}
if (name == "inv_0_130_negation_subproof") {
subproof_66(args, ret, err);
}
if (name == "inv_0_130_subproof") {
subproof_67(args, ret, err);
}
if (name == "inv_0_131_negation_subproof") {
subproof_68(args, ret, err);
}
if (name == "inv_0_131_subproof") {
subproof_69(args, ret, err);
}
if (name == "inv_0_132_negation_subproof") {
subproof_70(args, ret, err);
}
if (name == "inv_0_132_subproof") {
subproof_71(args, ret, err);
}
if (name == "inv_0_133_negation_subproof") {
subproof_72(args, ret, err);
}
if (name == "inv_0_133_subproof") {
subproof_73(args, ret, err);
}
if (name == "inv_0_134_negation_subproof") {
subproof_74(args, ret, err);
}
if (name == "inv_0_134_subproof") {
subproof_75(args, ret, err);
}
if (name == "inv_0_135_negation_subproof") {
subproof_76(args, ret, err);
}
if (name == "inv_0_135_subproof") {
subproof_77(args, ret, err);
}
if (name == "inv_0_136_negation_subproof") {
subproof_78(args, ret, err);
}
if (name == "inv_0_136_subproof") {
subproof_79(args, ret, err);
}
if (name == "inv_0_137_negation_subproof") {
subproof_80(args, ret, err);
}
if (name == "inv_0_137_subproof") {
subproof_81(args, ret, err);
}
if (name == "inv_0_138_negation_subproof") {
subproof_82(args, ret, err);
}
if (name == "inv_0_138_subproof") {
subproof_83(args, ret, err);
}
if (name == "inv_0_139_negation_subproof") {
subproof_84(args, ret, err);
}
if (name == "inv_0_139_subproof") {
subproof_85(args, ret, err);
}
if (name == "inv_0_13_negation_subproof") {
subproof_86(args, ret, err);
}
if (name == "inv_0_13_subproof") {
subproof_87(args, ret, err);
}
if (name == "inv_0_140_negation_subproof") {
subproof_88(args, ret, err);
}
if (name == "inv_0_140_subproof") {
subproof_89(args, ret, err);
}
if (name == "inv_0_141_negation_subproof") {
subproof_90(args, ret, err);
}
if (name == "inv_0_141_subproof") {
subproof_91(args, ret, err);
}
if (name == "inv_0_142_negation_subproof") {
subproof_92(args, ret, err);
}
if (name == "inv_0_142_subproof") {
subproof_93(args, ret, err);
}
if (name == "inv_0_143_negation_subproof") {
subproof_94(args, ret, err);
}
if (name == "inv_0_143_subproof") {
subproof_95(args, ret, err);
}
if (name == "inv_0_144_negation_subproof") {
subproof_96(args, ret, err);
}
if (name == "inv_0_144_subproof") {
subproof_97(args, ret, err);
}
if (name == "inv_0_145_negation_subproof") {
subproof_98(args, ret, err);
}
if (name == "inv_0_145_subproof") {
subproof_99(args, ret, err);
}
if (name == "inv_0_146_negation_subproof") {
subproof_100(args, ret, err);
}
if (name == "inv_0_146_subproof") {
subproof_101(args, ret, err);
}
if (name == "inv_0_147_negation_subproof") {
subproof_102(args, ret, err);
}
if (name == "inv_0_147_subproof") {
subproof_103(args, ret, err);
}
if (name == "inv_0_148_negation_subproof") {
subproof_104(args, ret, err);
}
if (name == "inv_0_148_subproof") {
subproof_105(args, ret, err);
}
if (name == "inv_0_149_negation_subproof") {
subproof_106(args, ret, err);
}
if (name == "inv_0_149_subproof") {
subproof_107(args, ret, err);
}
if (name == "inv_0_14_negation_subproof") {
subproof_108(args, ret, err);
}
if (name == "inv_0_14_subproof") {
subproof_109(args, ret, err);
}
if (name == "inv_0_150_negation_subproof") {
subproof_110(args, ret, err);
}
if (name == "inv_0_150_subproof") {
subproof_111(args, ret, err);
}
if (name == "inv_0_151_negation_subproof") {
subproof_112(args, ret, err);
}
if (name == "inv_0_151_subproof") {
subproof_113(args, ret, err);
}
if (name == "inv_0_152_negation_subproof") {
subproof_114(args, ret, err);
}
if (name == "inv_0_152_subproof") {
subproof_115(args, ret, err);
}
if (name == "inv_0_153_negation_subproof") {
subproof_116(args, ret, err);
}
if (name == "inv_0_153_subproof") {
subproof_117(args, ret, err);
}
if (name == "inv_0_154_negation_subproof") {
subproof_118(args, ret, err);
}
if (name == "inv_0_154_subproof") {
subproof_119(args, ret, err);
}
if (name == "inv_0_155_negation_subproof") {
subproof_120(args, ret, err);
}
if (name == "inv_0_155_subproof") {
subproof_121(args, ret, err);
}
if (name == "inv_0_156_negation_subproof") {
subproof_122(args, ret, err);
}
if (name == "inv_0_156_subproof") {
subproof_123(args, ret, err);
}
if (name == "inv_0_157_negation_subproof") {
subproof_124(args, ret, err);
}
if (name == "inv_0_157_subproof") {
subproof_125(args, ret, err);
}
if (name == "inv_0_158_negation_subproof") {
subproof_126(args, ret, err);
}
if (name == "inv_0_158_subproof") {
subproof_127(args, ret, err);
}
if (name == "inv_0_159_negation_subproof") {
subproof_128(args, ret, err);
}
if (name == "inv_0_159_subproof") {
subproof_129(args, ret, err);
}
if (name == "inv_0_15_negation_subproof") {
subproof_130(args, ret, err);
}
if (name == "inv_0_15_subproof") {
subproof_131(args, ret, err);
}
if (name == "inv_0_160_negation_subproof") {
subproof_132(args, ret, err);
}
if (name == "inv_0_160_subproof") {
subproof_133(args, ret, err);
}
if (name == "inv_0_161_negation_subproof") {
subproof_134(args, ret, err);
}
if (name == "inv_0_161_subproof") {
subproof_135(args, ret, err);
}
if (name == "inv_0_162_negation_subproof") {
subproof_136(args, ret, err);
}
if (name == "inv_0_162_subproof") {
subproof_137(args, ret, err);
}
if (name == "inv_0_163_negation_subproof") {
subproof_138(args, ret, err);
}
if (name == "inv_0_163_subproof") {
subproof_139(args, ret, err);
}
if (name == "inv_0_164_negation_subproof") {
subproof_140(args, ret, err);
}
if (name == "inv_0_164_subproof") {
subproof_141(args, ret, err);
}
if (name == "inv_0_165_negation_subproof") {
subproof_142(args, ret, err);
}
if (name == "inv_0_165_subproof") {
subproof_143(args, ret, err);
}
if (name == "inv_0_166_negation_subproof") {
subproof_144(args, ret, err);
}
if (name == "inv_0_166_subproof") {
subproof_145(args, ret, err);
}
if (name == "inv_0_167_negation_subproof") {
subproof_146(args, ret, err);
}
if (name == "inv_0_167_subproof") {
subproof_147(args, ret, err);
}
if (name == "inv_0_168_negation_subproof") {
subproof_148(args, ret, err);
}
if (name == "inv_0_168_subproof") {
subproof_149(args, ret, err);
}
if (name == "inv_0_169_negation_subproof") {
subproof_150(args, ret, err);
}
if (name == "inv_0_169_subproof") {
subproof_151(args, ret, err);
}
if (name == "inv_0_16_negation_subproof") {
subproof_152(args, ret, err);
}
if (name == "inv_0_16_subproof") {
subproof_153(args, ret, err);
}
if (name == "inv_0_170_negation_subproof") {
subproof_154(args, ret, err);
}
if (name == "inv_0_170_subproof") {
subproof_155(args, ret, err);
}
if (name == "inv_0_171_negation_subproof") {
subproof_156(args, ret, err);
}
if (name == "inv_0_171_subproof") {
subproof_157(args, ret, err);
}
if (name == "inv_0_172_negation_subproof") {
subproof_158(args, ret, err);
}
if (name == "inv_0_172_subproof") {
subproof_159(args, ret, err);
}
if (name == "inv_0_173_negation_subproof") {
subproof_160(args, ret, err);
}
if (name == "inv_0_173_subproof") {
subproof_161(args, ret, err);
}
if (name == "inv_0_174_negation_subproof") {
subproof_162(args, ret, err);
}
if (name == "inv_0_174_subproof") {
subproof_163(args, ret, err);
}
if (name == "inv_0_175_negation_subproof") {
subproof_164(args, ret, err);
}
if (name == "inv_0_175_subproof") {
subproof_165(args, ret, err);
}
if (name == "inv_0_176_negation_subproof") {
subproof_166(args, ret, err);
}
if (name == "inv_0_176_subproof") {
subproof_167(args, ret, err);
}
if (name == "inv_0_177_negation_subproof") {
subproof_168(args, ret, err);
}
if (name == "inv_0_177_subproof") {
subproof_169(args, ret, err);
}
if (name == "inv_0_178_negation_subproof") {
subproof_170(args, ret, err);
}
if (name == "inv_0_178_subproof") {
subproof_171(args, ret, err);
}
if (name == "inv_0_179_negation_subproof") {
subproof_172(args, ret, err);
}
if (name == "inv_0_179_subproof") {
subproof_173(args, ret, err);
}
if (name == "inv_0_17_negation_subproof") {
subproof_174(args, ret, err);
}
if (name == "inv_0_17_subproof") {
subproof_175(args, ret, err);
}
if (name == "inv_0_180_negation_subproof") {
subproof_176(args, ret, err);
}
if (name == "inv_0_180_subproof") {
subproof_177(args, ret, err);
}
if (name == "inv_0_181_negation_subproof") {
subproof_178(args, ret, err);
}
if (name == "inv_0_181_subproof") {
subproof_179(args, ret, err);
}
if (name == "inv_0_182_negation_subproof") {
subproof_180(args, ret, err);
}
if (name == "inv_0_182_subproof") {
subproof_181(args, ret, err);
}
if (name == "inv_0_183_negation_subproof") {
subproof_182(args, ret, err);
}
if (name == "inv_0_183_subproof") {
subproof_183(args, ret, err);
}
if (name == "inv_0_184_negation_subproof") {
subproof_184(args, ret, err);
}
if (name == "inv_0_184_subproof") {
subproof_185(args, ret, err);
}
if (name == "inv_0_185_negation_subproof") {
subproof_186(args, ret, err);
}
if (name == "inv_0_185_subproof") {
subproof_187(args, ret, err);
}
if (name == "inv_0_186_negation_subproof") {
subproof_188(args, ret, err);
}
if (name == "inv_0_186_subproof") {
subproof_189(args, ret, err);
}
if (name == "inv_0_187_negation_subproof") {
subproof_190(args, ret, err);
}
if (name == "inv_0_187_subproof") {
subproof_191(args, ret, err);
}
if (name == "inv_0_188_negation_subproof") {
subproof_192(args, ret, err);
}
if (name == "inv_0_188_subproof") {
subproof_193(args, ret, err);
}
if (name == "inv_0_189_negation_subproof") {
subproof_194(args, ret, err);
}
if (name == "inv_0_189_subproof") {
subproof_195(args, ret, err);
}
if (name == "inv_0_18_negation_subproof") {
subproof_196(args, ret, err);
}
if (name == "inv_0_18_subproof") {
subproof_197(args, ret, err);
}
if (name == "inv_0_190_negation_subproof") {
subproof_198(args, ret, err);
}
if (name == "inv_0_190_subproof") {
subproof_199(args, ret, err);
}
if (name == "inv_0_191_negation_subproof") {
subproof_200(args, ret, err);
}
if (name == "inv_0_191_subproof") {
subproof_201(args, ret, err);
}
if (name == "inv_0_192_negation_subproof") {
subproof_202(args, ret, err);
}
if (name == "inv_0_192_subproof") {
subproof_203(args, ret, err);
}
if (name == "inv_0_193_negation_subproof") {
subproof_204(args, ret, err);
}
if (name == "inv_0_193_subproof") {
subproof_205(args, ret, err);
}
if (name == "inv_0_194_negation_subproof") {
subproof_206(args, ret, err);
}
if (name == "inv_0_194_subproof") {
subproof_207(args, ret, err);
}
if (name == "inv_0_195_negation_subproof") {
subproof_208(args, ret, err);
}
if (name == "inv_0_195_subproof") {
subproof_209(args, ret, err);
}
if (name == "inv_0_196_negation_subproof") {
subproof_210(args, ret, err);
}
if (name == "inv_0_196_subproof") {
subproof_211(args, ret, err);
}
if (name == "inv_0_197_negation_subproof") {
subproof_212(args, ret, err);
}
if (name == "inv_0_197_subproof") {
subproof_213(args, ret, err);
}
if (name == "inv_0_198_negation_subproof") {
subproof_214(args, ret, err);
}
if (name == "inv_0_198_subproof") {
subproof_215(args, ret, err);
}
if (name == "inv_0_199_negation_subproof") {
subproof_216(args, ret, err);
}
if (name == "inv_0_199_subproof") {
subproof_217(args, ret, err);
}
if (name == "inv_0_19_negation_subproof") {
subproof_218(args, ret, err);
}
if (name == "inv_0_19_subproof") {
subproof_219(args, ret, err);
}
if (name == "inv_0_1_negation_subproof") {
subproof_220(args, ret, err);
}
if (name == "inv_0_1_subproof") {
subproof_221(args, ret, err);
}
if (name == "inv_0_200_negation_subproof") {
subproof_222(args, ret, err);
}
if (name == "inv_0_200_subproof") {
subproof_223(args, ret, err);
}
if (name == "inv_0_201_negation_subproof") {
subproof_224(args, ret, err);
}
if (name == "inv_0_201_subproof") {
subproof_225(args, ret, err);
}
if (name == "inv_0_202_negation_subproof") {
subproof_226(args, ret, err);
}
if (name == "inv_0_202_subproof") {
subproof_227(args, ret, err);
}
if (name == "inv_0_203_negation_subproof") {
subproof_228(args, ret, err);
}
if (name == "inv_0_203_subproof") {
subproof_229(args, ret, err);
}
if (name == "inv_0_204_negation_subproof") {
subproof_230(args, ret, err);
}
if (name == "inv_0_204_subproof") {
subproof_231(args, ret, err);
}
if (name == "inv_0_205_negation_subproof") {
subproof_232(args, ret, err);
}
if (name == "inv_0_205_subproof") {
subproof_233(args, ret, err);
}
if (name == "inv_0_206_negation_subproof") {
subproof_234(args, ret, err);
}
if (name == "inv_0_206_subproof") {
subproof_235(args, ret, err);
}
if (name == "inv_0_207_negation_subproof") {
subproof_236(args, ret, err);
}
if (name == "inv_0_207_subproof") {
subproof_237(args, ret, err);
}
if (name == "inv_0_208_negation_subproof") {
subproof_238(args, ret, err);
}
if (name == "inv_0_208_subproof") {
subproof_239(args, ret, err);
}
if (name == "inv_0_209_negation_subproof") {
subproof_240(args, ret, err);
}
if (name == "inv_0_209_subproof") {
subproof_241(args, ret, err);
}
if (name == "inv_0_20_negation_subproof") {
subproof_242(args, ret, err);
}
if (name == "inv_0_20_subproof") {
subproof_243(args, ret, err);
}
if (name == "inv_0_210_negation_subproof") {
subproof_244(args, ret, err);
}
if (name == "inv_0_210_subproof") {
subproof_245(args, ret, err);
}
if (name == "inv_0_211_negation_subproof") {
subproof_246(args, ret, err);
}
if (name == "inv_0_211_subproof") {
subproof_247(args, ret, err);
}
if (name == "inv_0_212_negation_subproof") {
subproof_248(args, ret, err);
}
if (name == "inv_0_212_subproof") {
subproof_249(args, ret, err);
}
if (name == "inv_0_213_negation_subproof") {
subproof_250(args, ret, err);
}
if (name == "inv_0_213_subproof") {
subproof_251(args, ret, err);
}
if (name == "inv_0_214_negation_subproof") {
subproof_252(args, ret, err);
}
if (name == "inv_0_214_subproof") {
subproof_253(args, ret, err);
}
if (name == "inv_0_215_negation_subproof") {
subproof_254(args, ret, err);
}
if (name == "inv_0_215_subproof") {
subproof_255(args, ret, err);
}
if (name == "inv_0_216_negation_subproof") {
subproof_256(args, ret, err);
}
if (name == "inv_0_216_subproof") {
subproof_257(args, ret, err);
}
if (name == "inv_0_217_negation_subproof") {
subproof_258(args, ret, err);
}
if (name == "inv_0_217_subproof") {
subproof_259(args, ret, err);
}
if (name == "inv_0_218_negation_subproof") {
subproof_260(args, ret, err);
}
if (name == "inv_0_218_subproof") {
subproof_261(args, ret, err);
}
if (name == "inv_0_219_negation_subproof") {
subproof_262(args, ret, err);
}
if (name == "inv_0_219_subproof") {
subproof_263(args, ret, err);
}
if (name == "inv_0_21_negation_subproof") {
subproof_264(args, ret, err);
}
if (name == "inv_0_21_subproof") {
subproof_265(args, ret, err);
}
if (name == "inv_0_220_negation_subproof") {
subproof_266(args, ret, err);
}
if (name == "inv_0_220_subproof") {
subproof_267(args, ret, err);
}
if (name == "inv_0_221_negation_subproof") {
subproof_268(args, ret, err);
}
if (name == "inv_0_221_subproof") {
subproof_269(args, ret, err);
}
if (name == "inv_0_222_negation_subproof") {
subproof_270(args, ret, err);
}
if (name == "inv_0_222_subproof") {
subproof_271(args, ret, err);
}
if (name == "inv_0_223_negation_subproof") {
subproof_272(args, ret, err);
}
if (name == "inv_0_223_subproof") {
subproof_273(args, ret, err);
}
if (name == "inv_0_224_negation_subproof") {
subproof_274(args, ret, err);
}
if (name == "inv_0_224_subproof") {
subproof_275(args, ret, err);
}
if (name == "inv_0_225_negation_subproof") {
subproof_276(args, ret, err);
}
if (name == "inv_0_225_subproof") {
subproof_277(args, ret, err);
}
if (name == "inv_0_226_negation_subproof") {
subproof_278(args, ret, err);
}
if (name == "inv_0_226_subproof") {
subproof_279(args, ret, err);
}
if (name == "inv_0_227_negation_subproof") {
subproof_280(args, ret, err);
}
if (name == "inv_0_227_subproof") {
subproof_281(args, ret, err);
}
if (name == "inv_0_228_negation_subproof") {
subproof_282(args, ret, err);
}
if (name == "inv_0_228_subproof") {
subproof_283(args, ret, err);
}
if (name == "inv_0_229_negation_subproof") {
subproof_284(args, ret, err);
}
if (name == "inv_0_229_subproof") {
subproof_285(args, ret, err);
}
if (name == "inv_0_22_negation_subproof") {
subproof_286(args, ret, err);
}
if (name == "inv_0_22_subproof") {
subproof_287(args, ret, err);
}
if (name == "inv_0_230_negation_subproof") {
subproof_288(args, ret, err);
}
if (name == "inv_0_230_subproof") {
subproof_289(args, ret, err);
}
if (name == "inv_0_231_negation_subproof") {
subproof_290(args, ret, err);
}
if (name == "inv_0_231_subproof") {
subproof_291(args, ret, err);
}
if (name == "inv_0_232_negation_subproof") {
subproof_292(args, ret, err);
}
if (name == "inv_0_232_subproof") {
subproof_293(args, ret, err);
}
if (name == "inv_0_233_negation_subproof") {
subproof_294(args, ret, err);
}
if (name == "inv_0_233_subproof") {
subproof_295(args, ret, err);
}
if (name == "inv_0_234_negation_subproof") {
subproof_296(args, ret, err);
}
if (name == "inv_0_234_subproof") {
subproof_297(args, ret, err);
}
if (name == "inv_0_235_negation_subproof") {
subproof_298(args, ret, err);
}
if (name == "inv_0_235_subproof") {
subproof_299(args, ret, err);
}
if (name == "inv_0_236_negation_subproof") {
subproof_300(args, ret, err);
}
if (name == "inv_0_236_subproof") {
subproof_301(args, ret, err);
}
if (name == "inv_0_237_negation_subproof") {
subproof_302(args, ret, err);
}
if (name == "inv_0_237_subproof") {
subproof_303(args, ret, err);
}
if (name == "inv_0_238_negation_subproof") {
subproof_304(args, ret, err);
}
if (name == "inv_0_238_subproof") {
subproof_305(args, ret, err);
}
if (name == "inv_0_239_negation_subproof") {
subproof_306(args, ret, err);
}
if (name == "inv_0_239_subproof") {
subproof_307(args, ret, err);
}
if (name == "inv_0_23_negation_subproof") {
subproof_308(args, ret, err);
}
if (name == "inv_0_23_subproof") {
subproof_309(args, ret, err);
}
if (name == "inv_0_240_negation_subproof") {
subproof_310(args, ret, err);
}
if (name == "inv_0_240_subproof") {
subproof_311(args, ret, err);
}
if (name == "inv_0_241_negation_subproof") {
subproof_312(args, ret, err);
}
if (name == "inv_0_241_subproof") {
subproof_313(args, ret, err);
}
if (name == "inv_0_242_negation_subproof") {
subproof_314(args, ret, err);
}
if (name == "inv_0_242_subproof") {
subproof_315(args, ret, err);
}
if (name == "inv_0_243_negation_subproof") {
subproof_316(args, ret, err);
}
if (name == "inv_0_243_subproof") {
subproof_317(args, ret, err);
}
if (name == "inv_0_244_negation_subproof") {
subproof_318(args, ret, err);
}
if (name == "inv_0_244_subproof") {
subproof_319(args, ret, err);
}
if (name == "inv_0_245_negation_subproof") {
subproof_320(args, ret, err);
}
if (name == "inv_0_245_subproof") {
subproof_321(args, ret, err);
}
if (name == "inv_0_246_negation_subproof") {
subproof_322(args, ret, err);
}
if (name == "inv_0_246_subproof") {
subproof_323(args, ret, err);
}
if (name == "inv_0_247_negation_subproof") {
subproof_324(args, ret, err);
}
if (name == "inv_0_247_subproof") {
subproof_325(args, ret, err);
}
if (name == "inv_0_248_negation_subproof") {
subproof_326(args, ret, err);
}
if (name == "inv_0_248_subproof") {
subproof_327(args, ret, err);
}
if (name == "inv_0_249_negation_subproof") {
subproof_328(args, ret, err);
}
if (name == "inv_0_249_subproof") {
subproof_329(args, ret, err);
}
if (name == "inv_0_24_negation_subproof") {
subproof_330(args, ret, err);
}
if (name == "inv_0_24_subproof") {
subproof_331(args, ret, err);
}
if (name == "inv_0_250_negation_subproof") {
subproof_332(args, ret, err);
}
if (name == "inv_0_250_subproof") {
subproof_333(args, ret, err);
}
if (name == "inv_0_251_negation_subproof") {
subproof_334(args, ret, err);
}
if (name == "inv_0_251_subproof") {
subproof_335(args, ret, err);
}
if (name == "inv_0_252_negation_subproof") {
subproof_336(args, ret, err);
}
if (name == "inv_0_252_subproof") {
subproof_337(args, ret, err);
}
if (name == "inv_0_253_negation_subproof") {
subproof_338(args, ret, err);
}
if (name == "inv_0_253_subproof") {
subproof_339(args, ret, err);
}
if (name == "inv_0_254_negation_subproof") {
subproof_340(args, ret, err);
}
if (name == "inv_0_254_subproof") {
subproof_341(args, ret, err);
}
if (name == "inv_0_255_negation_subproof") {
subproof_342(args, ret, err);
}
if (name == "inv_0_255_subproof") {
subproof_343(args, ret, err);
}
if (name == "inv_0_256_negation_subproof") {
subproof_344(args, ret, err);
}
if (name == "inv_0_256_subproof") {
subproof_345(args, ret, err);
}
if (name == "inv_0_257_negation_subproof") {
subproof_346(args, ret, err);
}
if (name == "inv_0_257_subproof") {
subproof_347(args, ret, err);
}
if (name == "inv_0_258_negation_subproof") {
subproof_348(args, ret, err);
}
if (name == "inv_0_258_subproof") {
subproof_349(args, ret, err);
}
if (name == "inv_0_259_negation_subproof") {
subproof_350(args, ret, err);
}
if (name == "inv_0_259_subproof") {
subproof_351(args, ret, err);
}
if (name == "inv_0_25_negation_subproof") {
subproof_352(args, ret, err);
}
if (name == "inv_0_25_subproof") {
subproof_353(args, ret, err);
}
if (name == "inv_0_260_negation_subproof") {
subproof_354(args, ret, err);
}
if (name == "inv_0_260_subproof") {
subproof_355(args, ret, err);
}
if (name == "inv_0_261_negation_subproof") {
subproof_356(args, ret, err);
}
if (name == "inv_0_261_subproof") {
subproof_357(args, ret, err);
}
if (name == "inv_0_262_negation_subproof") {
subproof_358(args, ret, err);
}
if (name == "inv_0_262_subproof") {
subproof_359(args, ret, err);
}
if (name == "inv_0_263_negation_subproof") {
subproof_360(args, ret, err);
}
if (name == "inv_0_263_subproof") {
subproof_361(args, ret, err);
}
if (name == "inv_0_264_negation_subproof") {
subproof_362(args, ret, err);
}
if (name == "inv_0_264_subproof") {
subproof_363(args, ret, err);
}
if (name == "inv_0_265_negation_subproof") {
subproof_364(args, ret, err);
}
if (name == "inv_0_265_subproof") {
subproof_365(args, ret, err);
}
if (name == "inv_0_266_negation_subproof") {
subproof_366(args, ret, err);
}
if (name == "inv_0_266_subproof") {
subproof_367(args, ret, err);
}
if (name == "inv_0_267_negation_subproof") {
subproof_368(args, ret, err);
}
if (name == "inv_0_267_subproof") {
subproof_369(args, ret, err);
}
if (name == "inv_0_268_negation_subproof") {
subproof_370(args, ret, err);
}
if (name == "inv_0_268_subproof") {
subproof_371(args, ret, err);
}
if (name == "inv_0_269_negation_subproof") {
subproof_372(args, ret, err);
}
if (name == "inv_0_269_subproof") {
subproof_373(args, ret, err);
}
if (name == "inv_0_26_negation_subproof") {
subproof_374(args, ret, err);
}
if (name == "inv_0_26_subproof") {
subproof_375(args, ret, err);
}
if (name == "inv_0_270_negation_subproof") {
subproof_376(args, ret, err);
}
if (name == "inv_0_270_subproof") {
subproof_377(args, ret, err);
}
if (name == "inv_0_271_negation_subproof") {
subproof_378(args, ret, err);
}
if (name == "inv_0_271_subproof") {
subproof_379(args, ret, err);
}
if (name == "inv_0_272_negation_subproof") {
subproof_380(args, ret, err);
}
if (name == "inv_0_272_subproof") {
subproof_381(args, ret, err);
}
if (name == "inv_0_273_negation_subproof") {
subproof_382(args, ret, err);
}
if (name == "inv_0_273_subproof") {
subproof_383(args, ret, err);
}
if (name == "inv_0_274_negation_subproof") {
subproof_384(args, ret, err);
}
if (name == "inv_0_274_subproof") {
subproof_385(args, ret, err);
}
if (name == "inv_0_275_negation_subproof") {
subproof_386(args, ret, err);
}
if (name == "inv_0_275_subproof") {
subproof_387(args, ret, err);
}
if (name == "inv_0_276_negation_subproof") {
subproof_388(args, ret, err);
}
if (name == "inv_0_276_subproof") {
subproof_389(args, ret, err);
}
if (name == "inv_0_277_negation_subproof") {
subproof_390(args, ret, err);
}
if (name == "inv_0_277_subproof") {
subproof_391(args, ret, err);
}
if (name == "inv_0_278_negation_subproof") {
subproof_392(args, ret, err);
}
if (name == "inv_0_278_subproof") {
subproof_393(args, ret, err);
}
if (name == "inv_0_279_negation_subproof") {
subproof_394(args, ret, err);
}
if (name == "inv_0_279_subproof") {
subproof_395(args, ret, err);
}
if (name == "inv_0_27_negation_subproof") {
subproof_396(args, ret, err);
}
if (name == "inv_0_27_subproof") {
subproof_397(args, ret, err);
}
if (name == "inv_0_280_negation_subproof") {
subproof_398(args, ret, err);
}
if (name == "inv_0_280_subproof") {
subproof_399(args, ret, err);
}
if (name == "inv_0_281_negation_subproof") {
subproof_400(args, ret, err);
}
if (name == "inv_0_281_subproof") {
subproof_401(args, ret, err);
}
if (name == "inv_0_282_negation_subproof") {
subproof_402(args, ret, err);
}
if (name == "inv_0_282_subproof") {
subproof_403(args, ret, err);
}
if (name == "inv_0_283_negation_subproof") {
subproof_404(args, ret, err);
}
if (name == "inv_0_283_subproof") {
subproof_405(args, ret, err);
}
if (name == "inv_0_284_negation_subproof") {
subproof_406(args, ret, err);
}
if (name == "inv_0_284_subproof") {
subproof_407(args, ret, err);
}
if (name == "inv_0_285_negation_subproof") {
subproof_408(args, ret, err);
}
if (name == "inv_0_285_subproof") {
subproof_409(args, ret, err);
}
if (name == "inv_0_286_negation_subproof") {
subproof_410(args, ret, err);
}
if (name == "inv_0_286_subproof") {
subproof_411(args, ret, err);
}
if (name == "inv_0_287_negation_subproof") {
subproof_412(args, ret, err);
}
if (name == "inv_0_287_subproof") {
subproof_413(args, ret, err);
}
if (name == "inv_0_288_negation_subproof") {
subproof_414(args, ret, err);
}
if (name == "inv_0_288_subproof") {
subproof_415(args, ret, err);
}
if (name == "inv_0_289_negation_subproof") {
subproof_416(args, ret, err);
}
if (name == "inv_0_289_subproof") {
subproof_417(args, ret, err);
}
if (name == "inv_0_28_negation_subproof") {
subproof_418(args, ret, err);
}
if (name == "inv_0_28_subproof") {
subproof_419(args, ret, err);
}
if (name == "inv_0_290_negation_subproof") {
subproof_420(args, ret, err);
}
if (name == "inv_0_290_subproof") {
subproof_421(args, ret, err);
}
if (name == "inv_0_291_negation_subproof") {
subproof_422(args, ret, err);
}
if (name == "inv_0_291_subproof") {
subproof_423(args, ret, err);
}
if (name == "inv_0_292_negation_subproof") {
subproof_424(args, ret, err);
}
if (name == "inv_0_292_subproof") {
subproof_425(args, ret, err);
}
if (name == "inv_0_293_negation_subproof") {
subproof_426(args, ret, err);
}
if (name == "inv_0_293_subproof") {
subproof_427(args, ret, err);
}
if (name == "inv_0_294_negation_subproof") {
subproof_428(args, ret, err);
}
if (name == "inv_0_294_subproof") {
subproof_429(args, ret, err);
}
if (name == "inv_0_295_negation_subproof") {
subproof_430(args, ret, err);
}
if (name == "inv_0_295_subproof") {
subproof_431(args, ret, err);
}
if (name == "inv_0_296_negation_subproof") {
subproof_432(args, ret, err);
}
if (name == "inv_0_296_subproof") {
subproof_433(args, ret, err);
}
if (name == "inv_0_297_negation_subproof") {
subproof_434(args, ret, err);
}
if (name == "inv_0_297_subproof") {
subproof_435(args, ret, err);
}
if (name == "inv_0_298_negation_subproof") {
subproof_436(args, ret, err);
}
if (name == "inv_0_298_subproof") {
subproof_437(args, ret, err);
}
if (name == "inv_0_299_negation_subproof") {
subproof_438(args, ret, err);
}
if (name == "inv_0_299_subproof") {
subproof_439(args, ret, err);
}
if (name == "inv_0_29_negation_subproof") {
subproof_440(args, ret, err);
}
if (name == "inv_0_29_subproof") {
subproof_441(args, ret, err);
}
if (name == "inv_0_2_negation_subproof") {
subproof_442(args, ret, err);
}
if (name == "inv_0_2_subproof") {
subproof_443(args, ret, err);
}
if (name == "inv_0_300_negation_subproof") {
subproof_444(args, ret, err);
}
if (name == "inv_0_300_subproof") {
subproof_445(args, ret, err);
}
if (name == "inv_0_301_negation_subproof") {
subproof_446(args, ret, err);
}
if (name == "inv_0_301_subproof") {
subproof_447(args, ret, err);
}
if (name == "inv_0_302_negation_subproof") {
subproof_448(args, ret, err);
}
if (name == "inv_0_302_subproof") {
subproof_449(args, ret, err);
}
if (name == "inv_0_303_negation_subproof") {
subproof_450(args, ret, err);
}
if (name == "inv_0_303_subproof") {
subproof_451(args, ret, err);
}
if (name == "inv_0_304_negation_subproof") {
subproof_452(args, ret, err);
}
if (name == "inv_0_304_subproof") {
subproof_453(args, ret, err);
}
if (name == "inv_0_305_negation_subproof") {
subproof_454(args, ret, err);
}
if (name == "inv_0_305_subproof") {
subproof_455(args, ret, err);
}
if (name == "inv_0_306_negation_subproof") {
subproof_456(args, ret, err);
}
if (name == "inv_0_306_subproof") {
subproof_457(args, ret, err);
}
if (name == "inv_0_307_negation_subproof") {
subproof_458(args, ret, err);
}
if (name == "inv_0_307_subproof") {
subproof_459(args, ret, err);
}
if (name == "inv_0_308_negation_subproof") {
subproof_460(args, ret, err);
}
if (name == "inv_0_308_subproof") {
subproof_461(args, ret, err);
}
if (name == "inv_0_309_negation_subproof") {
subproof_462(args, ret, err);
}
if (name == "inv_0_309_subproof") {
subproof_463(args, ret, err);
}
if (name == "inv_0_30_negation_subproof") {
subproof_464(args, ret, err);
}
if (name == "inv_0_30_subproof") {
subproof_465(args, ret, err);
}
if (name == "inv_0_310_negation_subproof") {
subproof_466(args, ret, err);
}
if (name == "inv_0_310_subproof") {
subproof_467(args, ret, err);
}
if (name == "inv_0_311_negation_subproof") {
subproof_468(args, ret, err);
}
if (name == "inv_0_311_subproof") {
subproof_469(args, ret, err);
}
if (name == "inv_0_312_negation_subproof") {
subproof_470(args, ret, err);
}
if (name == "inv_0_312_subproof") {
subproof_471(args, ret, err);
}
if (name == "inv_0_313_negation_subproof") {
subproof_472(args, ret, err);
}
if (name == "inv_0_313_subproof") {
subproof_473(args, ret, err);
}
if (name == "inv_0_314_negation_subproof") {
subproof_474(args, ret, err);
}
if (name == "inv_0_314_subproof") {
subproof_475(args, ret, err);
}
if (name == "inv_0_315_negation_subproof") {
subproof_476(args, ret, err);
}
if (name == "inv_0_315_subproof") {
subproof_477(args, ret, err);
}
if (name == "inv_0_316_negation_subproof") {
subproof_478(args, ret, err);
}
if (name == "inv_0_316_subproof") {
subproof_479(args, ret, err);
}
if (name == "inv_0_317_negation_subproof") {
subproof_480(args, ret, err);
}
if (name == "inv_0_317_subproof") {
subproof_481(args, ret, err);
}
if (name == "inv_0_318_negation_subproof") {
subproof_482(args, ret, err);
}
if (name == "inv_0_318_subproof") {
subproof_483(args, ret, err);
}
if (name == "inv_0_319_negation_subproof") {
subproof_484(args, ret, err);
}
if (name == "inv_0_319_subproof") {
subproof_485(args, ret, err);
}
if (name == "inv_0_31_negation_subproof") {
subproof_486(args, ret, err);
}
if (name == "inv_0_31_subproof") {
subproof_487(args, ret, err);
}
if (name == "inv_0_320_negation_subproof") {
subproof_488(args, ret, err);
}
if (name == "inv_0_320_subproof") {
subproof_489(args, ret, err);
}
if (name == "inv_0_321_negation_subproof") {
subproof_490(args, ret, err);
}
if (name == "inv_0_321_subproof") {
subproof_491(args, ret, err);
}
if (name == "inv_0_322_negation_subproof") {
subproof_492(args, ret, err);
}
if (name == "inv_0_322_subproof") {
subproof_493(args, ret, err);
}
if (name == "inv_0_323_negation_subproof") {
subproof_494(args, ret, err);
}
if (name == "inv_0_323_subproof") {
subproof_495(args, ret, err);
}
if (name == "inv_0_324_negation_subproof") {
subproof_496(args, ret, err);
}
if (name == "inv_0_324_subproof") {
subproof_497(args, ret, err);
}
if (name == "inv_0_325_negation_subproof") {
subproof_498(args, ret, err);
}
if (name == "inv_0_325_subproof") {
subproof_499(args, ret, err);
}
if (name == "inv_0_326_negation_subproof") {
subproof_500(args, ret, err);
}
if (name == "inv_0_326_subproof") {
subproof_501(args, ret, err);
}
if (name == "inv_0_327_negation_subproof") {
subproof_502(args, ret, err);
}
if (name == "inv_0_327_subproof") {
subproof_503(args, ret, err);
}
if (name == "inv_0_328_negation_subproof") {
subproof_504(args, ret, err);
}
if (name == "inv_0_328_subproof") {
subproof_505(args, ret, err);
}
if (name == "inv_0_329_negation_subproof") {
subproof_506(args, ret, err);
}
if (name == "inv_0_329_subproof") {
subproof_507(args, ret, err);
}
if (name == "inv_0_32_negation_subproof") {
subproof_508(args, ret, err);
}
if (name == "inv_0_32_subproof") {
subproof_509(args, ret, err);
}
if (name == "inv_0_330_negation_subproof") {
subproof_510(args, ret, err);
}
if (name == "inv_0_330_subproof") {
subproof_511(args, ret, err);
}
if (name == "inv_0_331_negation_subproof") {
subproof_512(args, ret, err);
}
if (name == "inv_0_331_subproof") {
subproof_513(args, ret, err);
}
if (name == "inv_0_332_negation_subproof") {
subproof_514(args, ret, err);
}
if (name == "inv_0_332_subproof") {
subproof_515(args, ret, err);
}
if (name == "inv_0_333_negation_subproof") {
subproof_516(args, ret, err);
}
if (name == "inv_0_333_subproof") {
subproof_517(args, ret, err);
}
if (name == "inv_0_334_negation_subproof") {
subproof_518(args, ret, err);
}
if (name == "inv_0_334_subproof") {
subproof_519(args, ret, err);
}
if (name == "inv_0_335_negation_subproof") {
subproof_520(args, ret, err);
}
if (name == "inv_0_335_subproof") {
subproof_521(args, ret, err);
}
if (name == "inv_0_336_negation_subproof") {
subproof_522(args, ret, err);
}
if (name == "inv_0_336_subproof") {
subproof_523(args, ret, err);
}
if (name == "inv_0_337_negation_subproof") {
subproof_524(args, ret, err);
}
if (name == "inv_0_337_subproof") {
subproof_525(args, ret, err);
}
if (name == "inv_0_338_negation_subproof") {
subproof_526(args, ret, err);
}
if (name == "inv_0_338_subproof") {
subproof_527(args, ret, err);
}
if (name == "inv_0_339_negation_subproof") {
subproof_528(args, ret, err);
}
if (name == "inv_0_339_subproof") {
subproof_529(args, ret, err);
}
if (name == "inv_0_33_negation_subproof") {
subproof_530(args, ret, err);
}
if (name == "inv_0_33_subproof") {
subproof_531(args, ret, err);
}
if (name == "inv_0_340_negation_subproof") {
subproof_532(args, ret, err);
}
if (name == "inv_0_340_subproof") {
subproof_533(args, ret, err);
}
if (name == "inv_0_341_negation_subproof") {
subproof_534(args, ret, err);
}
if (name == "inv_0_341_subproof") {
subproof_535(args, ret, err);
}
if (name == "inv_0_342_negation_subproof") {
subproof_536(args, ret, err);
}
if (name == "inv_0_342_subproof") {
subproof_537(args, ret, err);
}
if (name == "inv_0_343_negation_subproof") {
subproof_538(args, ret, err);
}
if (name == "inv_0_343_subproof") {
subproof_539(args, ret, err);
}
if (name == "inv_0_344_negation_subproof") {
subproof_540(args, ret, err);
}
if (name == "inv_0_344_subproof") {
subproof_541(args, ret, err);
}
if (name == "inv_0_345_negation_subproof") {
subproof_542(args, ret, err);
}
if (name == "inv_0_345_subproof") {
subproof_543(args, ret, err);
}
if (name == "inv_0_346_negation_subproof") {
subproof_544(args, ret, err);
}
if (name == "inv_0_346_subproof") {
subproof_545(args, ret, err);
}
if (name == "inv_0_347_negation_subproof") {
subproof_546(args, ret, err);
}
if (name == "inv_0_347_subproof") {
subproof_547(args, ret, err);
}
if (name == "inv_0_348_negation_subproof") {
subproof_548(args, ret, err);
}
if (name == "inv_0_348_subproof") {
subproof_549(args, ret, err);
}
if (name == "inv_0_349_negation_subproof") {
subproof_550(args, ret, err);
}
if (name == "inv_0_349_subproof") {
subproof_551(args, ret, err);
}
if (name == "inv_0_34_negation_subproof") {
subproof_552(args, ret, err);
}
if (name == "inv_0_34_subproof") {
subproof_553(args, ret, err);
}
if (name == "inv_0_350_negation_subproof") {
subproof_554(args, ret, err);
}
if (name == "inv_0_350_subproof") {
subproof_555(args, ret, err);
}
if (name == "inv_0_35_negation_subproof") {
subproof_556(args, ret, err);
}
if (name == "inv_0_35_subproof") {
subproof_557(args, ret, err);
}
if (name == "inv_0_36_negation_subproof") {
subproof_558(args, ret, err);
}
if (name == "inv_0_36_subproof") {
subproof_559(args, ret, err);
}
if (name == "inv_0_37_negation_subproof") {
subproof_560(args, ret, err);
}
if (name == "inv_0_37_subproof") {
subproof_561(args, ret, err);
}
if (name == "inv_0_38_negation_subproof") {
subproof_562(args, ret, err);
}
if (name == "inv_0_38_subproof") {
subproof_563(args, ret, err);
}
if (name == "inv_0_39_negation_subproof") {
subproof_564(args, ret, err);
}
if (name == "inv_0_39_subproof") {
subproof_565(args, ret, err);
}
if (name == "inv_0_3_negation_subproof") {
subproof_566(args, ret, err);
}
if (name == "inv_0_3_subproof") {
subproof_567(args, ret, err);
}
if (name == "inv_0_40_negation_subproof") {
subproof_568(args, ret, err);
}
if (name == "inv_0_40_subproof") {
subproof_569(args, ret, err);
}
if (name == "inv_0_41_negation_subproof") {
subproof_570(args, ret, err);
}
if (name == "inv_0_41_subproof") {
subproof_571(args, ret, err);
}
if (name == "inv_0_42_negation_subproof") {
subproof_572(args, ret, err);
}
if (name == "inv_0_42_subproof") {
subproof_573(args, ret, err);
}
if (name == "inv_0_43_negation_subproof") {
subproof_574(args, ret, err);
}
if (name == "inv_0_43_subproof") {
subproof_575(args, ret, err);
}
if (name == "inv_0_44_negation_subproof") {
subproof_576(args, ret, err);
}
if (name == "inv_0_44_subproof") {
subproof_577(args, ret, err);
}
if (name == "inv_0_45_negation_subproof") {
subproof_578(args, ret, err);
}
if (name == "inv_0_45_subproof") {
subproof_579(args, ret, err);
}
if (name == "inv_0_46_negation_subproof") {
subproof_580(args, ret, err);
}
if (name == "inv_0_46_subproof") {
subproof_581(args, ret, err);
}
if (name == "inv_0_47_negation_subproof") {
subproof_582(args, ret, err);
}
if (name == "inv_0_47_subproof") {
subproof_583(args, ret, err);
}
if (name == "inv_0_48_negation_subproof") {
subproof_584(args, ret, err);
}
if (name == "inv_0_48_subproof") {
subproof_585(args, ret, err);
}
if (name == "inv_0_49_negation_subproof") {
subproof_586(args, ret, err);
}
if (name == "inv_0_49_subproof") {
subproof_587(args, ret, err);
}
if (name == "inv_0_4_negation_subproof") {
subproof_588(args, ret, err);
}
if (name == "inv_0_4_subproof") {
subproof_589(args, ret, err);
}
if (name == "inv_0_50_negation_subproof") {
subproof_590(args, ret, err);
}
if (name == "inv_0_50_subproof") {
subproof_591(args, ret, err);
}
if (name == "inv_0_51_negation_subproof") {
subproof_592(args, ret, err);
}
if (name == "inv_0_51_subproof") {
subproof_593(args, ret, err);
}
if (name == "inv_0_52_negation_subproof") {
subproof_594(args, ret, err);
}
if (name == "inv_0_52_subproof") {
subproof_595(args, ret, err);
}
if (name == "inv_0_53_negation_subproof") {
subproof_596(args, ret, err);
}
if (name == "inv_0_53_subproof") {
subproof_597(args, ret, err);
}
if (name == "inv_0_54_negation_subproof") {
subproof_598(args, ret, err);
}
if (name == "inv_0_54_subproof") {
subproof_599(args, ret, err);
}
if (name == "inv_0_55_negation_subproof") {
subproof_600(args, ret, err);
}
if (name == "inv_0_55_subproof") {
subproof_601(args, ret, err);
}
if (name == "inv_0_56_negation_subproof") {
subproof_602(args, ret, err);
}
if (name == "inv_0_56_subproof") {
subproof_603(args, ret, err);
}
if (name == "inv_0_57_negation_subproof") {
subproof_604(args, ret, err);
}
if (name == "inv_0_57_subproof") {
subproof_605(args, ret, err);
}
if (name == "inv_0_58_negation_subproof") {
subproof_606(args, ret, err);
}
if (name == "inv_0_58_subproof") {
subproof_607(args, ret, err);
}
if (name == "inv_0_59_negation_subproof") {
subproof_608(args, ret, err);
}
if (name == "inv_0_59_subproof") {
subproof_609(args, ret, err);
}
if (name == "inv_0_5_negation_subproof") {
subproof_610(args, ret, err);
}
if (name == "inv_0_5_subproof") {
subproof_611(args, ret, err);
}
if (name == "inv_0_60_negation_subproof") {
subproof_612(args, ret, err);
}
if (name == "inv_0_60_subproof") {
subproof_613(args, ret, err);
}
if (name == "inv_0_61_negation_subproof") {
subproof_614(args, ret, err);
}
if (name == "inv_0_61_subproof") {
subproof_615(args, ret, err);
}
if (name == "inv_0_62_negation_subproof") {
subproof_616(args, ret, err);
}
if (name == "inv_0_62_subproof") {
subproof_617(args, ret, err);
}
if (name == "inv_0_63_negation_subproof") {
subproof_618(args, ret, err);
}
if (name == "inv_0_63_subproof") {
subproof_619(args, ret, err);
}
if (name == "inv_0_64_negation_subproof") {
subproof_620(args, ret, err);
}
if (name == "inv_0_64_subproof") {
subproof_621(args, ret, err);
}
if (name == "inv_0_65_negation_subproof") {
subproof_622(args, ret, err);
}
if (name == "inv_0_65_subproof") {
subproof_623(args, ret, err);
}
if (name == "inv_0_66_negation_subproof") {
subproof_624(args, ret, err);
}
if (name == "inv_0_66_subproof") {
subproof_625(args, ret, err);
}
if (name == "inv_0_67_negation_subproof") {
subproof_626(args, ret, err);
}
if (name == "inv_0_67_subproof") {
subproof_627(args, ret, err);
}
if (name == "inv_0_68_negation_subproof") {
subproof_628(args, ret, err);
}
if (name == "inv_0_68_subproof") {
subproof_629(args, ret, err);
}
if (name == "inv_0_69_negation_subproof") {
subproof_630(args, ret, err);
}
if (name == "inv_0_69_subproof") {
subproof_631(args, ret, err);
}
if (name == "inv_0_6_negation_subproof") {
subproof_632(args, ret, err);
}
if (name == "inv_0_6_subproof") {
subproof_633(args, ret, err);
}
if (name == "inv_0_70_negation_subproof") {
subproof_634(args, ret, err);
}
if (name == "inv_0_70_subproof") {
subproof_635(args, ret, err);
}
if (name == "inv_0_71_negation_subproof") {
subproof_636(args, ret, err);
}
if (name == "inv_0_71_subproof") {
subproof_637(args, ret, err);
}
if (name == "inv_0_72_negation_subproof") {
subproof_638(args, ret, err);
}
if (name == "inv_0_72_subproof") {
subproof_639(args, ret, err);
}
if (name == "inv_0_73_negation_subproof") {
subproof_640(args, ret, err);
}
if (name == "inv_0_73_subproof") {
subproof_641(args, ret, err);
}
if (name == "inv_0_74_negation_subproof") {
subproof_642(args, ret, err);
}
if (name == "inv_0_74_subproof") {
subproof_643(args, ret, err);
}
if (name == "inv_0_75_negation_subproof") {
subproof_644(args, ret, err);
}
if (name == "inv_0_75_subproof") {
subproof_645(args, ret, err);
}
if (name == "inv_0_76_negation_subproof") {
subproof_646(args, ret, err);
}
if (name == "inv_0_76_subproof") {
subproof_647(args, ret, err);
}
if (name == "inv_0_77_negation_subproof") {
subproof_648(args, ret, err);
}
if (name == "inv_0_77_subproof") {
subproof_649(args, ret, err);
}
if (name == "inv_0_78_negation_subproof") {
subproof_650(args, ret, err);
}
if (name == "inv_0_78_subproof") {
subproof_651(args, ret, err);
}
if (name == "inv_0_79_negation_subproof") {
subproof_652(args, ret, err);
}
if (name == "inv_0_79_subproof") {
subproof_653(args, ret, err);
}
if (name == "inv_0_7_negation_subproof") {
subproof_654(args, ret, err);
}
if (name == "inv_0_7_subproof") {
subproof_655(args, ret, err);
}
if (name == "inv_0_80_negation_subproof") {
subproof_656(args, ret, err);
}
if (name == "inv_0_80_subproof") {
subproof_657(args, ret, err);
}
if (name == "inv_0_81_negation_subproof") {
subproof_658(args, ret, err);
}
if (name == "inv_0_81_subproof") {
subproof_659(args, ret, err);
}
if (name == "inv_0_82_negation_subproof") {
subproof_660(args, ret, err);
}
if (name == "inv_0_82_subproof") {
subproof_661(args, ret, err);
}
if (name == "inv_0_83_negation_subproof") {
subproof_662(args, ret, err);
}
if (name == "inv_0_83_subproof") {
subproof_663(args, ret, err);
}
if (name == "inv_0_84_negation_subproof") {
subproof_664(args, ret, err);
}
if (name == "inv_0_84_subproof") {
subproof_665(args, ret, err);
}
if (name == "inv_0_85_negation_subproof") {
subproof_666(args, ret, err);
}
if (name == "inv_0_85_subproof") {
subproof_667(args, ret, err);
}
if (name == "inv_0_86_negation_subproof") {
subproof_668(args, ret, err);
}
if (name == "inv_0_86_subproof") {
subproof_669(args, ret, err);
}
if (name == "inv_0_87_negation_subproof") {
subproof_670(args, ret, err);
}
if (name == "inv_0_87_subproof") {
subproof_671(args, ret, err);
}
if (name == "inv_0_88_negation_subproof") {
subproof_672(args, ret, err);
}
if (name == "inv_0_88_subproof") {
subproof_673(args, ret, err);
}
if (name == "inv_0_89_negation_subproof") {
subproof_674(args, ret, err);
}
if (name == "inv_0_89_subproof") {
subproof_675(args, ret, err);
}
if (name == "inv_0_8_negation_subproof") {
subproof_676(args, ret, err);
}
if (name == "inv_0_8_subproof") {
subproof_677(args, ret, err);
}
if (name == "inv_0_90_negation_subproof") {
subproof_678(args, ret, err);
}
if (name == "inv_0_90_subproof") {
subproof_679(args, ret, err);
}
if (name == "inv_0_91_negation_subproof") {
subproof_680(args, ret, err);
}
if (name == "inv_0_91_subproof") {
subproof_681(args, ret, err);
}
if (name == "inv_0_92_negation_subproof") {
subproof_682(args, ret, err);
}
if (name == "inv_0_92_subproof") {
subproof_683(args, ret, err);
}
if (name == "inv_0_93_negation_subproof") {
subproof_684(args, ret, err);
}
if (name == "inv_0_93_subproof") {
subproof_685(args, ret, err);
}
if (name == "inv_0_94_negation_subproof") {
subproof_686(args, ret, err);
}
if (name == "inv_0_94_subproof") {
subproof_687(args, ret, err);
}
if (name == "inv_0_95_negation_subproof") {
subproof_688(args, ret, err);
}
if (name == "inv_0_95_subproof") {
subproof_689(args, ret, err);
}
if (name == "inv_0_96_negation_subproof") {
subproof_690(args, ret, err);
}
if (name == "inv_0_96_subproof") {
subproof_691(args, ret, err);
}
if (name == "inv_0_97_negation_subproof") {
subproof_692(args, ret, err);
}
if (name == "inv_0_97_subproof") {
subproof_693(args, ret, err);
}
if (name == "inv_0_98_negation_subproof") {
subproof_694(args, ret, err);
}
if (name == "inv_0_98_subproof") {
subproof_695(args, ret, err);
}
if (name == "inv_0_99_negation_subproof") {
subproof_696(args, ret, err);
}
if (name == "inv_0_99_subproof") {
subproof_697(args, ret, err);
}
if (name == "inv_0_9_negation_subproof") {
subproof_698(args, ret, err);
}
if (name == "inv_0_9_subproof") {
subproof_699(args, ret, err);
}
if (name == "livesIn_100_negation_subproof") {
subproof_700(args, ret, err);
}
if (name == "livesIn_100_subproof") {
subproof_701(args, ret, err);
}
if (name == "livesIn_101_negation_subproof") {
subproof_702(args, ret, err);
}
if (name == "livesIn_101_subproof") {
subproof_703(args, ret, err);
}
if (name == "livesIn_102_negation_subproof") {
subproof_704(args, ret, err);
}
if (name == "livesIn_102_subproof") {
subproof_705(args, ret, err);
}
if (name == "livesIn_103_negation_subproof") {
subproof_706(args, ret, err);
}
if (name == "livesIn_103_subproof") {
subproof_707(args, ret, err);
}
if (name == "livesIn_104_negation_subproof") {
subproof_708(args, ret, err);
}
if (name == "livesIn_104_subproof") {
subproof_709(args, ret, err);
}
if (name == "livesIn_105_negation_subproof") {
subproof_710(args, ret, err);
}
if (name == "livesIn_105_subproof") {
subproof_711(args, ret, err);
}
if (name == "livesIn_106_negation_subproof") {
subproof_712(args, ret, err);
}
if (name == "livesIn_106_subproof") {
subproof_713(args, ret, err);
}
if (name == "livesIn_107_negation_subproof") {
subproof_714(args, ret, err);
}
if (name == "livesIn_107_subproof") {
subproof_715(args, ret, err);
}
if (name == "livesIn_108_negation_subproof") {
subproof_716(args, ret, err);
}
if (name == "livesIn_108_subproof") {
subproof_717(args, ret, err);
}
if (name == "livesIn_109_negation_subproof") {
subproof_718(args, ret, err);
}
if (name == "livesIn_109_subproof") {
subproof_719(args, ret, err);
}
if (name == "livesIn_10_negation_subproof") {
subproof_720(args, ret, err);
}
if (name == "livesIn_10_subproof") {
subproof_721(args, ret, err);
}
if (name == "livesIn_110_negation_subproof") {
subproof_722(args, ret, err);
}
if (name == "livesIn_110_subproof") {
subproof_723(args, ret, err);
}
if (name == "livesIn_111_negation_subproof") {
subproof_724(args, ret, err);
}
if (name == "livesIn_111_subproof") {
subproof_725(args, ret, err);
}
if (name == "livesIn_112_negation_subproof") {
subproof_726(args, ret, err);
}
if (name == "livesIn_112_subproof") {
subproof_727(args, ret, err);
}
if (name == "livesIn_113_negation_subproof") {
subproof_728(args, ret, err);
}
if (name == "livesIn_113_subproof") {
subproof_729(args, ret, err);
}
if (name == "livesIn_114_negation_subproof") {
subproof_730(args, ret, err);
}
if (name == "livesIn_114_subproof") {
subproof_731(args, ret, err);
}
if (name == "livesIn_115_negation_subproof") {
subproof_732(args, ret, err);
}
if (name == "livesIn_115_subproof") {
subproof_733(args, ret, err);
}
if (name == "livesIn_116_negation_subproof") {
subproof_734(args, ret, err);
}
if (name == "livesIn_116_subproof") {
subproof_735(args, ret, err);
}
if (name == "livesIn_117_negation_subproof") {
subproof_736(args, ret, err);
}
if (name == "livesIn_117_subproof") {
subproof_737(args, ret, err);
}
if (name == "livesIn_118_negation_subproof") {
subproof_738(args, ret, err);
}
if (name == "livesIn_118_subproof") {
subproof_739(args, ret, err);
}
if (name == "livesIn_119_negation_subproof") {
subproof_740(args, ret, err);
}
if (name == "livesIn_119_subproof") {
subproof_741(args, ret, err);
}
if (name == "livesIn_11_negation_subproof") {
subproof_742(args, ret, err);
}
if (name == "livesIn_11_subproof") {
subproof_743(args, ret, err);
}
if (name == "livesIn_120_negation_subproof") {
subproof_744(args, ret, err);
}
if (name == "livesIn_120_subproof") {
subproof_745(args, ret, err);
}
if (name == "livesIn_121_negation_subproof") {
subproof_746(args, ret, err);
}
if (name == "livesIn_121_subproof") {
subproof_747(args, ret, err);
}
if (name == "livesIn_122_negation_subproof") {
subproof_748(args, ret, err);
}
if (name == "livesIn_122_subproof") {
subproof_749(args, ret, err);
}
if (name == "livesIn_123_negation_subproof") {
subproof_750(args, ret, err);
}
if (name == "livesIn_123_subproof") {
subproof_751(args, ret, err);
}
if (name == "livesIn_124_negation_subproof") {
subproof_752(args, ret, err);
}
if (name == "livesIn_124_subproof") {
subproof_753(args, ret, err);
}
if (name == "livesIn_125_negation_subproof") {
subproof_754(args, ret, err);
}
if (name == "livesIn_125_subproof") {
subproof_755(args, ret, err);
}
if (name == "livesIn_126_negation_subproof") {
subproof_756(args, ret, err);
}
if (name == "livesIn_126_subproof") {
subproof_757(args, ret, err);
}
if (name == "livesIn_127_negation_subproof") {
subproof_758(args, ret, err);
}
if (name == "livesIn_127_subproof") {
subproof_759(args, ret, err);
}
if (name == "livesIn_128_negation_subproof") {
subproof_760(args, ret, err);
}
if (name == "livesIn_128_subproof") {
subproof_761(args, ret, err);
}
if (name == "livesIn_129_negation_subproof") {
subproof_762(args, ret, err);
}
if (name == "livesIn_129_subproof") {
subproof_763(args, ret, err);
}
if (name == "livesIn_12_negation_subproof") {
subproof_764(args, ret, err);
}
if (name == "livesIn_12_subproof") {
subproof_765(args, ret, err);
}
if (name == "livesIn_130_negation_subproof") {
subproof_766(args, ret, err);
}
if (name == "livesIn_130_subproof") {
subproof_767(args, ret, err);
}
if (name == "livesIn_131_negation_subproof") {
subproof_768(args, ret, err);
}
if (name == "livesIn_131_subproof") {
subproof_769(args, ret, err);
}
if (name == "livesIn_132_negation_subproof") {
subproof_770(args, ret, err);
}
if (name == "livesIn_132_subproof") {
subproof_771(args, ret, err);
}
if (name == "livesIn_133_negation_subproof") {
subproof_772(args, ret, err);
}
if (name == "livesIn_133_subproof") {
subproof_773(args, ret, err);
}
if (name == "livesIn_134_negation_subproof") {
subproof_774(args, ret, err);
}
if (name == "livesIn_134_subproof") {
subproof_775(args, ret, err);
}
if (name == "livesIn_135_negation_subproof") {
subproof_776(args, ret, err);
}
if (name == "livesIn_135_subproof") {
subproof_777(args, ret, err);
}
if (name == "livesIn_136_negation_subproof") {
subproof_778(args, ret, err);
}
if (name == "livesIn_136_subproof") {
subproof_779(args, ret, err);
}
if (name == "livesIn_137_negation_subproof") {
subproof_780(args, ret, err);
}
if (name == "livesIn_137_subproof") {
subproof_781(args, ret, err);
}
if (name == "livesIn_138_negation_subproof") {
subproof_782(args, ret, err);
}
if (name == "livesIn_138_subproof") {
subproof_783(args, ret, err);
}
if (name == "livesIn_139_negation_subproof") {
subproof_784(args, ret, err);
}
if (name == "livesIn_139_subproof") {
subproof_785(args, ret, err);
}
if (name == "livesIn_13_negation_subproof") {
subproof_786(args, ret, err);
}
if (name == "livesIn_13_subproof") {
subproof_787(args, ret, err);
}
if (name == "livesIn_140_negation_subproof") {
subproof_788(args, ret, err);
}
if (name == "livesIn_140_subproof") {
subproof_789(args, ret, err);
}
if (name == "livesIn_141_negation_subproof") {
subproof_790(args, ret, err);
}
if (name == "livesIn_141_subproof") {
subproof_791(args, ret, err);
}
if (name == "livesIn_142_negation_subproof") {
subproof_792(args, ret, err);
}
if (name == "livesIn_142_subproof") {
subproof_793(args, ret, err);
}
if (name == "livesIn_143_negation_subproof") {
subproof_794(args, ret, err);
}
if (name == "livesIn_143_subproof") {
subproof_795(args, ret, err);
}
if (name == "livesIn_144_negation_subproof") {
subproof_796(args, ret, err);
}
if (name == "livesIn_144_subproof") {
subproof_797(args, ret, err);
}
if (name == "livesIn_145_negation_subproof") {
subproof_798(args, ret, err);
}
if (name == "livesIn_145_subproof") {
subproof_799(args, ret, err);
}
if (name == "livesIn_146_negation_subproof") {
subproof_800(args, ret, err);
}
if (name == "livesIn_146_subproof") {
subproof_801(args, ret, err);
}
if (name == "livesIn_147_negation_subproof") {
subproof_802(args, ret, err);
}
if (name == "livesIn_147_subproof") {
subproof_803(args, ret, err);
}
if (name == "livesIn_148_negation_subproof") {
subproof_804(args, ret, err);
}
if (name == "livesIn_148_subproof") {
subproof_805(args, ret, err);
}
if (name == "livesIn_149_negation_subproof") {
subproof_806(args, ret, err);
}
if (name == "livesIn_149_subproof") {
subproof_807(args, ret, err);
}
if (name == "livesIn_14_negation_subproof") {
subproof_808(args, ret, err);
}
if (name == "livesIn_14_subproof") {
subproof_809(args, ret, err);
}
if (name == "livesIn_150_negation_subproof") {
subproof_810(args, ret, err);
}
if (name == "livesIn_150_subproof") {
subproof_811(args, ret, err);
}
if (name == "livesIn_151_negation_subproof") {
subproof_812(args, ret, err);
}
if (name == "livesIn_151_subproof") {
subproof_813(args, ret, err);
}
if (name == "livesIn_152_negation_subproof") {
subproof_814(args, ret, err);
}
if (name == "livesIn_152_subproof") {
subproof_815(args, ret, err);
}
if (name == "livesIn_153_negation_subproof") {
subproof_816(args, ret, err);
}
if (name == "livesIn_153_subproof") {
subproof_817(args, ret, err);
}
if (name == "livesIn_154_negation_subproof") {
subproof_818(args, ret, err);
}
if (name == "livesIn_154_subproof") {
subproof_819(args, ret, err);
}
if (name == "livesIn_155_negation_subproof") {
subproof_820(args, ret, err);
}
if (name == "livesIn_155_subproof") {
subproof_821(args, ret, err);
}
if (name == "livesIn_156_negation_subproof") {
subproof_822(args, ret, err);
}
if (name == "livesIn_156_subproof") {
subproof_823(args, ret, err);
}
if (name == "livesIn_157_negation_subproof") {
subproof_824(args, ret, err);
}
if (name == "livesIn_157_subproof") {
subproof_825(args, ret, err);
}
if (name == "livesIn_158_negation_subproof") {
subproof_826(args, ret, err);
}
if (name == "livesIn_158_subproof") {
subproof_827(args, ret, err);
}
if (name == "livesIn_159_negation_subproof") {
subproof_828(args, ret, err);
}
if (name == "livesIn_159_subproof") {
subproof_829(args, ret, err);
}
if (name == "livesIn_15_negation_subproof") {
subproof_830(args, ret, err);
}
if (name == "livesIn_15_subproof") {
subproof_831(args, ret, err);
}
if (name == "livesIn_160_negation_subproof") {
subproof_832(args, ret, err);
}
if (name == "livesIn_160_subproof") {
subproof_833(args, ret, err);
}
if (name == "livesIn_161_negation_subproof") {
subproof_834(args, ret, err);
}
if (name == "livesIn_161_subproof") {
subproof_835(args, ret, err);
}
if (name == "livesIn_162_negation_subproof") {
subproof_836(args, ret, err);
}
if (name == "livesIn_162_subproof") {
subproof_837(args, ret, err);
}
if (name == "livesIn_163_negation_subproof") {
subproof_838(args, ret, err);
}
if (name == "livesIn_163_subproof") {
subproof_839(args, ret, err);
}
if (name == "livesIn_164_negation_subproof") {
subproof_840(args, ret, err);
}
if (name == "livesIn_164_subproof") {
subproof_841(args, ret, err);
}
if (name == "livesIn_165_negation_subproof") {
subproof_842(args, ret, err);
}
if (name == "livesIn_165_subproof") {
subproof_843(args, ret, err);
}
if (name == "livesIn_166_negation_subproof") {
subproof_844(args, ret, err);
}
if (name == "livesIn_166_subproof") {
subproof_845(args, ret, err);
}
if (name == "livesIn_167_negation_subproof") {
subproof_846(args, ret, err);
}
if (name == "livesIn_167_subproof") {
subproof_847(args, ret, err);
}
if (name == "livesIn_168_negation_subproof") {
subproof_848(args, ret, err);
}
if (name == "livesIn_168_subproof") {
subproof_849(args, ret, err);
}
if (name == "livesIn_169_negation_subproof") {
subproof_850(args, ret, err);
}
if (name == "livesIn_169_subproof") {
subproof_851(args, ret, err);
}
if (name == "livesIn_16_negation_subproof") {
subproof_852(args, ret, err);
}
if (name == "livesIn_16_subproof") {
subproof_853(args, ret, err);
}
if (name == "livesIn_170_negation_subproof") {
subproof_854(args, ret, err);
}
if (name == "livesIn_170_subproof") {
subproof_855(args, ret, err);
}
if (name == "livesIn_171_negation_subproof") {
subproof_856(args, ret, err);
}
if (name == "livesIn_171_subproof") {
subproof_857(args, ret, err);
}
if (name == "livesIn_172_negation_subproof") {
subproof_858(args, ret, err);
}
if (name == "livesIn_172_subproof") {
subproof_859(args, ret, err);
}
if (name == "livesIn_173_negation_subproof") {
subproof_860(args, ret, err);
}
if (name == "livesIn_173_subproof") {
subproof_861(args, ret, err);
}
if (name == "livesIn_174_negation_subproof") {
subproof_862(args, ret, err);
}
if (name == "livesIn_174_subproof") {
subproof_863(args, ret, err);
}
if (name == "livesIn_175_negation_subproof") {
subproof_864(args, ret, err);
}
if (name == "livesIn_175_subproof") {
subproof_865(args, ret, err);
}
if (name == "livesIn_176_negation_subproof") {
subproof_866(args, ret, err);
}
if (name == "livesIn_176_subproof") {
subproof_867(args, ret, err);
}
if (name == "livesIn_177_negation_subproof") {
subproof_868(args, ret, err);
}
if (name == "livesIn_177_subproof") {
subproof_869(args, ret, err);
}
if (name == "livesIn_178_negation_subproof") {
subproof_870(args, ret, err);
}
if (name == "livesIn_178_subproof") {
subproof_871(args, ret, err);
}
if (name == "livesIn_179_negation_subproof") {
subproof_872(args, ret, err);
}
if (name == "livesIn_179_subproof") {
subproof_873(args, ret, err);
}
if (name == "livesIn_17_negation_subproof") {
subproof_874(args, ret, err);
}
if (name == "livesIn_17_subproof") {
subproof_875(args, ret, err);
}
if (name == "livesIn_180_negation_subproof") {
subproof_876(args, ret, err);
}
if (name == "livesIn_180_subproof") {
subproof_877(args, ret, err);
}
if (name == "livesIn_181_negation_subproof") {
subproof_878(args, ret, err);
}
if (name == "livesIn_181_subproof") {
subproof_879(args, ret, err);
}
if (name == "livesIn_182_negation_subproof") {
subproof_880(args, ret, err);
}
if (name == "livesIn_182_subproof") {
subproof_881(args, ret, err);
}
if (name == "livesIn_183_negation_subproof") {
subproof_882(args, ret, err);
}
if (name == "livesIn_183_subproof") {
subproof_883(args, ret, err);
}
if (name == "livesIn_184_negation_subproof") {
subproof_884(args, ret, err);
}
if (name == "livesIn_184_subproof") {
subproof_885(args, ret, err);
}
if (name == "livesIn_185_negation_subproof") {
subproof_886(args, ret, err);
}
if (name == "livesIn_185_subproof") {
subproof_887(args, ret, err);
}
if (name == "livesIn_186_negation_subproof") {
subproof_888(args, ret, err);
}
if (name == "livesIn_186_subproof") {
subproof_889(args, ret, err);
}
if (name == "livesIn_187_negation_subproof") {
subproof_890(args, ret, err);
}
if (name == "livesIn_187_subproof") {
subproof_891(args, ret, err);
}
if (name == "livesIn_188_negation_subproof") {
subproof_892(args, ret, err);
}
if (name == "livesIn_188_subproof") {
subproof_893(args, ret, err);
}
if (name == "livesIn_189_negation_subproof") {
subproof_894(args, ret, err);
}
if (name == "livesIn_189_subproof") {
subproof_895(args, ret, err);
}
if (name == "livesIn_18_negation_subproof") {
subproof_896(args, ret, err);
}
if (name == "livesIn_18_subproof") {
subproof_897(args, ret, err);
}
if (name == "livesIn_190_negation_subproof") {
subproof_898(args, ret, err);
}
if (name == "livesIn_190_subproof") {
subproof_899(args, ret, err);
}
if (name == "livesIn_191_negation_subproof") {
subproof_900(args, ret, err);
}
if (name == "livesIn_191_subproof") {
subproof_901(args, ret, err);
}
if (name == "livesIn_192_negation_subproof") {
subproof_902(args, ret, err);
}
if (name == "livesIn_192_subproof") {
subproof_903(args, ret, err);
}
if (name == "livesIn_193_negation_subproof") {
subproof_904(args, ret, err);
}
if (name == "livesIn_193_subproof") {
subproof_905(args, ret, err);
}
if (name == "livesIn_194_negation_subproof") {
subproof_906(args, ret, err);
}
if (name == "livesIn_194_subproof") {
subproof_907(args, ret, err);
}
if (name == "livesIn_195_negation_subproof") {
subproof_908(args, ret, err);
}
if (name == "livesIn_195_subproof") {
subproof_909(args, ret, err);
}
if (name == "livesIn_196_negation_subproof") {
subproof_910(args, ret, err);
}
if (name == "livesIn_196_subproof") {
subproof_911(args, ret, err);
}
if (name == "livesIn_197_negation_subproof") {
subproof_912(args, ret, err);
}
if (name == "livesIn_197_subproof") {
subproof_913(args, ret, err);
}
if (name == "livesIn_198_negation_subproof") {
subproof_914(args, ret, err);
}
if (name == "livesIn_198_subproof") {
subproof_915(args, ret, err);
}
if (name == "livesIn_199_negation_subproof") {
subproof_916(args, ret, err);
}
if (name == "livesIn_199_subproof") {
subproof_917(args, ret, err);
}
if (name == "livesIn_19_negation_subproof") {
subproof_918(args, ret, err);
}
if (name == "livesIn_19_subproof") {
subproof_919(args, ret, err);
}
if (name == "livesIn_1_negation_subproof") {
subproof_920(args, ret, err);
}
if (name == "livesIn_1_subproof") {
subproof_921(args, ret, err);
}
if (name == "livesIn_200_negation_subproof") {
subproof_922(args, ret, err);
}
if (name == "livesIn_200_subproof") {
subproof_923(args, ret, err);
}
if (name == "livesIn_201_negation_subproof") {
subproof_924(args, ret, err);
}
if (name == "livesIn_201_subproof") {
subproof_925(args, ret, err);
}
if (name == "livesIn_202_negation_subproof") {
subproof_926(args, ret, err);
}
if (name == "livesIn_202_subproof") {
subproof_927(args, ret, err);
}
if (name == "livesIn_203_negation_subproof") {
subproof_928(args, ret, err);
}
if (name == "livesIn_203_subproof") {
subproof_929(args, ret, err);
}
if (name == "livesIn_204_negation_subproof") {
subproof_930(args, ret, err);
}
if (name == "livesIn_204_subproof") {
subproof_931(args, ret, err);
}
if (name == "livesIn_205_negation_subproof") {
subproof_932(args, ret, err);
}
if (name == "livesIn_205_subproof") {
subproof_933(args, ret, err);
}
if (name == "livesIn_206_negation_subproof") {
subproof_934(args, ret, err);
}
if (name == "livesIn_206_subproof") {
subproof_935(args, ret, err);
}
if (name == "livesIn_207_negation_subproof") {
subproof_936(args, ret, err);
}
if (name == "livesIn_207_subproof") {
subproof_937(args, ret, err);
}
if (name == "livesIn_208_negation_subproof") {
subproof_938(args, ret, err);
}
if (name == "livesIn_208_subproof") {
subproof_939(args, ret, err);
}
if (name == "livesIn_209_negation_subproof") {
subproof_940(args, ret, err);
}
if (name == "livesIn_209_subproof") {
subproof_941(args, ret, err);
}
if (name == "livesIn_20_negation_subproof") {
subproof_942(args, ret, err);
}
if (name == "livesIn_20_subproof") {
subproof_943(args, ret, err);
}
if (name == "livesIn_210_negation_subproof") {
subproof_944(args, ret, err);
}
if (name == "livesIn_210_subproof") {
subproof_945(args, ret, err);
}
if (name == "livesIn_211_negation_subproof") {
subproof_946(args, ret, err);
}
if (name == "livesIn_211_subproof") {
subproof_947(args, ret, err);
}
if (name == "livesIn_212_negation_subproof") {
subproof_948(args, ret, err);
}
if (name == "livesIn_212_subproof") {
subproof_949(args, ret, err);
}
if (name == "livesIn_213_negation_subproof") {
subproof_950(args, ret, err);
}
if (name == "livesIn_213_subproof") {
subproof_951(args, ret, err);
}
if (name == "livesIn_214_negation_subproof") {
subproof_952(args, ret, err);
}
if (name == "livesIn_214_subproof") {
subproof_953(args, ret, err);
}
if (name == "livesIn_215_negation_subproof") {
subproof_954(args, ret, err);
}
if (name == "livesIn_215_subproof") {
subproof_955(args, ret, err);
}
if (name == "livesIn_216_negation_subproof") {
subproof_956(args, ret, err);
}
if (name == "livesIn_216_subproof") {
subproof_957(args, ret, err);
}
if (name == "livesIn_217_negation_subproof") {
subproof_958(args, ret, err);
}
if (name == "livesIn_217_subproof") {
subproof_959(args, ret, err);
}
if (name == "livesIn_218_negation_subproof") {
subproof_960(args, ret, err);
}
if (name == "livesIn_218_subproof") {
subproof_961(args, ret, err);
}
if (name == "livesIn_219_negation_subproof") {
subproof_962(args, ret, err);
}
if (name == "livesIn_219_subproof") {
subproof_963(args, ret, err);
}
if (name == "livesIn_21_negation_subproof") {
subproof_964(args, ret, err);
}
if (name == "livesIn_21_subproof") {
subproof_965(args, ret, err);
}
if (name == "livesIn_220_negation_subproof") {
subproof_966(args, ret, err);
}
if (name == "livesIn_220_subproof") {
subproof_967(args, ret, err);
}
if (name == "livesIn_221_negation_subproof") {
subproof_968(args, ret, err);
}
if (name == "livesIn_221_subproof") {
subproof_969(args, ret, err);
}
if (name == "livesIn_222_negation_subproof") {
subproof_970(args, ret, err);
}
if (name == "livesIn_222_subproof") {
subproof_971(args, ret, err);
}
if (name == "livesIn_223_negation_subproof") {
subproof_972(args, ret, err);
}
if (name == "livesIn_223_subproof") {
subproof_973(args, ret, err);
}
if (name == "livesIn_224_negation_subproof") {
subproof_974(args, ret, err);
}
if (name == "livesIn_224_subproof") {
subproof_975(args, ret, err);
}
if (name == "livesIn_225_negation_subproof") {
subproof_976(args, ret, err);
}
if (name == "livesIn_225_subproof") {
subproof_977(args, ret, err);
}
if (name == "livesIn_226_negation_subproof") {
subproof_978(args, ret, err);
}
if (name == "livesIn_226_subproof") {
subproof_979(args, ret, err);
}
if (name == "livesIn_227_negation_subproof") {
subproof_980(args, ret, err);
}
if (name == "livesIn_227_subproof") {
subproof_981(args, ret, err);
}
if (name == "livesIn_228_negation_subproof") {
subproof_982(args, ret, err);
}
if (name == "livesIn_228_subproof") {
subproof_983(args, ret, err);
}
if (name == "livesIn_229_negation_subproof") {
subproof_984(args, ret, err);
}
if (name == "livesIn_229_subproof") {
subproof_985(args, ret, err);
}
if (name == "livesIn_22_negation_subproof") {
subproof_986(args, ret, err);
}
if (name == "livesIn_22_subproof") {
subproof_987(args, ret, err);
}
if (name == "livesIn_230_negation_subproof") {
subproof_988(args, ret, err);
}
if (name == "livesIn_230_subproof") {
subproof_989(args, ret, err);
}
if (name == "livesIn_231_negation_subproof") {
subproof_990(args, ret, err);
}
if (name == "livesIn_231_subproof") {
subproof_991(args, ret, err);
}
if (name == "livesIn_232_negation_subproof") {
subproof_992(args, ret, err);
}
if (name == "livesIn_232_subproof") {
subproof_993(args, ret, err);
}
if (name == "livesIn_233_negation_subproof") {
subproof_994(args, ret, err);
}
if (name == "livesIn_233_subproof") {
subproof_995(args, ret, err);
}
if (name == "livesIn_234_negation_subproof") {
subproof_996(args, ret, err);
}
if (name == "livesIn_234_subproof") {
subproof_997(args, ret, err);
}
if (name == "livesIn_235_negation_subproof") {
subproof_998(args, ret, err);
}
if (name == "livesIn_235_subproof") {
subproof_999(args, ret, err);
}
if (name == "livesIn_236_negation_subproof") {
subproof_1000(args, ret, err);
}
if (name == "livesIn_236_subproof") {
subproof_1001(args, ret, err);
}
if (name == "livesIn_237_negation_subproof") {
subproof_1002(args, ret, err);
}
if (name == "livesIn_237_subproof") {
subproof_1003(args, ret, err);
}
if (name == "livesIn_238_negation_subproof") {
subproof_1004(args, ret, err);
}
if (name == "livesIn_238_subproof") {
subproof_1005(args, ret, err);
}
if (name == "livesIn_239_negation_subproof") {
subproof_1006(args, ret, err);
}
if (name == "livesIn_239_subproof") {
subproof_1007(args, ret, err);
}
if (name == "livesIn_23_negation_subproof") {
subproof_1008(args, ret, err);
}
if (name == "livesIn_23_subproof") {
subproof_1009(args, ret, err);
}
if (name == "livesIn_240_negation_subproof") {
subproof_1010(args, ret, err);
}
if (name == "livesIn_240_subproof") {
subproof_1011(args, ret, err);
}
if (name == "livesIn_241_negation_subproof") {
subproof_1012(args, ret, err);
}
if (name == "livesIn_241_subproof") {
subproof_1013(args, ret, err);
}
if (name == "livesIn_242_negation_subproof") {
subproof_1014(args, ret, err);
}
if (name == "livesIn_242_subproof") {
subproof_1015(args, ret, err);
}
if (name == "livesIn_243_negation_subproof") {
subproof_1016(args, ret, err);
}
if (name == "livesIn_243_subproof") {
subproof_1017(args, ret, err);
}
if (name == "livesIn_244_negation_subproof") {
subproof_1018(args, ret, err);
}
if (name == "livesIn_244_subproof") {
subproof_1019(args, ret, err);
}
if (name == "livesIn_245_negation_subproof") {
subproof_1020(args, ret, err);
}
if (name == "livesIn_245_subproof") {
subproof_1021(args, ret, err);
}
if (name == "livesIn_246_negation_subproof") {
subproof_1022(args, ret, err);
}
if (name == "livesIn_246_subproof") {
subproof_1023(args, ret, err);
}
if (name == "livesIn_247_negation_subproof") {
subproof_1024(args, ret, err);
}
if (name == "livesIn_247_subproof") {
subproof_1025(args, ret, err);
}
if (name == "livesIn_248_negation_subproof") {
subproof_1026(args, ret, err);
}
if (name == "livesIn_248_subproof") {
subproof_1027(args, ret, err);
}
if (name == "livesIn_249_negation_subproof") {
subproof_1028(args, ret, err);
}
if (name == "livesIn_249_subproof") {
subproof_1029(args, ret, err);
}
if (name == "livesIn_24_negation_subproof") {
subproof_1030(args, ret, err);
}
if (name == "livesIn_24_subproof") {
subproof_1031(args, ret, err);
}
if (name == "livesIn_250_negation_subproof") {
subproof_1032(args, ret, err);
}
if (name == "livesIn_250_subproof") {
subproof_1033(args, ret, err);
}
if (name == "livesIn_251_negation_subproof") {
subproof_1034(args, ret, err);
}
if (name == "livesIn_251_subproof") {
subproof_1035(args, ret, err);
}
if (name == "livesIn_252_negation_subproof") {
subproof_1036(args, ret, err);
}
if (name == "livesIn_252_subproof") {
subproof_1037(args, ret, err);
}
if (name == "livesIn_253_negation_subproof") {
subproof_1038(args, ret, err);
}
if (name == "livesIn_253_subproof") {
subproof_1039(args, ret, err);
}
if (name == "livesIn_254_negation_subproof") {
subproof_1040(args, ret, err);
}
if (name == "livesIn_254_subproof") {
subproof_1041(args, ret, err);
}
if (name == "livesIn_255_negation_subproof") {
subproof_1042(args, ret, err);
}
if (name == "livesIn_255_subproof") {
subproof_1043(args, ret, err);
}
if (name == "livesIn_256_negation_subproof") {
subproof_1044(args, ret, err);
}
if (name == "livesIn_256_subproof") {
subproof_1045(args, ret, err);
}
if (name == "livesIn_257_negation_subproof") {
subproof_1046(args, ret, err);
}
if (name == "livesIn_257_subproof") {
subproof_1047(args, ret, err);
}
if (name == "livesIn_258_negation_subproof") {
subproof_1048(args, ret, err);
}
if (name == "livesIn_258_subproof") {
subproof_1049(args, ret, err);
}
if (name == "livesIn_259_negation_subproof") {
subproof_1050(args, ret, err);
}
if (name == "livesIn_259_subproof") {
subproof_1051(args, ret, err);
}
if (name == "livesIn_25_negation_subproof") {
subproof_1052(args, ret, err);
}
if (name == "livesIn_25_subproof") {
subproof_1053(args, ret, err);
}
if (name == "livesIn_260_negation_subproof") {
subproof_1054(args, ret, err);
}
if (name == "livesIn_260_subproof") {
subproof_1055(args, ret, err);
}
if (name == "livesIn_261_negation_subproof") {
subproof_1056(args, ret, err);
}
if (name == "livesIn_261_subproof") {
subproof_1057(args, ret, err);
}
if (name == "livesIn_262_negation_subproof") {
subproof_1058(args, ret, err);
}
if (name == "livesIn_262_subproof") {
subproof_1059(args, ret, err);
}
if (name == "livesIn_263_negation_subproof") {
subproof_1060(args, ret, err);
}
if (name == "livesIn_263_subproof") {
subproof_1061(args, ret, err);
}
if (name == "livesIn_264_negation_subproof") {
subproof_1062(args, ret, err);
}
if (name == "livesIn_264_subproof") {
subproof_1063(args, ret, err);
}
if (name == "livesIn_26_negation_subproof") {
subproof_1064(args, ret, err);
}
if (name == "livesIn_26_subproof") {
subproof_1065(args, ret, err);
}
if (name == "livesIn_27_negation_subproof") {
subproof_1066(args, ret, err);
}
if (name == "livesIn_27_subproof") {
subproof_1067(args, ret, err);
}
if (name == "livesIn_28_negation_subproof") {
subproof_1068(args, ret, err);
}
if (name == "livesIn_28_subproof") {
subproof_1069(args, ret, err);
}
if (name == "livesIn_29_negation_subproof") {
subproof_1070(args, ret, err);
}
if (name == "livesIn_29_subproof") {
subproof_1071(args, ret, err);
}
if (name == "livesIn_2_negation_subproof") {
subproof_1072(args, ret, err);
}
if (name == "livesIn_2_subproof") {
subproof_1073(args, ret, err);
}
if (name == "livesIn_30_negation_subproof") {
subproof_1074(args, ret, err);
}
if (name == "livesIn_30_subproof") {
subproof_1075(args, ret, err);
}
if (name == "livesIn_31_negation_subproof") {
subproof_1076(args, ret, err);
}
if (name == "livesIn_31_subproof") {
subproof_1077(args, ret, err);
}
if (name == "livesIn_32_negation_subproof") {
subproof_1078(args, ret, err);
}
if (name == "livesIn_32_subproof") {
subproof_1079(args, ret, err);
}
if (name == "livesIn_33_negation_subproof") {
subproof_1080(args, ret, err);
}
if (name == "livesIn_33_subproof") {
subproof_1081(args, ret, err);
}
if (name == "livesIn_34_negation_subproof") {
subproof_1082(args, ret, err);
}
if (name == "livesIn_34_subproof") {
subproof_1083(args, ret, err);
}
if (name == "livesIn_35_negation_subproof") {
subproof_1084(args, ret, err);
}
if (name == "livesIn_35_subproof") {
subproof_1085(args, ret, err);
}
if (name == "livesIn_36_negation_subproof") {
subproof_1086(args, ret, err);
}
if (name == "livesIn_36_subproof") {
subproof_1087(args, ret, err);
}
if (name == "livesIn_37_negation_subproof") {
subproof_1088(args, ret, err);
}
if (name == "livesIn_37_subproof") {
subproof_1089(args, ret, err);
}
if (name == "livesIn_38_negation_subproof") {
subproof_1090(args, ret, err);
}
if (name == "livesIn_38_subproof") {
subproof_1091(args, ret, err);
}
if (name == "livesIn_39_negation_subproof") {
subproof_1092(args, ret, err);
}
if (name == "livesIn_39_subproof") {
subproof_1093(args, ret, err);
}
if (name == "livesIn_3_negation_subproof") {
subproof_1094(args, ret, err);
}
if (name == "livesIn_3_subproof") {
subproof_1095(args, ret, err);
}
if (name == "livesIn_40_negation_subproof") {
subproof_1096(args, ret, err);
}
if (name == "livesIn_40_subproof") {
subproof_1097(args, ret, err);
}
if (name == "livesIn_41_negation_subproof") {
subproof_1098(args, ret, err);
}
if (name == "livesIn_41_subproof") {
subproof_1099(args, ret, err);
}
if (name == "livesIn_42_negation_subproof") {
subproof_1100(args, ret, err);
}
if (name == "livesIn_42_subproof") {
subproof_1101(args, ret, err);
}
if (name == "livesIn_43_negation_subproof") {
subproof_1102(args, ret, err);
}
if (name == "livesIn_43_subproof") {
subproof_1103(args, ret, err);
}
if (name == "livesIn_44_negation_subproof") {
subproof_1104(args, ret, err);
}
if (name == "livesIn_44_subproof") {
subproof_1105(args, ret, err);
}
if (name == "livesIn_45_negation_subproof") {
subproof_1106(args, ret, err);
}
if (name == "livesIn_45_subproof") {
subproof_1107(args, ret, err);
}
if (name == "livesIn_46_negation_subproof") {
subproof_1108(args, ret, err);
}
if (name == "livesIn_46_subproof") {
subproof_1109(args, ret, err);
}
if (name == "livesIn_47_negation_subproof") {
subproof_1110(args, ret, err);
}
if (name == "livesIn_47_subproof") {
subproof_1111(args, ret, err);
}
if (name == "livesIn_48_negation_subproof") {
subproof_1112(args, ret, err);
}
if (name == "livesIn_48_subproof") {
subproof_1113(args, ret, err);
}
if (name == "livesIn_49_negation_subproof") {
subproof_1114(args, ret, err);
}
if (name == "livesIn_49_subproof") {
subproof_1115(args, ret, err);
}
if (name == "livesIn_4_negation_subproof") {
subproof_1116(args, ret, err);
}
if (name == "livesIn_4_subproof") {
subproof_1117(args, ret, err);
}
if (name == "livesIn_50_negation_subproof") {
subproof_1118(args, ret, err);
}
if (name == "livesIn_50_subproof") {
subproof_1119(args, ret, err);
}
if (name == "livesIn_51_negation_subproof") {
subproof_1120(args, ret, err);
}
if (name == "livesIn_51_subproof") {
subproof_1121(args, ret, err);
}
if (name == "livesIn_52_negation_subproof") {
subproof_1122(args, ret, err);
}
if (name == "livesIn_52_subproof") {
subproof_1123(args, ret, err);
}
if (name == "livesIn_53_negation_subproof") {
subproof_1124(args, ret, err);
}
if (name == "livesIn_53_subproof") {
subproof_1125(args, ret, err);
}
if (name == "livesIn_54_negation_subproof") {
subproof_1126(args, ret, err);
}
if (name == "livesIn_54_subproof") {
subproof_1127(args, ret, err);
}
if (name == "livesIn_55_negation_subproof") {
subproof_1128(args, ret, err);
}
if (name == "livesIn_55_subproof") {
subproof_1129(args, ret, err);
}
if (name == "livesIn_56_negation_subproof") {
subproof_1130(args, ret, err);
}
if (name == "livesIn_56_subproof") {
subproof_1131(args, ret, err);
}
if (name == "livesIn_57_negation_subproof") {
subproof_1132(args, ret, err);
}
if (name == "livesIn_57_subproof") {
subproof_1133(args, ret, err);
}
if (name == "livesIn_58_negation_subproof") {
subproof_1134(args, ret, err);
}
if (name == "livesIn_58_subproof") {
subproof_1135(args, ret, err);
}
if (name == "livesIn_59_negation_subproof") {
subproof_1136(args, ret, err);
}
if (name == "livesIn_59_subproof") {
subproof_1137(args, ret, err);
}
if (name == "livesIn_5_negation_subproof") {
subproof_1138(args, ret, err);
}
if (name == "livesIn_5_subproof") {
subproof_1139(args, ret, err);
}
if (name == "livesIn_60_negation_subproof") {
subproof_1140(args, ret, err);
}
if (name == "livesIn_60_subproof") {
subproof_1141(args, ret, err);
}
if (name == "livesIn_61_negation_subproof") {
subproof_1142(args, ret, err);
}
if (name == "livesIn_61_subproof") {
subproof_1143(args, ret, err);
}
if (name == "livesIn_62_negation_subproof") {
subproof_1144(args, ret, err);
}
if (name == "livesIn_62_subproof") {
subproof_1145(args, ret, err);
}
if (name == "livesIn_63_negation_subproof") {
subproof_1146(args, ret, err);
}
if (name == "livesIn_63_subproof") {
subproof_1147(args, ret, err);
}
if (name == "livesIn_64_negation_subproof") {
subproof_1148(args, ret, err);
}
if (name == "livesIn_64_subproof") {
subproof_1149(args, ret, err);
}
if (name == "livesIn_65_negation_subproof") {
subproof_1150(args, ret, err);
}
if (name == "livesIn_65_subproof") {
subproof_1151(args, ret, err);
}
if (name == "livesIn_66_negation_subproof") {
subproof_1152(args, ret, err);
}
if (name == "livesIn_66_subproof") {
subproof_1153(args, ret, err);
}
if (name == "livesIn_67_negation_subproof") {
subproof_1154(args, ret, err);
}
if (name == "livesIn_67_subproof") {
subproof_1155(args, ret, err);
}
if (name == "livesIn_68_negation_subproof") {
subproof_1156(args, ret, err);
}
if (name == "livesIn_68_subproof") {
subproof_1157(args, ret, err);
}
if (name == "livesIn_69_negation_subproof") {
subproof_1158(args, ret, err);
}
if (name == "livesIn_69_subproof") {
subproof_1159(args, ret, err);
}
if (name == "livesIn_6_negation_subproof") {
subproof_1160(args, ret, err);
}
if (name == "livesIn_6_subproof") {
subproof_1161(args, ret, err);
}
if (name == "livesIn_70_negation_subproof") {
subproof_1162(args, ret, err);
}
if (name == "livesIn_70_subproof") {
subproof_1163(args, ret, err);
}
if (name == "livesIn_71_negation_subproof") {
subproof_1164(args, ret, err);
}
if (name == "livesIn_71_subproof") {
subproof_1165(args, ret, err);
}
if (name == "livesIn_72_negation_subproof") {
subproof_1166(args, ret, err);
}
if (name == "livesIn_72_subproof") {
subproof_1167(args, ret, err);
}
if (name == "livesIn_73_negation_subproof") {
subproof_1168(args, ret, err);
}
if (name == "livesIn_73_subproof") {
subproof_1169(args, ret, err);
}
if (name == "livesIn_74_negation_subproof") {
subproof_1170(args, ret, err);
}
if (name == "livesIn_74_subproof") {
subproof_1171(args, ret, err);
}
if (name == "livesIn_75_negation_subproof") {
subproof_1172(args, ret, err);
}
if (name == "livesIn_75_subproof") {
subproof_1173(args, ret, err);
}
if (name == "livesIn_76_negation_subproof") {
subproof_1174(args, ret, err);
}
if (name == "livesIn_76_subproof") {
subproof_1175(args, ret, err);
}
if (name == "livesIn_77_negation_subproof") {
subproof_1176(args, ret, err);
}
if (name == "livesIn_77_subproof") {
subproof_1177(args, ret, err);
}
if (name == "livesIn_78_negation_subproof") {
subproof_1178(args, ret, err);
}
if (name == "livesIn_78_subproof") {
subproof_1179(args, ret, err);
}
if (name == "livesIn_79_negation_subproof") {
subproof_1180(args, ret, err);
}
if (name == "livesIn_79_subproof") {
subproof_1181(args, ret, err);
}
if (name == "livesIn_7_negation_subproof") {
subproof_1182(args, ret, err);
}
if (name == "livesIn_7_subproof") {
subproof_1183(args, ret, err);
}
if (name == "livesIn_80_negation_subproof") {
subproof_1184(args, ret, err);
}
if (name == "livesIn_80_subproof") {
subproof_1185(args, ret, err);
}
if (name == "livesIn_81_negation_subproof") {
subproof_1186(args, ret, err);
}
if (name == "livesIn_81_subproof") {
subproof_1187(args, ret, err);
}
if (name == "livesIn_82_negation_subproof") {
subproof_1188(args, ret, err);
}
if (name == "livesIn_82_subproof") {
subproof_1189(args, ret, err);
}
if (name == "livesIn_83_negation_subproof") {
subproof_1190(args, ret, err);
}
if (name == "livesIn_83_subproof") {
subproof_1191(args, ret, err);
}
if (name == "livesIn_84_negation_subproof") {
subproof_1192(args, ret, err);
}
if (name == "livesIn_84_subproof") {
subproof_1193(args, ret, err);
}
if (name == "livesIn_85_negation_subproof") {
subproof_1194(args, ret, err);
}
if (name == "livesIn_85_subproof") {
subproof_1195(args, ret, err);
}
if (name == "livesIn_86_negation_subproof") {
subproof_1196(args, ret, err);
}
if (name == "livesIn_86_subproof") {
subproof_1197(args, ret, err);
}
if (name == "livesIn_87_negation_subproof") {
subproof_1198(args, ret, err);
}
if (name == "livesIn_87_subproof") {
subproof_1199(args, ret, err);
}
if (name == "livesIn_88_negation_subproof") {
subproof_1200(args, ret, err);
}
if (name == "livesIn_88_subproof") {
subproof_1201(args, ret, err);
}
if (name == "livesIn_89_negation_subproof") {
subproof_1202(args, ret, err);
}
if (name == "livesIn_89_subproof") {
subproof_1203(args, ret, err);
}
if (name == "livesIn_8_negation_subproof") {
subproof_1204(args, ret, err);
}
if (name == "livesIn_8_subproof") {
subproof_1205(args, ret, err);
}
if (name == "livesIn_90_negation_subproof") {
subproof_1206(args, ret, err);
}
if (name == "livesIn_90_subproof") {
subproof_1207(args, ret, err);
}
if (name == "livesIn_91_negation_subproof") {
subproof_1208(args, ret, err);
}
if (name == "livesIn_91_subproof") {
subproof_1209(args, ret, err);
}
if (name == "livesIn_92_negation_subproof") {
subproof_1210(args, ret, err);
}
if (name == "livesIn_92_subproof") {
subproof_1211(args, ret, err);
}
if (name == "livesIn_93_negation_subproof") {
subproof_1212(args, ret, err);
}
if (name == "livesIn_93_subproof") {
subproof_1213(args, ret, err);
}
if (name == "livesIn_94_negation_subproof") {
subproof_1214(args, ret, err);
}
if (name == "livesIn_94_subproof") {
subproof_1215(args, ret, err);
}
if (name == "livesIn_95_negation_subproof") {
subproof_1216(args, ret, err);
}
if (name == "livesIn_95_subproof") {
subproof_1217(args, ret, err);
}
if (name == "livesIn_96_negation_subproof") {
subproof_1218(args, ret, err);
}
if (name == "livesIn_96_subproof") {
subproof_1219(args, ret, err);
}
if (name == "livesIn_97_negation_subproof") {
subproof_1220(args, ret, err);
}
if (name == "livesIn_97_subproof") {
subproof_1221(args, ret, err);
}
if (name == "livesIn_98_negation_subproof") {
subproof_1222(args, ret, err);
}
if (name == "livesIn_98_subproof") {
subproof_1223(args, ret, err);
}
if (name == "livesIn_99_negation_subproof") {
subproof_1224(args, ret, err);
}
if (name == "livesIn_99_subproof") {
subproof_1225(args, ret, err);
}
if (name == "livesIn_9_negation_subproof") {
subproof_1226(args, ret, err);
}
if (name == "livesIn_9_subproof") {
subproof_1227(args, ret, err);
}
}
void subproof_0(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(363),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(363));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(363),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(363));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_2(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(364),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(364));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_3(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(364),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(364));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_4(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(365),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(365));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_5(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(365),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(365));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_6(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(366),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(366));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_7(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(366),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(366));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_8(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(367),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(367));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_9(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(367),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(367));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_10(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(368),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(368));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_11(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(368),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(368));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_12(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(369),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(369));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_13(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(369),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(369));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_14(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(370),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(370));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_15(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(370),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(370));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_16(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(371),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(371));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_17(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(371),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(371));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_18(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(372),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(372));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_19(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(372),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(372));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_20(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(273),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(273));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_21(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(273),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(273));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_22(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(373),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(373));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_23(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(373),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(373));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_24(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(374),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(374));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_25(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(374),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(374));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_26(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(375),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(375));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_27(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(375),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(375));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_28(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(376),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(376));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_29(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(376),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(376));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_30(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(377),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(377));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_31(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(377),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(377));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_32(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(378),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(378));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_33(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(378),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(378));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_34(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(379),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(379));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_35(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(379),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(379));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_36(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(380),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(380));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_37(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(380),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(380));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_38(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(381),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(381));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_39(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(381),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(381));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_40(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(382),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(382));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_41(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(382),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(382));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_42(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(274),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(274));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_43(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(274),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(274));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_44(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(383),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(383));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_45(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(383),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(383));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_46(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(384),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(384));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_47(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(384),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(384));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_48(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(385),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(385));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_49(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(385));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_50(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(386),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(386));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_51(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(386),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(386));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_52(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(387),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(387));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_53(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(387),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(387));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_54(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(388),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(388));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_55(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(388),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(388));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_56(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(389),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(389));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_57(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(389),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(389));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_58(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(390),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(390));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_59(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(390),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(390));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_60(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(391),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(391));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_61(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(391),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(391));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_62(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(392),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(392));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_63(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(392),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(392));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_64(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(275),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(275));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_65(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(275),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(275));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_66(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(393),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(393));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_67(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(393),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(393));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_68(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(394),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(394));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_69(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(394));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_70(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(395),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(395));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_71(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(395),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(395));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_72(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(396),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(396));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_73(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(396),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(396));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_74(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(397),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(397));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_75(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(397),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(397));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_76(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(398),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(398));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_77(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(398),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(398));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_78(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(399),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(399));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_79(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(399));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_80(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(400),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(400));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_81(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(400),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(400));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_82(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(401),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(401));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_83(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(401),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(401));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_84(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(402),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(402));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_85(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(402),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(402));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_86(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(276),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(276));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_87(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(276),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(276));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_88(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(403),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(403));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_89(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(403),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(403));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_90(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(404),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(404));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_91(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(404),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(404));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_92(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(405),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(405));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_93(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(405),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(405));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_94(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(406),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(406));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_95(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(406),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(406));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_96(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(407),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(407));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_97(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(407),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(407));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_98(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(408),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(408));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_99(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(408),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(408));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(409),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(409));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(409),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(409));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(410),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(410));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(410),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(410));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(411),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(411));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(411),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(411));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(412),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(412));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(412),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(412));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(277),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(277));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(277),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(277));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(413),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(413));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(413),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(413));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(414),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(414));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(414),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(414));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(415),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(415));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(415),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(415));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(416),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(416));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(416),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(416));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(417),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(417));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(417),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(417));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(418),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(418));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(418),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(418));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(419),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(419));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(419),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(419));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(420),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(420));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(420));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(421),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(421));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(421),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(421));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(422),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(422));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(422),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(422));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(278),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(278));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(278),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(278));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(423),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(423));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(423),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(423));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(424),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(424));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(424),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(424));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(425),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(425));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(425),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(425));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(426),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(426));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(426),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(426));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(427),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(427));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(427),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(427));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(428),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(428));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(428),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(428));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(429),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(429));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(429),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(429));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(430),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(430));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(430),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(430));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(431),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(431));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(431),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(431));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(432),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(432));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(432),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(432));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(279),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(279));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(279),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(279));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(433),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(433));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(433),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(433));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(434),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(434));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(434),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(434));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(435),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(435));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(435),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(435));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(436),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(436));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(436),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(436));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(437),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(437));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(437),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(437));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(438),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(438));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(438),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(438));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(439),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(439));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(439),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(439));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(440),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(440));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(440),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(440));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(441),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(441));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(441),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(441));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(442),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(442));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(442),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(442));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(280),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(280));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(280),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(280));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(443),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(443));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(443),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(443));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(444),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(444));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(444),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(444));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(445),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(445));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(445),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(445));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(446),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(446));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(446),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(446));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(447),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(447));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(447),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(447));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(448),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(448));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(448),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(448));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(449),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(449));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(449),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(449));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(450),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(450));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(450),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(450));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(451),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(451));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(451),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(451));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(452),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(452));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(452),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(452));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(281),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(281));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(281));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(453),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(453));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(453),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(453));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(454),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(454));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(454),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(454));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(455),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(455));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(455),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(455));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(456),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(456));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(456),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(456));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(457),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(457));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(457),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(457));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(458),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(458));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(458),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(458));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(459),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(459));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(459),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(459));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(460),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(460));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(460),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(460));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(461),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(461));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(461),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(461));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(462),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(462));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(462),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(462));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(282),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(282));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(282),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(282));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(264),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(264));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(264),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(264));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(463),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(463));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(463),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(463));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(464),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(464));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(464),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(464));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(465),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(465));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(465),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(465));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_228(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(466),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(466));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_229(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(466),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(466));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_230(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(467),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(467));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_231(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(467),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(467));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_232(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(468),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(468));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_233(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(468),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(468));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_234(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(469),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(469));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_235(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(469),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(469));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_236(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(470),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(470));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_237(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(470),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(470));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_238(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(471),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(471));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_239(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(471),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(471));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_240(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(472),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(472));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_241(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(472),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(472));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_242(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(283),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(283));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_243(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(283),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(283));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_244(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(473),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(473));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_245(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(473),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(473));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_246(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(474),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(474));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_247(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(474),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(474));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_248(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(475),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(475));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_249(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(475),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(475));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_250(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(476),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(476));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_251(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(476),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(476));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_252(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(477),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(477));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_253(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(477),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(477));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_254(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(478),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(478));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_255(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(478),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(478));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_256(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(479),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(479));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_257(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(479),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(479));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_258(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(480),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(480));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_259(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(480),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(480));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_260(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(481),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(481));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_261(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(481),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(481));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_262(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(482),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(482));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_263(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(482),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(482));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_264(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(284),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(284));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_265(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(284),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(284));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_266(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(483),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(483));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_267(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(483),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(483));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_268(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(484),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(484));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_269(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(484),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(484));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_270(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(485),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(485));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_271(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(485),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(485));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_272(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(486),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(486));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_273(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(486),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(486));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_274(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(487),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(487));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_275(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(487),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(487));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_276(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(488),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(488));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_277(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(488),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(488));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_278(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(489),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(489));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_279(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(489),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(489));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_280(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(490),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(490));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_281(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(490),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(490));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_282(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(491),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(491));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_283(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(491),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(491));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_284(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(492),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(492));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_285(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(492),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(492));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_286(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(285),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(285));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_287(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(285),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(285));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_288(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(493),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(493));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_289(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(493),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(493));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_290(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(494),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(494));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_291(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(494),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(494));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_292(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(495),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(495));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_293(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(495),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(495));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_294(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(496),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(496));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_295(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(496),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(496));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_296(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(497),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(497));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_297(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(497),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(497));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_298(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(498),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(498));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_299(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(498),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(498));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_300(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(499),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(499));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_301(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(499),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(499));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_302(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(500),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(500));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_303(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(500),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(500));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_304(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(501),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(501));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_305(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(501),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(501));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_306(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(502),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(502));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_307(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(502),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(502));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_308(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(286),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(286));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_309(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(286),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(286));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_310(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(503),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(503));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_311(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(503),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(503));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_312(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(504),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(504));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_313(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(504),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(504));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_314(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(505),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(505));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_315(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(505),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(505));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_316(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(506),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(506));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_317(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(506),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(506));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_318(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(507),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(507));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_319(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(507),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(507));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_320(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(508),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(508));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_321(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(508),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(508));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_322(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(509),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(509));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_323(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(509),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(509));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_324(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(510),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(510));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_325(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(510),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(510));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_326(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(511),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(511));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_327(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(511),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(511));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_328(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(512),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(512));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_329(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(512),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(512));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_330(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(287),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(287));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_331(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(287),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(287));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_332(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(513),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(513));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_333(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(513),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(513));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_334(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(514),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(514));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_335(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(514));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_336(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(515),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(515));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_337(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(515),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(515));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_338(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(516),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(516));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_339(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(516),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(516));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_340(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(517),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(517));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_341(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(517),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(517));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_342(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(518),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(518));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_343(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(518),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(518));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_344(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(519),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(519));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_345(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(519),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(519));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_346(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(520),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(520));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_347(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(520),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(520));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_348(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(521),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(521));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_349(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(521),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(521));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_350(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(522),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(522));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_351(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(522),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(522));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_352(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(288),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(288));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_353(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(288),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(288));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_354(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(523),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(523));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_355(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(523),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(523));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_356(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(524),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(524));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_357(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(524),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(524));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_358(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(525),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(525));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_359(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(525));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_360(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(526),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(526));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_361(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(526),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(526));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_362(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(527),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(527));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_363(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(527));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_364(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(528),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(528));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_365(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(528),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(528));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_366(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(529),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(529));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_367(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(529),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(529));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_368(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(530),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(530));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_369(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(530),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(530));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_370(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(531),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(531));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_371(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(531),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(531));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_372(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(532),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(532));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_373(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(532),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(532));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_374(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(289),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(289));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_375(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(289),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(289));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_376(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(533),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(533));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_377(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(533),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(533));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_378(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(534),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(534));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_379(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(534),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(534));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_380(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(535),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(535));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_381(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(535),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(535));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_382(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(536),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(536));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_383(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(536),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(536));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_384(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(537),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(537));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_385(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(537),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(537));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_386(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(538),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(538));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_387(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(538),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(538));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_388(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(539),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(539));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_389(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(539),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(539));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_390(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(540),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(540));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_391(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(540),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(540));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_392(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(541),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(541));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_393(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(541),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(541));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_394(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(542),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(542));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_395(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(542),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(542));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_396(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(290),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(290));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_397(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(290),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(290));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_398(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(543),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(543));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_399(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(543),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(543));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_400(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(544),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(544));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_401(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(544));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_402(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(545),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(545));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_403(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(545),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(545));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_404(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(546),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(546));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_405(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(546));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_406(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(547),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(547));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_407(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(547),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(547));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_408(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(548),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(548));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_409(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(548),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(548));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_410(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(549),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(549));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_411(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(549));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_412(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(550),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(550));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_413(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(550),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(550));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_414(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(551),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(551));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_415(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(551),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(551));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_416(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(552),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(552));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_417(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(552),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(552));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_418(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(291),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(291));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_419(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(291),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(291));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_420(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(553),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(553));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_421(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(553),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(553));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_422(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(554),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(554));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_423(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(554),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(554));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_424(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(555),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(555));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_425(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(555));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_426(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(556),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(556));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_427(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(556),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(556));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_428(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(557),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(557));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_429(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(557));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_430(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(558),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(558));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_431(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(558),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(558));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_432(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(559),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(559));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_433(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(559),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(559));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_434(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(560),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(560));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_435(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(560));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_436(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(561),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(561));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_437(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(561),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(561));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_438(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(562),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(562));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_439(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(562),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(562));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_440(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(292),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(292));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_441(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(292),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(292));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_442(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(265),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(265));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_443(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(265),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(265));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_444(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(563),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(563));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_445(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(563));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_446(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(564),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(564));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_447(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(564));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_448(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(565),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(565));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_449(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(565),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(565));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_450(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(566),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(566));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_451(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(566),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(566));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_452(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(567),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(567));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_453(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(567),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(567));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_454(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(568),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(568));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_455(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(568),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(568));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_456(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(569),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(569));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_457(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(569));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_458(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(570),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(570));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_459(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(570),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(570));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_460(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(571),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(571));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_461(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(571),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(571));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_462(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(572),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(572));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_463(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(572),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(572));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_464(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(293),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(293));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_465(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(293),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(293));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_466(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(573),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(573));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_467(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(573),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(573));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_468(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(574),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(574));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_469(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(574));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_470(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(575),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(575));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_471(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(575),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(575));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_472(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(576),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(576));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_473(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(576),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(576));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_474(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(577),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(577));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_475(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(577));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_476(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(578),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(578));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_477(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(578),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(578));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_478(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(579),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(579));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_479(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(579));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_480(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(580),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(580));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_481(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(580),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(580));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_482(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(581),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(581));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_483(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(581),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(581));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_484(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(582),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(582));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_485(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(582),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(582));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_486(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(294),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(294));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_487(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(294),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(294));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_488(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(583),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(583));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_489(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(583),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(583));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_490(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(584),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(584));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_491(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(584),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(584));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_492(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(585),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(585));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_493(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(585),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(585));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_494(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(586),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(586));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_495(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(586),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(586));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_496(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(587),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(587));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_497(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(587),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(587));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_498(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(588),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(588));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_499(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(588),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(588));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_500(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(589),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(589));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_501(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(589),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(589));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_502(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(590),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(590));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_503(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(590),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(590));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_504(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(591),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(591));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_505(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(591),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(591));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_506(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(592),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(592));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_507(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(592),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(592));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_508(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(295),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(295));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_509(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(295),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(295));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_510(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(593),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(593));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_511(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(593),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(593));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_512(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(594),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(594));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_513(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(594),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(594));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_514(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(595),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(595));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_515(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(595),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(595));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_516(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(596),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(596));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_517(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(596),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(596));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_518(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(597),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(597));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_519(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(597),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(597));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_520(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(598),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(598));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_521(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(598),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(598));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_522(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(599),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(599));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_523(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(599),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(599));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_524(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(600),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(600));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_525(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(600),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(600));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_526(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(601),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(601));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_527(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(601),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(601));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_528(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(602),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(602));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_529(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(602),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(602));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_530(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(296),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(296));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_531(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(296));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_532(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(603),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(603));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_533(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(603),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(603));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_534(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(604),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(604));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_535(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(604),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(604));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_536(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(605),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(605));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_537(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(605),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(605));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_538(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(606),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(606));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_539(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(606),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(606));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_540(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(607),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(607));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_541(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(607),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(607));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_542(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(608),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(608));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_543(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(608));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_544(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(609),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(609));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_545(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(609),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(609));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_546(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(610),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(610));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_547(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(610),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(610));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_548(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(611),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(611));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_549(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(611),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(611));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_550(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(612),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(612));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_551(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(612),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_2(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(612));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_552(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(297),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(297));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_553(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(297),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(297));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_554(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(613),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(613));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_555(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_10_inv_0->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(613),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_10_inv_0->equalRange_1(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(613));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_556(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(298),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(298));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_557(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(298),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(298));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_558(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(299),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(299));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_559(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(299));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_560(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(300),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(300));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_561(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(300),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(300));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_562(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(301),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(301));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_563(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(301),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(301));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_564(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(302),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(302));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_565(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(302),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(302));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_566(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(266),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(266));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_567(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(266),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(266));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_568(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(303),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(303));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_569(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(303),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(303));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_570(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(304),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(304));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_571(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(304));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_572(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(305),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(305));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_573(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(305),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(305));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_574(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(306),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(306));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_575(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(306),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(306));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_576(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(307),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(307));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_577(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(307));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_578(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(308),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(308));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_579(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(308),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(308));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_580(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(309),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(309));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_581(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(309),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(309));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_582(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(310),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(310));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_583(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(310),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(310));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_584(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(311),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(311));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_585(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(311),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(311));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_586(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(312),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(312));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_587(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(312),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(312));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_588(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(267),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(267));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_589(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(267),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(267));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_590(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(313),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(313));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_591(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(313),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(313));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_592(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(314),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(314));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_593(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(314),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(314));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_594(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(315),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(315));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_595(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(315),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(315));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_596(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(316),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(316));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_597(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(316),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(316));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_598(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(317),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(317));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_599(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(317),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(317));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_600(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(318),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(318));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_601(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(318),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(318));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_602(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(319),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(319));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_603(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(319),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(319));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_604(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(320),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(320));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_605(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(320),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(320));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_606(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(321),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(321));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_607(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(321),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(321));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_608(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(322),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(322));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_609(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(322),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(322));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_610(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(268),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(268));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_611(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(268));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_612(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(323),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(323));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_613(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(323),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(323));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_614(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(324),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(324));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_615(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(324),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(324));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_616(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(325),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(325));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_617(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(325),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(325));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_618(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(326),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(326));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_619(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(326),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(326));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_620(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(327),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(327));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_621(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(327),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(327));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_622(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(328),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(328));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_623(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(328),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(328));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_624(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(329),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(329));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_625(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(329),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(329));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_626(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(330),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(330));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_627(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(330),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(330));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_628(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(331),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(331));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_629(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(331),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(331));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_630(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(332),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(332));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_631(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(332));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_632(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(269),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(269));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_633(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(269),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(269));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_634(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(333),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(333));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_635(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(333),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(333));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_636(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(334),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(334));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_637(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(334),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(334));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_638(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(335),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(335));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_639(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(335),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(335));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_640(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(336),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(336));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_641(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(336),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(336));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_642(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(337),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(337));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_643(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(337),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(337));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_644(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(338),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(338));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_645(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(338),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(338));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_646(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(339),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(339));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_647(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(339),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(339));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_648(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(340),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(340));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_649(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(340),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(340));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_650(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(341),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(341));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_651(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(341),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(341));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_652(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(342),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(342));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_653(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(342));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_654(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(270),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(270));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_655(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(270),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(270));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_656(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(343),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(343));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_657(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(343),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(343));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_658(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(344),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(344));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_659(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(344),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(344));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_660(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(345),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(345));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_661(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(345),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(345));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_662(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(346),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(346));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_663(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(346),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(346));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_664(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(347),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(347));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_665(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(347),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(347));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_666(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(348),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(348));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_667(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(348),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(348));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_668(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(349),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(349));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_669(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(349),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(349));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_670(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(350),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(350));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_671(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(350),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(350));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_672(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(351),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(351));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_673(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(351),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(351));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_674(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(352),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(352));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_675(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(352),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(352));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_676(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(271),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(271));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_677(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(271),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(271));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_678(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(353),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(353));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_679(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(353),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(353));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_680(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(354),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(354));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_681(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(354),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(354));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_682(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(355),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(355));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_683(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(355));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_684(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(356),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(356));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_685(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(356),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(356));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_686(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(357),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(357));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_687(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(357));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_688(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(358),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(358));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_689(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(358),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(358));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_690(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(359),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(359));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_691(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(359),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(359));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_692(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(360),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(360));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_693(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(360),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(360));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_694(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(361),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(361));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
if(!rel_10_inv_0->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_10_inv_0_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_695(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_10_inv_0->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_10_inv_0_op_ctxt,rel_10_inv_0->createContext());
const Tuple<RamDomain,3> key({{RamDomain(361),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_10_inv_0->equalRange_3(key,READ_OP_CONTEXT(rel_10_inv_0_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(361));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_696(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(362),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(362));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_697(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(362),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(362));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_698(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(272),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(272));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_699(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(272),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(272));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_700(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(99),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(99));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_701(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(99));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_702(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(100),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(100));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_703(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(100),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(100));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_704(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(101),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(101));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_705(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(101),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(101));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_706(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(102),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(102));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_707(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(102),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(102));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_708(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(103),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(103));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_709(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(103),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(103));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_710(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(104),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(104));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_711(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(104),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(104));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_712(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(105),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(105));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_713(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(105));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_714(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(106),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(106));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_715(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(106));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_716(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(107),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(107));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_717(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(107));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_718(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(108),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(108));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_719(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(108),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(108));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_720(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_721(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_722(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(109),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(109));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_723(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(109),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(109));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_724(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(110),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(110));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_725(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(110),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(110));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_726(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(111),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(111));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_727(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(111),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(111));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_728(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(112),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(112));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_729(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(112),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(112));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_730(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(113),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(113));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_731(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(113),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(113));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_732(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(114),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(114));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_733(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(114),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(114));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_734(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(115),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(115));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_735(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(115),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(115));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_736(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(116),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(116));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_737(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(116),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(116));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_738(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(117),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(117));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_739(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(117));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_740(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(118),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(118));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_741(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(118));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_742(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(10),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(10));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_743(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(10));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_744(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(119),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(119));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_745(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(119),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(119));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_746(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(120),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(120));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_747(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(120),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(120));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_748(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(121),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(121));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_749(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(121),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(121));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_750(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(122),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(122));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_751(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(122),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(122));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_752(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(123),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(123));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_753(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(123),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(123));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_754(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(124),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(124));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_755(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(124),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(124));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_756(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(125),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(125));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_757(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(125),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(125));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_758(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(126),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(126));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_759(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(126),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(126));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_760(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(127),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(127));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_761(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(127),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(127));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_762(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(128),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(128));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_763(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(128),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(128));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_764(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_765(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_766(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(129),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(129));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_767(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(129),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(129));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_768(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(130),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(130));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_769(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(130));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_770(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(131),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(131));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_771(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(131),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(131));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_772(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(132),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(132));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_773(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(132),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(132));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_774(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(133),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(133));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_775(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(133),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(133));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_776(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(134),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(134));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_777(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(134),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(134));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_778(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(135),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(135));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_779(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(135),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(135));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_780(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(136),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(136));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_781(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(136),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(136));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_782(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(137),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(137));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_783(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(137),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(137));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_784(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(138),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(138));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_785(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(138));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_786(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(12),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(12));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_787(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(12),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(12));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_788(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(139),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(139));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_789(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(139));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_790(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(140),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(140));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_791(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(140),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(140));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_792(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(141),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(141));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_793(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(141),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(141));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_794(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(142),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(142));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_795(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(142),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(142));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_796(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(143),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(143));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_797(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(143),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(143));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_798(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(144),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(144));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_799(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(144),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(144));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_800(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(145),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(145));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_801(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(145));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_802(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(146),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(146));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_803(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(146));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_804(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(147),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(147));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_805(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(147),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(147));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_806(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(148),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(148));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_807(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(148));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_808(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(13),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(13));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_809(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(13));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_810(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(149),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(149));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_811(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(149),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(149));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_812(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(150),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(150));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_813(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(150),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(150));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_814(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(151),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(151));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_815(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(151),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(151));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_816(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(152),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(152));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_817(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(152),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(152));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_818(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(153),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(153));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_819(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(153),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(153));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_820(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(154),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(154));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_821(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(154),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(154));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_822(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(155),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(155));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_823(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(155),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(155));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_824(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(156),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(156));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_825(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(156),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(156));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_826(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(157),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(157));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_827(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(157),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(157));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_828(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(158),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(158));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_829(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(158),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(158));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_830(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(14),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(14));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_831(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(14),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(14));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_832(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(159),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(159));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_833(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(159),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(159));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_834(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(160),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(160));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_835(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(160),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(160));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_836(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(161),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(161));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_837(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(161),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(161));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_838(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(162),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(162));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_839(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(162),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(162));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_840(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(163),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(163));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_841(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(163),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(163));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_842(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(164),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(164));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_843(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(164),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(164));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_844(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(165),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(165));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_845(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(165),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(165));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_846(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(166),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(166));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_847(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(166),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(166));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_848(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(167),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(167));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_849(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(167));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_850(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(168),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(168));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_851(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(168),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(168));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_852(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_853(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_854(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(169),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(169));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_855(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(169),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(169));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_856(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(170),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(170));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_857(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(170));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_858(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(171),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(171));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_859(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(171),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(171));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_860(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(172),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(172));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_861(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(172),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(172));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_862(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(173),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(173));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_863(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(173),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(173));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_864(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(174),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(174));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_865(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(174),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(174));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_866(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(175),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(175));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_867(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(175),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(175));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_868(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(176),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(176));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_869(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(176),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(176));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_870(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(177),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(177));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_871(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(177),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(177));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_872(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(178),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(178));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_873(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(178),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(178));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_874(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(16),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(16));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_875(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(16));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_876(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(179),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(179));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_877(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(179),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(179));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_878(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(180),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(180));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_879(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(180),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(180));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_880(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(181),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(181));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_881(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(181),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(181));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_882(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(182),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(182));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_883(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(182),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(182));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_884(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(183),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(183));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_885(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(183),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(183));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_886(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(184),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(184));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_887(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(184),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(184));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_888(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(185),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(185));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_889(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(185),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(185));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_890(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(186),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(186));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_891(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(186),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(186));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_892(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(187),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(187));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_893(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(187),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(187));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_894(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(188),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(188));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_895(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(188),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(188));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_896(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(17),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(17));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_897(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(17));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_898(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(189),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(189));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_899(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(189),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(189));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_900(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(190),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(190));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_901(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(190),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_4_year->equalRange_2(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(190));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_902(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(191),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(191));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_903(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(191),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_4_year->equalRange_1(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(191));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_904(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(192),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(192));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_905(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(192),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(192));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_906(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(193),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(193));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_907(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(193));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_908(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(194),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(194));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_909(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(194),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(194));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_910(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(195),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(195));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_911(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(195),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(195));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_912(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(196),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(196));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_913(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(196),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(196));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_914(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(197),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(197));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_915(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(197),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(197));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_916(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(198),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(198));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_917(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(198),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(198));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_918(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(18),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(18));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_919(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(18));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_920(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(0),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(0));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_921(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_922(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(199),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(199));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_923(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(199),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(199));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_924(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(200),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(200));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_925(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(200),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(200));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_926(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(201),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(201));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_927(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(201),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(201));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_928(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(202),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(202));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_929(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(202),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(202));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_930(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(203),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(203));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_931(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(203),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(203));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_932(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(204),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(204));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_933(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(204),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(204));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_934(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(205),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(205));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_935(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(205),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(205));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_936(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(206),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(206));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_937(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(206));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_938(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(207),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(207));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_939(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(207),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(207));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_940(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(208),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(208));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_941(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(208),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(208));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_942(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_943(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_944(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(209),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(209));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_945(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(209),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(209));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_946(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(210),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(210));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_947(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(210),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(210));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_948(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(211),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(211));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_949(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(211),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(211));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_950(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(212),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(212));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_951(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(212),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(212));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_952(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(213),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(213));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_953(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(213),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(213));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_954(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(214),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(214));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_955(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(214),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(214));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_956(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(215),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(215));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_957(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(215),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(215));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_958(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(216),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(216));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_959(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(216),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(216));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_960(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(217),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(217));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_961(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(217),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(217));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_962(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(218),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(218));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_963(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(218),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(218));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_964(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(20),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(20));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_965(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(20));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_966(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(219),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(219));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_967(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(219));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_968(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(220),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(220));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_969(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(220));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_970(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(221),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(221));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_971(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(221),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(221));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_972(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(222),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(222));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_973(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(222),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(222));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_974(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(223),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(223));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_975(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(223),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(223));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_976(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(224),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(224));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_977(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(224),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(224));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_978(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(225),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(225));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_979(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(225),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(225));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_980(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(226),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(226));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_981(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(226),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_writer->equalRange_2(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(226));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_982(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(227),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(227));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_983(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(227),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_writer->equalRange_1(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(227));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_984(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(228),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(228));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_985(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(228),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(228));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_986(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_987(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_988(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(229),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(229));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_989(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(229),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(229));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_990(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(230),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(230));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_991(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(230));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_992(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(231),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(231));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_993(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(231),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(231));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_994(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(232),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(232));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_995(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(232),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(232));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_996(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(233),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(233));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_997(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(233),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(233));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_998(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(234),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(234));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_999(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(234),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(234));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1000(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(235),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(235));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1001(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(235),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(235));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1002(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(236),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(236));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1003(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(236),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(236));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1004(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(237),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(237));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1005(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(237),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(237));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1006(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(238),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(238));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1007(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(238),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(238));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1008(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1009(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1010(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(239),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(239));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1011(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(239),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(239));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1012(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(240),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(240));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1013(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(240),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(240));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1014(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(241),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(241));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1015(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(241),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(241));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1016(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(242),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(242));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1017(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(242),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(242));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1018(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(243),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(243));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1019(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(243),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(243));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1020(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(244),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(244));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1021(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(244),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(244));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1022(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(245),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(245));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1023(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(245),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(245));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1024(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(246),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(246));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1025(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(246),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(246));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1026(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(247),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(247));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1027(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(247));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1028(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(248),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(248));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1029(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(248),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(248));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1030(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1031(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1032(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(249),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(249));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1033(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(249),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(249));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1034(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(250),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(250));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1035(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(250),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_2(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(250));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1036(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(251),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(251));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1037(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(251),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_1(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(251));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1038(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(252),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(252));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1039(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(252),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(252));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1040(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(253),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(253));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1041(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(253),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(253));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1042(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(254),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(254));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1043(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(254));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1044(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(255),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(255));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1045(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(255),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(255));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1046(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(256),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(256));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1047(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(256),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(256));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1048(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(257),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(257));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1049(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(257),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(257));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1050(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(258),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(258));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1051(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(258),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(258));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1052(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(24),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(24));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1053(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(24));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1054(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(259),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(259));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1055(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(259));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1056(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(260),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(260));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1057(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(260),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(260));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1058(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(261),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(261));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1059(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(261),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(261));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1060(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(262),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(262));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1061(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(262),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_2(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(262));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1062(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(263),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(263));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1063(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_7_livesIn->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(263),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_7_livesIn->equalRange_1(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(263));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1064(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1065(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1066(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(26),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(26));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1067(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(26));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1068(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(27),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(27));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1069(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(27));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1070(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1071(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1072(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1073(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1074(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(29),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(29));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1075(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(29));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1076(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1077(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1078(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(31),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(31));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1079(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(31));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1080(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1081(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1082(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1083(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1084(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1085(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1086(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1087(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1088(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1089(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1090(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1091(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1092(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1093(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1094(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1095(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1096(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1097(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1098(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1099(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(44),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(44));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(44));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(45),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(45));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(45));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(46),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(46));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(46));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(48),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(48));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(48));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(49),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(49));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(49));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(52),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(52));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(52));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(53),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(53));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(53));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(55),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(55));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(55),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(55));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(4),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(4));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(4));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(60),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(60));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(60),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(60));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(66),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(66));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(66));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(5),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(5));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(5));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(71),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(71));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(71));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_years->equalRange_3(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(76),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(76));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(76));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(77),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(77));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(77),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(77));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(80),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(80));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(80));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(81),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(81));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(81));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_years->equalRange_2(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(83),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(83));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
if(!rel_6_years->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_years_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
if(!rel_7_livesIn->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_livesIn_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_7_livesIn->empty()) && !(rel_6_years->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_years_op_ctxt,rel_6_years->createContext());
CREATE_OP_CONTEXT(rel_7_livesIn_op_ctxt,rel_7_livesIn->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_years->equalRange_1(key,READ_OP_CONTEXT(rel_6_years_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_7_livesIn->equalRange_3(key,READ_OP_CONTEXT(rel_7_livesIn_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(83));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(84),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(84));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(84));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(87),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(87));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(87));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
if(!rel_3_writer->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_writer_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_3_writer->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_writer_op_ctxt,rel_3_writer->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_writer->equalRange_3(key,READ_OP_CONTEXT(rel_3_writer_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
void subproof_1206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(89),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(89));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(89));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(90),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(90));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(90));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(91),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(91));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(91),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(91));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(92),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(92));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(92),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(92));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(93),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(93));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(93),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(93));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(94),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(94));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(94),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_2(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(94));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(95),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(95));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
();return;
}
void subproof_1219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_5_yearOfRelease->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(95),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_5_yearOfRelease->equalRange_1(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(95));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(96),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(96));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(96),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(96));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(97),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(97));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(97),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(97));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(98),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(98));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
if(!rel_5_yearOfRelease->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
if(!rel_4_year->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_year_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
();return;
}
void subproof_1225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_4_year->empty()) && !(rel_5_yearOfRelease->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_year_op_ctxt,rel_4_year->createContext());
CREATE_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt,rel_5_yearOfRelease->createContext());
const Tuple<RamDomain,3> key({{RamDomain(98),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_5_yearOfRelease->equalRange_3(key,READ_OP_CONTEXT(rel_5_yearOfRelease_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_year->equalRange_3(key,READ_OP_CONTEXT(rel_4_year_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(98));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
();}
return;
}
void subproof_1226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8));
err.push_back(false);
}
();[&](){
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
if(!rel_2_wikisourcelangProperty->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
();[&](){
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
();return;
}
void subproof_1227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(!(rel_2_wikisourcelangProperty->empty()) && !(rel_1_Rule->empty())) {
[&](){
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt,rel_2_wikisourcelangProperty->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_2_wikisourcelangProperty->equalRange_3(key,READ_OP_CONTEXT(rel_2_wikisourcelangProperty_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
();}
return;
}
};
SouffleProgram *newInstance_souffle_small(){return new Sf_souffle_small;}
SymbolTable *getST_souffle_small(SouffleProgram *p){return &reinterpret_cast<Sf_souffle_small*>(p)->symTable;}

#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_souffle_small: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_souffle_small();
};
public:
factory_Sf_souffle_small() : ProgramFactory("souffle_small"){}
};
static factory_Sf_souffle_small __factory_Sf_souffle_small_instance;
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(rules.dl)",
R"(.)",
R"(.)",
false,
R"()",
1,
-1);
if (!opt.parse(argc,argv)) return 1;
souffle::Sf_souffle_small obj;
#if defined(_OPENMP) 
obj.setNumThreads(opt.getNumJobs());

#endif
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir(), opt.getStratumIndex());
explain(obj, false);
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}

#endif

#line 2 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

#line 4 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[417] =
    {   0,
        0,    0,    0,    0,    0,    0,  119,  117,  116,  115,
       84,  117,  117,   70,   89,   73,   74,   85,   71,   75,
       72,   78,   87,   97,   97,   76,   77,   92,   83,   93,
      103,   86,   68,   69,   88,   54,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       90,   67,   91,  109,  111,  110,  114,  112,  118,  114,
      116,   82,    0,  104,    0,    0,  105,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  107,    0,    0,
       97,    0,  100,    0,   94,   79,   80,   81,  103,  103,
       52,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  109,  108,  112,    0,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  106,   96,   98,   99,  103,  103,  103,
      103,  103,  103,   19,  103,  103,  103,  103,   31,  103,
      103,  103,  103,  103,  103,  103,  103,  103,   26,  103,
      103,  103,   51,  103,   50,   53,  103,   32,  103,  103,
      103,  103,  103,  103,  103,   56,  103,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  101,  102,  103,  103,  103,
      103,   18,   21,   47,   22,   23,  103,   20,  103,  103,
      103,  103,  103,  103,  103,   25,   28,   27,  103,  103,
       30,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,   57,    0,    0,    0,    0,    0,
        0,    0,    0,   16,    0,    0,    0,    0,    0,    0,
        0,    0,  103,  103,  103,  103,   24,   49,  103,  103,
       55,   42,   58,  103,   39,   45,   29,  103,  103,  103,
      103,  103,   33,  103,  103,  103,  103,  103,  103,  103,
        8,    1,    0,    0,    9,    0,    0,    0,    0,    0,

       14,    0,    0,    0,    7,    0,  103,  103,  103,  103,
      103,  103,  103,   43,  103,  103,   38,  103,  103,  103,
       34,   35,  103,  103,  103,  103,    0,    0,    3,    0,
        0,    0,    0,    0,    0,    0,   95,  103,  103,  103,
       17,  103,    0,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,    0,   15,    0,    0,    4,    0,   13,
        0,    0,   64,   66,   65,  103,    0,   37,  103,   46,
      103,  103,   36,   59,  103,  103,  103,    2,    0,    0,
        0,    0,    0,  103,    0,   44,  103,   41,   60,   61,
      103,    0,    0,   12,    0,    0,  103,    0,  103,  103,

        6,    0,    5,    0,  103,    0,   40,   62,    0,    0,
       48,    0,   10,   11,   63,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    1,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   28,   27,   29,   30,
       25,   25,   31,   25,   25,   32,   25,   33,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       34,   35,   36,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   25,   25,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   25,   59,
       60,   61,   62,   63,   64,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    1,    1,    3,    3,    3,    1,
        1,    1,    1,    1,    4,    1,    3,    3,    3,    3,
        4,    4,    4,    1,    1,    1,    1,    4,    3,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1
    } ;

static const flex_int16_t yy_base[426] =
    {   0,
        0,    0,   62,   63,   65,   73,  493,  494,  490,  494,
      468,   64,  487,  494,  494,  494,  494,  494,  494,  494,
      494,   59,   61,   64,   69,  475,  494,   69,  494,  465,
        0,  494,  494,  494,  494,  449,   36,   74,   51,  433,
      446,  434,   81,   69,   47,   80,  429,  443,   39,   68,
      494,  494,  494,    0,  494,  465,  494,  478,  494,  100,
      477,  494,  112,  494,  475,  474,  494,  425,  432,  417,
      423,  425,  414,   86,   91,  410,  409,  494,  465,  131,
      136,  124,  494,    0,  494,  494,  494,  494,    0,  126,
        0,  411,  416,  414,  410,  416,  416,  407,  409,  403,

      407,  102,  403,  408,  112,  405,  403,  399,  401,  116,
      412,  400,  401,  410,  405,  390,  402,  397,  393,  123,
       31,  404,  384,    0,  494,  438,  141,  494,  436,  389,
      396,  386,  122,  386,  385,  392,  376,  388,  391,  126,
      380,  376,  424,  494,  163,  149,  369,  394,  391,  392,
      371,  379,  364,    0,  376,  131,  375,  363,    0,  369,
      359,  364,  370,  357,  364,  353,  367,  352,    0,  353,
      359,  364,    0,  354,    0,    0,  121,    0,  351,  348,
      351,  355,  343,  350,  342,    0,  139,  353,  343,  346,
      352,  344,  335,  333,  342,  348,  344,  334,  331,  334,

      338,  332,  341,  337,  169,  494,  494,  347,  350,  344,
      329,    0,    0,    0,    0,  318,  331,    0,  332,  333,
      315,  322,  326,  318,  311,    0,    0,    0,  325,  319,
        0,  314,  324,  305,  307,  304,  316,  315,  314,  300,
      307,  297,  297,  302,    0,  349,  348,  293,  291,  345,
      290,  289,  301,  494,  286,  288,  339,  291,  283,  287,
      335,  180,  307,  303,  305,  283,    0,  294,  288,  283,
        0,    0,    0,  286,    0,    0,    0,  280,  282,  270,
      278,  269,    0,  279,  272,  267,  269,  270,  264,  262,
      494,  494,  265,  273,  494,  312,  258,  258,  255,  263,

      494,  270,  253,  259,  494,  173,  268,  267,  266,  262,
      260,  287,  250,    0,  252,  251,    0,  255,  249,  238,
        0,    0,  255,  253,  245,  244,  236,  246,  494,  241,
      249,  284,  243,  282,  236,  244,  183,  243,  242,  241,
        0,  235,  235,  221,  225,  233,  234,  211,  223,  214,
      226,  218,  222,  264,  494,  204,  208,  494,  220,  494,
      201,  205,    0,    0,    0,  212,  208,    0,  215,    0,
      217,  213,    0,    0,  201,  209,  203,  494,  209,  191,
      248,  206,  188,  204,  197,    0,  197,    0,    0,    0,
      201,  241,  190,  494,  239,  188,  183,  199,  194,  184,

      494,  162,  494,  161,  160,  137,    0,    0,  169,  125,
        0,   68,  494,  494,  494,  494,  206,  210,  214,  218,
      220,  224,  228,  232,   82
    } ;

static const flex_int16_t yy_def[426] =
    {   0,
      416,    1,  417,  417,  418,  418,  416,  416,  416,  416,
      416,  419,  420,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      421,  416,  416,  416,  416,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      416,  416,  416,  422,  416,  416,  416,  416,  416,  423,
      416,  416,  419,  416,  419,  420,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  424,  416,
      416,  416,  416,  425,  416,  416,  416,  416,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  422,  416,  416,  423,  416,  423,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  424,  416,  416,  416,  425,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  421,  421,  421,
      421,  421,  416,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  421,  421,  421,  421,  416,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  416,  416,  416,
      416,  416,  416,  421,  416,  421,  421,  421,  421,  421,
      421,  416,  416,  416,  416,  416,  421,  416,  421,  421,

      416,  416,  416,  416,  421,  416,  421,  421,  416,  416,
      421,  416,  416,  416,  416,    0,  416,  416,  416,  416,
      416,  416,  416,  416,  416
    } ;

static const flex_int16_t yy_nxt[559] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   25,   26,
       27,   28,   29,   30,   31,   32,   31,   31,   31,   31,
       31,   31,   31,   33,    8,   34,   35,   36,   37,   38,
       39,   31,   40,   41,   31,   31,   42,   43,   44,   45,
       46,   47,   31,   48,   49,   50,   31,   31,   31,   31,
       31,   51,   52,   53,   55,   55,   58,   59,   64,   60,
      185,   78,   56,   56,   58,   59,   79,   60,   80,  186,
       81,   81,   81,   80,  147,   81,   81,   81,   86,  100,
       91,   87,   92,  113,  120,  121,  101,  114,   65,   68,

       69,  102,   70,   82,  128,   71,   72,  110,   73,   74,
       75,  111,   93,   76,   77,  112,   64,  415,  122,  106,
       83,  123,   84,   94,   95,   83,  414,   96,   97,   98,
      107,  108,   99,  115,  129,  136,  116,  117,  139,  109,
      146,  146,  137,  138,  140,  128,   65,  145,  145,  145,
       80,  161,   81,   81,   81,  148,  149,  150,  162,  165,
      171,  183,  192,  166,  201,  146,  146,  232,  193,  233,
      413,  172,  202,  194,  173,  129,  184,  205,  215,  145,
      145,  145,  241,  412,  216,  262,  262,  262,  242,  337,
      337,  337,   83,  243,  306,  244,  262,  262,  262,  337,

      337,  337,  411,  410,  409,  206,   54,   54,   54,   54,
       57,   57,   57,   57,   63,   63,   63,   63,   66,   66,
       66,   66,   89,   89,  124,  408,  124,  124,  127,  127,
      127,  127,  143,  143,  143,  143,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,

      343,  342,  341,  340,  339,  338,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  240,  239,  238,  237,

      236,  235,  234,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  214,  213,
      212,  211,  210,  209,  208,  207,  144,  204,  203,  200,
      199,  198,  197,  196,  195,  191,  190,  189,  416,  126,
      188,  187,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  170,  169,  168,  167,  164,  163,  160,  159,  158,
      157,  156,  155,  154,  153,  152,  151,  144,  142,  141,
      135,  134,  133,  132,  131,  130,   67,  416,   61,  126,
      125,  119,  118,  105,  104,  103,   90,   88,   85,   67,
       62,   61,  416,    7,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416
    } ;

static const flex_int16_t yy_chk[559] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    5,   12,    5,
      121,   23,    3,    4,    6,    6,   23,    6,   24,  121,
       24,   24,   24,   25,  425,   25,   25,   25,   28,   39,
       37,   28,   37,   45,   49,   49,   39,   45,   12,   22,

       22,   39,   22,   24,   60,   22,   22,   44,   22,   22,
       22,   44,   38,   22,   22,   44,   63,  412,   50,   43,
       24,   50,   24,   38,   38,   25,  410,   38,   38,   38,
       43,   43,   38,   46,   60,   74,   46,   46,   75,   43,
       82,   82,   74,   74,   75,  127,   63,   80,   80,   80,
       81,  102,   81,   81,   81,   90,   90,   90,  102,  105,
      110,  120,  133,  105,  140,  146,  146,  177,  133,  177,
      409,  110,  140,  133,  110,  127,  120,  145,  156,  145,
      145,  145,  187,  406,  156,  205,  205,  205,  187,  306,
      306,  306,   81,  187,  262,  187,  262,  262,  262,  337,

      337,  337,  405,  404,  402,  146,  417,  417,  417,  417,
      418,  418,  418,  418,  419,  419,  419,  419,  420,  420,
      420,  420,  421,  421,  422,  400,  422,  422,  423,  423,
      423,  423,  424,  424,  424,  424,  399,  398,  397,  396,
      395,  393,  392,  391,  387,  385,  384,  383,  382,  381,
      380,  379,  377,  376,  375,  372,  371,  369,  367,  366,
      362,  361,  359,  357,  356,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  340,  339,
      338,  336,  335,  334,  333,  332,  331,  330,  328,  327,
      326,  325,  324,  323,  320,  319,  318,  316,  315,  313,

      312,  311,  310,  309,  308,  307,  304,  303,  302,  300,
      299,  298,  297,  296,  294,  293,  290,  289,  288,  287,
      286,  285,  284,  282,  281,  280,  279,  278,  274,  270,
      269,  268,  266,  265,  264,  263,  261,  260,  259,  258,
      257,  256,  255,  253,  252,  251,  250,  249,  248,  247,
      246,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  230,  229,  225,  224,  223,  222,
      221,  220,  219,  217,  216,  211,  210,  209,  208,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  185,  184,  183,  182,

      181,  180,  179,  174,  172,  171,  170,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  158,  157,  155,  153,
      152,  151,  150,  149,  148,  147,  143,  142,  141,  139,
      138,  137,  136,  135,  134,  132,  131,  130,  129,  126,
      123,  122,  119,  118,  117,  116,  115,  114,  113,  112,
      111,  109,  108,  107,  106,  104,  103,  101,  100,   99,
       98,   97,   96,   95,   94,   93,   92,   79,   77,   76,
       73,   72,   71,   70,   69,   68,   66,   65,   61,   58,
       56,   48,   47,   42,   41,   40,   36,   30,   26,   13,
       11,    9,    7,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[119] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,     };

static const flex_int16_t yy_rule_linenum[118] =
    {   0,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  149,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  208,  209,  229,  230,  231,  232,
      233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  278,  279,  280,  281,  282,

      283,  284,  285,  288,  291,  339,  345,  352,  360,  361,
      362,  365,  366,  382,  384,  385,  393
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/scanner.ll"
/*
 * Souffle - A Datalog Compiler
 * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved
 * Licensed under the Universal Permissive License v 1.0 as shown at:
 * - https://opensource.org/licenses/UPL
 * - <souffle root>/licenses/SOUFFLE-UPL.txt
 */
/************************************************************************
 *
 * @file scanner.ll
 *
 * @brief Scanner for the datalog parser
 *
 ***********************************************************************/
#line 19 "parser/scanner.ll"

#if defined(__clang__)
# pragma clang diagnostic ignored "-Wunneeded-internal-declaration"
#elif defined(__GNUG__)
# pragma GCC diagnostic ignored "-Wsign-compare"
#endif

    #include <cstdio>
    #ifndef _MSC_VER
    #include <libgen.h>
    #endif
    #include <cctype>
    #include <sys/stat.h>
    #include <stack>
    #include <string>
    #include <sstream>
    #include <cassert>
    #ifndef _MSC_VER
    #include <unistd.h>
    #endif
    #include <cstring>

    #include "ast/Program.h"

    #ifdef _MSC_VER
    #define YY_NO_UNISTD_H
    #endif

    #include "parser/parser.hh"
    #include "parser/SrcLocation.h"
    #include "parser/ParserDriver.h"

    #define YYLTYPE SrcLocation

    #define YY_DECL yy::parser::symbol_type yylex(souffle::ParserDriver& driver, yyscan_t yyscanner)
    YY_DECL;

    #include "souffle/RamTypes.h"

    #include "souffle/utility/StringUtil.h"
    #include "souffle/utility/FileUtil.h"
    #include "souffle/utility/StreamUtil.h"
    #include "souffle/utility/MiscUtil.h"
    #include "souffle/utility/FunctionalUtil.h"
    #include "souffle/utility/ContainerUtil.h"
    #include "souffle/utility/CacheUtil.h"
    #include "souffle/utility/ParallelUtil.h"

    #define register

#define yylloc yyget_extra(yyscanner)->yylloc

#define yyfilename yyget_extra(yyscanner)->yyfilename

#define yyinfo (*yyget_extra(yyscanner))

    /* Execute when matching */
#define YY_USER_ACTION  { \
    yylloc.start = Point({ yylineno, yycolumn }); \
    yycolumn += yyleng;             \
    yylloc.end   = Point({ yylineno, yycolumn }); \
    yylloc.setFile(yyfilename); \
}

    // scan a string with escape sequences, skipping surrounding double-quotes if any.
    std::string lexString(souffle::ParserDriver& driver, const SrcLocation& loc, const char* text) {
      std::string result;
      const size_t start = (text[0] == '"' ? 1 : 0);
      const size_t end = strlen(text) - (text[0] == '"' ? 1 : 0);
      bool error = false;
      char error_char;
      for (size_t i = start; i < end; i++) {
        if (text[i] == '\\' && i + 1 < end) {
          switch (text[i+1]) {
            case '"':  result += '"'; break;
            case '\'': result += '\''; break;
            case '\\': result += '\\'; break;
            case 'a':  result += '\a'; break;
            case 'b':  result += '\b'; break;
            case 'f':  result += '\f'; break;
            case 'n':  result += '\n'; break;
            case 'r':  result += '\r'; break;
            case 't':  result += '\t'; break;
            case 'v':  result += '\v'; break;
            default:
              error_char = text[i+1];
              error = true;
              break;
          }
          i++;
        } else {
          result += text[i];
        }
        if (error) {
          break;
        }
      }
      if (error) driver.error(loc, std::string("Unknown escape sequence \\") + error_char);
      return result;
    }

#line 928 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

/* Add line number tracking */
#line 931 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

#define INITIAL 0
#define COMMENT 1
#define INCLUDE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#define YY_EXTRA_TYPE struct ScannerInfo *

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 130 "parser/scanner.ll"

#line 1258 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 417 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 494 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 118 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 118 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 119 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 131 "parser/scanner.ll"
{ return yy::parser::make_DECL(yylloc); }
	YY_BREAK
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "parser/scanner.ll"
{ return yy::parser::make_FUNCTOR(yylloc); }
	YY_BREAK
case 3:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 133 "parser/scanner.ll"
{ return yy::parser::make_INPUT_DECL(yylloc); }
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "parser/scanner.ll"
{ return yy::parser::make_OUTPUT_DECL(yylloc); }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 135 "parser/scanner.ll"
{ return yy::parser::make_PRINTSIZE_DECL(yylloc); }
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 136 "parser/scanner.ll"
{ return yy::parser::make_LIMITSIZE_DECL(yylloc); }
	YY_BREAK
case 7:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 137 "parser/scanner.ll"
{ return yy::parser::make_TYPE(yylloc); }
	YY_BREAK
case 8:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 138 "parser/scanner.ll"
{ return yy::parser::make_COMPONENT(yylloc); }
	YY_BREAK
case 9:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 139 "parser/scanner.ll"
{ return yy::parser::make_INSTANTIATE(yylloc); }
	YY_BREAK
case 10:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 140 "parser/scanner.ll"
{ return yy::parser::make_NUMBER_TYPE(yylloc); }
	YY_BREAK
case 11:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 141 "parser/scanner.ll"
{ return yy::parser::make_SYMBOL_TYPE(yylloc); }
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 142 "parser/scanner.ll"
{ return yy::parser::make_OVERRIDE(yylloc); }
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 143 "parser/scanner.ll"
{ return yy::parser::make_PRAGMA(yylloc); }
	YY_BREAK
case 14:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 144 "parser/scanner.ll"
{ return yy::parser::make_PLAN(yylloc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "parser/scanner.ll"
{
                                        yyinfo.LastIncludeDirectiveLoc = yylloc;
                                        BEGIN(INCLUDE);
                                      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 149 "parser/scanner.ll"
{
                                        if (!driver.canEnterOnce(yylloc)) {
                                          yypop_buffer_state(yyscanner);
                                          yyinfo.pop();
                                          if (!YY_CURRENT_BUFFER) {
                                            return yy::parser::make_END(yylloc);
                                          }
                                        }
                                      }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 158 "parser/scanner.ll"
{ return yy::parser::make_AUTOINC(yylloc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 159 "parser/scanner.ll"
{ return yy::parser::make_BW_AND(yylloc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 160 "parser/scanner.ll"
{ return yy::parser::make_BW_OR(yylloc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 161 "parser/scanner.ll"
{ return yy::parser::make_BW_XOR(yylloc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "parser/scanner.ll"
{ return yy::parser::make_BW_NOT(yylloc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 163 "parser/scanner.ll"
{ return yy::parser::make_BW_SHIFT_L(yylloc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "parser/scanner.ll"
{ return yy::parser::make_BW_SHIFT_R(yylloc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 165 "parser/scanner.ll"
{ return yy::parser::make_BW_SHIFT_R_UNSIGNED(yylloc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 166 "parser/scanner.ll"
{ return yy::parser::make_L_AND(yylloc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 167 "parser/scanner.ll"
{ return yy::parser::make_L_OR(yylloc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 168 "parser/scanner.ll"
{ return yy::parser::make_L_XOR(yylloc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "parser/scanner.ll"
{ return yy::parser::make_L_NOT(yylloc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "parser/scanner.ll"
{ return yy::parser::make_TMATCH(yylloc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "parser/scanner.ll"
{ return yy::parser::make_MEAN(yylloc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "parser/scanner.ll"
{ return yy::parser::make_CAT(yylloc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 173 "parser/scanner.ll"
{ return yy::parser::make_ORD(yylloc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 174 "parser/scanner.ll"
{ return yy::parser::make_RANGE(yylloc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "parser/scanner.ll"
{ return yy::parser::make_STRLEN(yylloc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 176 "parser/scanner.ll"
{ return yy::parser::make_SUBSTR(yylloc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "parser/scanner.ll"
{ return yy::parser::make_STATEFUL(yylloc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 178 "parser/scanner.ll"
{ return yy::parser::make_TCONTAINS(yylloc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 179 "parser/scanner.ll"
{ return yy::parser::make_OUTPUT_QUALIFIER(yylloc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 180 "parser/scanner.ll"
{ return yy::parser::make_INPUT_QUALIFIER(yylloc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 181 "parser/scanner.ll"
{ return yy::parser::make_OVERRIDABLE_QUALIFIER(yylloc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 182 "parser/scanner.ll"
{ return yy::parser::make_PRINTSIZE_QUALIFIER(yylloc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 183 "parser/scanner.ll"
{ return yy::parser::make_EQREL_QUALIFIER(yylloc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 184 "parser/scanner.ll"
{ return yy::parser::make_INLINE_QUALIFIER(yylloc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 185 "parser/scanner.ll"
{ return yy::parser::make_NO_INLINE_QUALIFIER(yylloc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 186 "parser/scanner.ll"
{ return yy::parser::make_MAGIC_QUALIFIER(yylloc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "parser/scanner.ll"
{ return yy::parser::make_NO_MAGIC_QUALIFIER(yylloc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 188 "parser/scanner.ll"
{ return yy::parser::make_BRIE_QUALIFIER(yylloc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 189 "parser/scanner.ll"
{ return yy::parser::make_BTREE_DELETE_QUALIFIER(yylloc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 190 "parser/scanner.ll"
{ return yy::parser::make_BTREE_QUALIFIER(yylloc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 191 "parser/scanner.ll"
{ return yy::parser::make_MIN(yylloc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 192 "parser/scanner.ll"
{ return yy::parser::make_MAX(yylloc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 193 "parser/scanner.ll"
{ return yy::parser::make_AS(yylloc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 194 "parser/scanner.ll"
{ return yy::parser::make_NIL(yylloc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "parser/scanner.ll"
{ return yy::parser::make_UNDERSCORE(yylloc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 196 "parser/scanner.ll"
{ return yy::parser::make_COUNT(yylloc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 197 "parser/scanner.ll"
{ return yy::parser::make_SUM(yylloc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 198 "parser/scanner.ll"
{ return yy::parser::make_TRUELIT(yylloc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 199 "parser/scanner.ll"
{ return yy::parser::make_FALSELIT(yylloc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 200 "parser/scanner.ll"
{ return yy::parser::make_TOFLOAT(yylloc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 201 "parser/scanner.ll"
{ return yy::parser::make_TONUMBER(yylloc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 202 "parser/scanner.ll"
{ return yy::parser::make_TOSTRING(yylloc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 203 "parser/scanner.ll"
{ return yy::parser::make_TOUNSIGNED(yylloc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 204 "parser/scanner.ll"
{ return yy::parser::make_CHOICEDOMAIN(yylloc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 205 "parser/scanner.ll"
{
                                        return yy::parser::make_STRING(yylloc.file->Reported, yylloc);
                                      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 208 "parser/scanner.ll"
{ return yy::parser::make_NUMBER(std::to_string(yylineno), yylloc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 209 "parser/scanner.ll"
{
                                          std::string result;
                                          const IncludeStack* incl = yylloc.file.get();
                                          const Point* pos = &incl->IncludePos;
                                          // skip top
                                          if (incl) incl = incl->ParentStack.get();

                                          bool first = true;
                                          while(incl) {
                                            std::stringstream concat;
                                            concat << incl->Reported << ":" << *pos;
                                            if (!first) concat << ';';
                                            concat << result;
                                            result = concat.str();
                                            first = false;
                                            pos = &incl->IncludePos;
                                            incl = incl->ParentStack.get();
                                          }
                                          return yy::parser::make_STRING(result, yylloc);
                                      }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 229 "parser/scanner.ll"
{ return yy::parser::make_PIPE(yylloc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 230 "parser/scanner.ll"
{ return yy::parser::make_LBRACKET(yylloc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 231 "parser/scanner.ll"
{ return yy::parser::make_RBRACKET(yylloc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 232 "parser/scanner.ll"
{ return yy::parser::make_DOLLAR(yylloc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "parser/scanner.ll"
{ return yy::parser::make_PLUS(yylloc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "parser/scanner.ll"
{ return yy::parser::make_MINUS(yylloc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 235 "parser/scanner.ll"
{ return yy::parser::make_LPAREN(yylloc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 236 "parser/scanner.ll"
{ return yy::parser::make_RPAREN(yylloc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "parser/scanner.ll"
{ return yy::parser::make_COMMA(yylloc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "parser/scanner.ll"
{ return yy::parser::make_COLON(yylloc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 239 "parser/scanner.ll"
{ return yy::parser::make_SEMICOLON(yylloc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 240 "parser/scanner.ll"
{ return yy::parser::make_DOT(yylloc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 241 "parser/scanner.ll"
{ return yy::parser::make_SUBTYPE(yylloc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 242 "parser/scanner.ll"
{ return yy::parser::make_LE(yylloc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 243 "parser/scanner.ll"
{ return yy::parser::make_GE(yylloc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 244 "parser/scanner.ll"
{ return yy::parser::make_NE(yylloc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 245 "parser/scanner.ll"
{ return yy::parser::make_EQUALS(yylloc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 246 "parser/scanner.ll"
{ return yy::parser::make_EXCLAMATION(yylloc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 247 "parser/scanner.ll"
{ return yy::parser::make_STAR(yylloc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 248 "parser/scanner.ll"
{ return yy::parser::make_AT(yylloc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 249 "parser/scanner.ll"
{ return yy::parser::make_SLASH(yylloc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "parser/scanner.ll"
{ return yy::parser::make_CARET(yylloc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 251 "parser/scanner.ll"
{ return yy::parser::make_PERCENT(yylloc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 252 "parser/scanner.ll"
{ return yy::parser::make_LBRACE(yylloc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 253 "parser/scanner.ll"
{ return yy::parser::make_RBRACE(yylloc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 254 "parser/scanner.ll"
{ return yy::parser::make_LT(yylloc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 255 "parser/scanner.ll"
{ return yy::parser::make_GT(yylloc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 256 "parser/scanner.ll"
{ return yy::parser::make_IF(yylloc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 257 "parser/scanner.ll"
{
                                        try {
                                        char *token = std::strtok(yytext, ".");
                                        int i = 0;
                                        int vals[4];
                                        while (token != NULL) {
                                          vals[i] = std::stoi(token);
                                          if(vals[i] > 255) {
                                            driver.error(yylloc, "IP out of range");
                                            return yy::parser::make_NUMBER("0", yylloc);
                                          }
                                          token = std::strtok(NULL, ".");
                                          ++i;
                                        }
                                        int ipnumber = (vals[0]<<24) + (vals[1]<<16) + (vals[2]<<8) + vals[3];
                                        return yy::parser::make_NUMBER(std::to_string(ipnumber), yylloc);
                                        } catch(...) {
                                          driver.error(yylloc, "IP out of range");
                                          return yy::parser::make_NUMBER("0", yylloc);
                                        }
                                      }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 278 "parser/scanner.ll"
{ return yy::parser::make_FLOAT(yytext, yylloc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 279 "parser/scanner.ll"
{ return yy::parser::make_NUMBER(yytext, yylloc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 280 "parser/scanner.ll"
{ return yy::parser::make_NUMBER(yytext, yylloc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 281 "parser/scanner.ll"
{ return yy::parser::make_NUMBER(yytext, yylloc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 282 "parser/scanner.ll"
{ return yy::parser::make_UNSIGNED(yytext, yylloc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 283 "parser/scanner.ll"
{ return yy::parser::make_UNSIGNED(yytext, yylloc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 284 "parser/scanner.ll"
{ return yy::parser::make_UNSIGNED(yytext, yylloc); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 285 "parser/scanner.ll"
{
                                        return yy::parser::make_IDENT(yytext, yylloc);
                                      }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 288 "parser/scanner.ll"
{
                                        return yy::parser::make_STRING(lexString(driver, yylloc, yytext), yylloc);
                                      }
	YY_BREAK
case 105:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 291 "parser/scanner.ll"
{
                                        /* formats:
                                          "#" linenum filename
                                          "#" linenum filename 1
                                          "#" linenum filename 2
                                          "#line" linenum
                                          "#line" linenum filename
                                        */
                                        std::unique_ptr<char[]> fname_ptr = std::make_unique<char[]>(yyleng+1);
                                        char* fname = fname_ptr.get();
                                        fname[0] = 0;
                                        int lineno = 0;
                                        int flag = 0;

                                        if ((sscanf(yytext,"# %d \"%[^\"]\" %d",&lineno,fname,&flag)>=2) ||
                                            (sscanf(yytext,"#line %d \"%[^\"]\" %d",&lineno,fname,&flag)>=1)) {

                                          if (fname[0] != 0) {
                                            std::string filename = lexString(driver, yylloc, fname);
                                            /* recognized C preprocessor flags:
                                             * 0 (or no flag) => update location
                                             * 1 => enter file (include push)
                                             * 2 => return to file (include pop)
                                             */

                                            if (flag == 0) {
                                              // update
                                              yyinfo.pop();
                                              yyinfo.push(filename, yylloc);
                                              yycolumn = 1;
                                              yylineno = lineno-1;
                                            } else if (flag == 1) {
                                              yyinfo.push(filename, yylloc);
                                              yycolumn = 1;
                                              yylineno = lineno-1;
                                            } else if (flag == 2) {
                                              yyinfo.pop(); // leave
                                              // update
                                              yyinfo.setReported(filename);
                                              yycolumn = 1;
                                              yylineno = lineno-1;
                                            }
                                          } else {
                                            yycolumn = 1;
                                            yylineno = lineno-1;
                                          }
                                        }
                                      }
	YY_BREAK
case 106:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 339 "parser/scanner.ll"
{
                                        yyinfo.CommentExtent = yylloc;
                                        yyinfo.CommentContent.str(yytext);
                                        driver.addComment(yyinfo.CommentExtent, yyinfo.CommentContent);
                                        yyinfo.CommentContent.str("");
                                      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 345 "parser/scanner.ll"
{
                                        yyinfo.CommentContent.str("");
                                        yyinfo.CommentExtent = yylloc;
                                        yyinfo.CommentContent << yytext;
                                        BEGIN(COMMENT);
                                      }
	YY_BREAK

case 108:
YY_RULE_SETUP
#line 352 "parser/scanner.ll"
{
                                        yyinfo.CommentExtent += yylloc;
                                        std::string X(yytext);
                                        yyinfo.CommentContent << X;
                                        driver.addComment(yyinfo.CommentExtent, yyinfo.CommentContent);
                                        yyinfo.CommentContent.str("");
                                        BEGIN(INITIAL);
                                      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 360 "parser/scanner.ll"
{ yyinfo.CommentExtent += yylloc; yyinfo.CommentContent << yytext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 361 "parser/scanner.ll"
{ yyinfo.CommentExtent += yylloc; yyinfo.CommentContent << yytext; }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 362 "parser/scanner.ll"
{ yyinfo.CommentExtent += yylloc; yyinfo.CommentContent << yytext; }
	YY_BREAK


case 112:
YY_RULE_SETUP
#line 365 "parser/scanner.ll"
{ }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 366 "parser/scanner.ll"
{ /* include file name */
                                        std::string path = lexString(driver, yylloc, yytext);
                                        std::optional<std::filesystem::path> maybePath = driver.searchIncludePath(path, yylloc);
                                        yyin = nullptr;
                                        if (maybePath) {
                                          yyin = fopen(maybePath->string().c_str(), "r");
                                        }
                                        if (!yyin) {
                                          driver.error(yylloc, std::string("cannot find include file ") + yytext);
                                          return yy::parser::make_END(yylloc);
                                        } else {
                                          yyinfo.push(maybePath->string(), yyinfo.LastIncludeDirectiveLoc);
                                          yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner), yyscanner);
                                        }
                                        BEGIN(INITIAL);
                                      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 382 "parser/scanner.ll"
{ driver.error(yylloc, std::string("unexpected ") + yytext); }
	YY_BREAK

case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 384 "parser/scanner.ll"
{ yycolumn = 1; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 385 "parser/scanner.ll"
{ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(INCLUDE):
#line 386 "parser/scanner.ll"
{
                                        yypop_buffer_state(yyscanner);
                                        yyinfo.pop();
                                        if (!YY_CURRENT_BUFFER) {
                                          return yy::parser::make_END(yylloc);
                                        }
                                      }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 393 "parser/scanner.ll"
{ driver.error(yylloc, std::string("unexpected ") + yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 394 "parser/scanner.ll"
ECHO;
	YY_BREAK
#line 2143 "/home/johannes/test2/popl2020-artifact/prosynth/souffle/build/src/parser/scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 417 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 417 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 416);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 394 "parser/scanner.ll"

// vim: filetype=lex

